{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/OrbitalLending.algo.ts",
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/config.algo.ts"
  ],
  "mappingsiDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAkqEE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAloEF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAkoEE;;;AAAA;;AA1DC;;AAAA;AAAA;AAAA;;AAAA;AAxkEH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAwkEG;;;AAAA;;AA9EA;;AAAA;AAAA;AAAA;;AAAA;AA1/DH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0/DG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBD;;AAAA;AAAA;AAAA;;AAAA;AAv+DF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAu+DE;;;AAAA;;AA7BC;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA/ID;;AAAA;AAAA;AAAA;;AAAA;AA3zDF;;;AAAA;;;AAAA;AAAA;;;AAAA;AA2zDE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA1CC;;AAAA;AAAA;AAAA;;AAAA;AAhvDH;;;AAAA;AAAA;;AAgvDG;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/IA;;AAAA;AAAA;AAAA;;AAAA;AAjmDH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAimDG;;;AAAA;;AAZD;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnIC;;AAAA;AAAA;AAAA;;AAAA;AAl8CH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAk8CG;;;AAAA;;AA9HA;;AAAA;AAAA;AAAA;;AAAA;AAp0CH;;;AAAA;AAo0CG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzJA;;AAAA;AAAA;AAAA;;AAAA;AA3qCH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2qCG;;;AAAA;;AAnCA;;AAAA;AAAA;AAAA;;AAAA;AAxoCH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwoCG;;;AAAA;;AAxDA;;AAAA;AAAA;AAAA;;AAAA;AAhlCH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAglCG;;;AAAA;;AAbD;;AAAA;AAAA;AAAA;;AAAA;AAnkCF;;;AAAA;AAAA;;AAmkCE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjEC;;AAAA;AAAA;AAAA;;AAAA;AAz2BH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAy2BG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AA31BH;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AA21BG;;;AAAA;;AA/FA;;AAAA;AAAA;AAAA;;AAAA;AA5vBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4vBG;;;AAAA;;AAlGA;;AAAA;AAAA;AAAA;;AAAA;AA1pBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0pBG;;;AAAA;;AA9DA;;AAAA;AAAA;AAAA;;AAAA;AA5lBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4lBG;;;AAAA;;AAvGA;;AAAA;AAAA;AAAA;;AAAA;AArfH;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAqfG;;;AAAA;;AAjFD;;AAAA;AAAA;AAAA;;AAAA;AApaF;;;AAoaE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAnZF;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAmZE;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AA1XF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0XE;;;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AA3VF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2VE;;;AAAA;;AAXC;;AAAA;AAAA;AAAA;;AAAA;AAhVH;;;AAAA;AAAA;;AAgVG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AArUH;;;AAAA;AAqUG;;;AAAA;;AA9CA;;AAAA;AAAA;AAAA;;AAAA;AAvRH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAuRG;;;AAAA;;AAhGA;;AAAA;AAAA;AAAA;;AAAA;AAvLH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAuLG;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAnKH;;;AAAA;AAAA;;AAAA;;;AAAA;AAmKG;;;AAAA;;AAAD;;;AArIA;AAuIE;;AAAA;AAC2B;;AAAA;AA/J7B;AA+JE;AAAA;AAnBF;;AAoBE;;AAAA;AAdF;;AAe8B;;AAA5B;AAbF;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcE;;AAcF;;;AAagB;;AAtKhB;AAAA;AAAA;AAAA;AAsKS;AAAP;AAEA;;AAAA;;AAxKF;AAAA;AAAA;AAAA;AAwKE;AAAA;;;AAAA;;AAAA;;ACrPkC;;;;ADqPlC;AAAA;;;;AAAA;AAKO;;AAA4C;;AAA5C;AAAP;AAhKF;;AAkKE;;AAAA;AA/JF;;AAgKE;;AAAA;AA7JF;;AA8JE;;AAAA;AAzFF;;AA0F0C;AAAxC;AAzLF;;AA0LwB;AAAtB;AAhMF;;AAiM+B;AAA7B;AA9LF;AA+L8B;AAA5B;AAhGF;;AAiGmC;AAAjC;AAhKF;;AAiKE;;AAAA;AApLF;;AAqLE;;AAAA;AA5MF;;AA6M4B;;;;;;;;;;AAA1B;AAhKF;;AAiKwB;;AAAtB;AA9JF;;AA+J4B;;;AAA1B;AA5HF;;AA6H6B;AAA3B;AAtIF;;AAuI+B;AAA7B;AA9JF;;AA+J6B;;;AAA3B;AA5JF;;AA6J0B;AAAxB;AA1JF;;AA2J0B;;;AAAxB;AAxJF;;AAyJ2B;;;AAAzB;AAvJF;;AAwJ6B;AAA3B;AAlJF;;AAmJ4B;;AAA1B;AAhJF;;;;;;;;;;;;;;AAiJ4B;AAA1B;AA3IF;;AA4I+B;AAA7B;AAzIF;;AA0I8B;AAA5B;AApIF;;ACvIiC;;AD4Q/B;AAlIF;;AAmIsC;;AAApC;AA/KF;AAAA;;AAAA;AAAA;AA+CA;;AAiIE;AAAA;AAC6B;;AAAA;AA/G/B;;AA+GE;AAAA;AA5GF;;AA6GE;;AAAA;AAjGF;;AAkGuC;AAArC;AApGF;;AAqG8C;AAA5C;AAvGF;;AAwGE;;AAAA;AAhGF;;AAiG4B;AAA1B;AAnGF;;AAoGwC;AAAtC;AA1MF;;AA2ME;;AAAA;AAxOF;AAAA;AAAA;AAAA;AA0O+B;AAA7B;;;AACE;AAE0B;;AA7O9B;AAAA;AAAA;AAAA;AA8O4C;AACvB;;;;;;;AAJjB;;;;AC7RkC;;;AD6RlC;AAzHJ;AAAA;;AAAA;AAAA;AAkIiC;AAA/B;;;AACE;AAE0B;;AArI9B;AAAA;;AAAA;AAAA;AAsI8C;AACzB;;;;;;;AAJjB;;;;ACvSkC;;;ADuSlC;;;;;;AA2BJ;;;AAegB;;AAxQhB;AAAA;AAAA;AAAA;AAwQS;AAAP;AAGO;;AAAA;;;AAAqB;;AAAgB;AAAhB;AAArB;;;;AAAP;AACO;;AAAA;;;AAAsB;;AAAgB;AAAhB;AAAtB;;;;AAAP;AAEA;;AAAA;;;AACS;;AAAA;;AAAA;AAAP;AAEK;;AAAiB;AAAjB;AAAP;AAGO;;AAAA;;;AAAsC;;AAAoB;;;AAApB;AAAtC;;;;AAAP;AA3PF;;AA4PE;;AAAA;AAzPF;;AA0PE;;AAAA;AAvPF;;AAwPE;;AAAA;AArPF;;AAsPE;;AAAA;AAnPF;;AAoPE;;AAAA;AAjPF;;AAkPE;;AAAA;AA7OF;;;;;;;;;;;;;;;;;;AA8OE;;AAAA;AArOF;;AAsOE;;AAAA;AA9LF;;AA+LE;;AAAA;AAnPF;;AAoPE;;AAAA;AArOF;;AAsOE;;AAAA;AAnOF;;AAoOE;;AAAA;AAxPF;AAAA;;AAAA;AAAA;AA0PM;;;AAlPN;AAAA;;AAAA;AAAA;AARA;AAAA;;AAAA;AAAA;AA0PoC;AAA9B;;;AA1PN;AAAA;;AAAA;AAAA;AAQA;;AAmPI;AAAA;;;;;;;;;;;;;;AAIJ;;;AAEgB;;AAzShB;AAAA;AAAA;AAAA;AAySS;AAAA;;;AAAqD;;AApL9D;AAAA;;AAAA;AAAA;AAoLuD;AAA9C;;;;AAAP;AACO;;AAAS;;AAAT;AAAP;AAC4B;;AAAA;AAhL9B;;AAgLE;AAAA;;;;;;AAOF;;;AAEgB;;AApThB;AAAA;AAAA;AAAA;AAoTS;AAAP;AA/LF;;AAgME;;AAAA;;AAQF;;;AACgB;;AA9ThB;AAAA;AAAA;AAAA;AA8TS;AAAP;AACA;;AAAA;;AA/TF;AAAA;AAAA;AAAA;AA+TE;AAAA;;;AAAA;;AAAA;;AC3YgC;;;;AD2YhC;AAAA;;;;AAAA;AAtVF;AAAA;AAAA;AAAA;AA6VmD;AAClC;AAEI;;AACE;;AAAA;;AAAA;AACG;;AAAA;;AAAA;AAEJ;;AACiB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;AACwB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;;;;;;;AAHI;;;;;;;;;AALJ;;;;AChZqB;;;ADgZrB;;;AAYW;AAvW5B;;AAuWE;AAAA;;;;;;AASF;;;AACgB;;AA7VhB;AAAA;AAAA;AAAA;AA6VS;AAAP;AACA;;AAAA;;AA9VF;AAAA;AAAA;AAAA;AA8VE;AAAA;;;AAAA;;AAAA;;ACzakC;;;ADyalC;AAAA;;;;AAAA;AAI0B;;AAAA;AAtX5B;;AAsXE;AAAA;AAGA;AAE0B;;AAET;;;;;;;;;AAJjB;;;;AC9aoC;;;AD8apC;;;;;;AAgBF;;;AACgB;;AAtXhB;AAAA;AAAA;AAAA;AAsXS;AAAP;AA1YF;AAAA;;AAAA;AAAA;AA2YiC;AAAoB;;AAAA;;AAA5C;AAAP;AAEA;;AAAA;;AAzXF;AAAA;AAAA;AAAA;AAyXE;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;;AAAA;AAtYF;;AA0YE;;AAAA;;;;;;AASF;;;AAnYA;AAAA;;AAAA;AAAA;AAqYyB;AAAA;;AAAA;;AAAA;AAGR;AAAA;;;;;;;;;;;;;;AAAA;;;;ACpdqB;;;ADodrB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAMK;AAApB;AA4BF;;;AA9VsF;;AAAA;;AAAA;AAgWlC;AAAA;AAAA;AAEE;AAAhB;;AAAgB;AAA9C;;AAAmB;AAEH;;AAAA;;;AACI;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AACY;;AAAA;;;AALQ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAeF;;;AAlXsF;;AAAA;;AAAA;AAoXlC;AAAA;AAAA;AAEhB;AAAhB;;AAAgB;AAA3B;AAAA;;AAAA;AAAP;AACM;;AAAmB;AAEH;;AAAA;;;AACI;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AACY;;AAAA;;;AALQ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAgBF;;;AA9eA;AAAA;AAAA;AAAA;AAqfmD;AACnC;;AA/dhB;AAAA;AAAA;AAAA;AA+dS;AAAP;AACyB;;AAAA;AAAA;AAAA;;AAAlB;AAAP;AAjZoF;;AAAA;;AAAA;AAAA;AA4U9C;AAAA;;AAsE/B;AAAP;AACA;;AAAA;;AAleF;AAAA;AAAA;AAAA;AAkeE;AAAA;;;AAAA;;AAAA;;AC5iBkC;;;;AD4iBlC;AAAA;;;;AAAA;AAzfF;AAAA;AAAA;AAAA;AAkgBoD;;AAAA;;AAAA;AAAA;AAAA;AAI/B;;AAJ+B;AAAA;;AAAA;AAQlD;;AAAA;AAAA;;AAAA;AA3ZF;AAAA;;AAAA;AAAA;AA4ZkF;AAAxC;AA5Z1C;;AA4ZE;AAAA;AACA;AAEmB;;AACO;AAET;;;;;;;;;;;AALjB;;;;AC9jBoC;;;AD8jBpC;AA1FsC;AAAA;;AAoGtC;;;;;;AA+DF;;;AArlBA;AAAA;AAAA;AAAA;;AAAA;AAkJA;AAAA;;AAAA;AAAA;AAscmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIA;;AAAA;;ACroB+B;ADqoB/B;AAAA;AAGA;;AAAA;;;AAEuB;;;AAAjB;AArlBR;AAAA;AAAA;AAAA;AAwlBE;;;;;AAKA;AAE0B;;AAzmB5B;AAAA;;AAAA;AAAA;AA0mByC;;;;;;;;;AAHvC;;;;AC5pBoC;;;AD4pBpC;AAhmBF;AAAA;;AAAA;AAAA;AAymBE;AAzmBF;;AAymBE;AAAA;AAtmBF;AAAA;AAAA;AAAA;AAumBE;;AAAA;AAvmBF;AAumBE;AAAA;AAC0B;;;AAthB5B;;AAshBE;AAAA;AArnBF;AAAA;AAAA;AAAA;AAwnBkD;AAArC;AACuB;;AAFf;AAAA;AAhgBiD;;AAAA;AAAA;AAAA;AAogBhC;AAAA;;AAApC;;;AACyD;AAAA;AAAA;AACA;AAAd;AAAc;AAAjD;;AAAoB;AAEA;AAAA;;;AACT;AAAA;AAFuB;AAAA;AAAxC;;AA9nBJ;AAAA;AAAA;AAAA;AAooBoD;AAArC;AACM;;AAAA;AAFuB;AAAA;AAAxC;;AAznBJ;AAAA;;AAAA;AAAA;AC1DkC;AD+kBF;AAlhBhC;AAAA;AAAA;AAAA;AAohBmB;AAEa;;AAAA;ACnlBE;ADolBzB;;;;;;;;AA+GT;;;;;;;AAhpBA;AAAA;;AAAA;AAAA;AAupBiD;AAxgBjD;AAAA;;AAAA;AAAA;AAygBmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMA;;AAAA;;AACU;;;AADV;AAAA;AAIuB;;;AAAjB;AAIF;;AAAoB;;AAApB;AAAJ;;;AAhqBF;AAAA;;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AA4jBmB;;AAAA;AACV;;AAAA;AAqGP;AAAA;;;AAEc;;AAA0B;;AAAA;AAAiB;;AAA0B;;AAAA;AAA5E;AAAA;;AAAA;AAAP;AAEA;AAEqB;;;;;;;;AAFrB;;;ACruBoC;;;ADquBpC;AAzqBF;AAAA;;AAAA;AAAA;AAirBE;;AAAA;AAjrBF;;AAirBE;AAAA;AA9qBF;AAAA;AAAA;AAAA;AA+qBE;AAAA;AA/qBF;AA+qBE;AAAA;AAC0B;;;AA9lB5B;;AA8lBE;AAAA;AA7rBF;AAAA;AAAA;AAAA;AAgsBkD;AAArC;AACuB;;AAFf;AAAA;AAxkBiD;;AAAA;AAAA;AAAA;AAAA;;AA4kBhC;AAAA;;AAApC;;;AACyD;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACd;AAAc;AAAjD;;AAAoB;AAApB;AAAA;;AAEN;;;AACkC;;AAAA;;;AAGN;;AAAA;;;AACT;;AAAA;AAFuB;AAAA;AAAxC;;AAAA;AAAA;;AA1J2B;AAAA;;;;;;;;AAAA;;;;AClmBK;;;ADkmBL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;ACtmBM;;;ADsmBN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAMb;;AAAA;AACV;;AAAA;;;;;;;;AA0LT;;;;;;;;AAnmBA;AAAA;;AAAA;AAAA;AA4mBmC;AAAW;AAArC;AAAP;AArpBqD;;AAupBb;;AAvpBa;AAupBL;AAAA;AAAA;;AAAA;AACzB;;;AAAjB;AAEN;;;AACuD;;AAA1B;;;AAAkC;;AACxB;AAArC;;AAAkB;AAAlB;;AA6hCF;;AAAA;;ACn1DuC;;;ADm1DvC;AAAA;AAEA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAGqC;;AAAA;AAHrC;AAAA;;;;AAAA;AA9rDoF;;AAAA;;AAAA;AA4U9C;AAAA;;AAw3CtC;AAhiCM;;AAAA;;AAAA;;AAAgB;;;AAtuBxB;AAAA;;AAAA;AAAA;AAuuBgC;AC3zBE;AD2zBH;AA3wB/B;AAAA;AAAA;AAAA;AA4wBuC;;;AAklCpB;;AAAA;AC74DkB;;AD84DV;AAElB;AAAP;AAp1DF;AAAA;AAAA;AAAA;AAsCA;AAAA;;AAAA;AAAA;AA0zDiB;AC75DiB;AD85DzB;AAxxDT;AAAA;;AAAA;AAAA;AA6wDS;;AAAA;AAAA;AAAP;AAnlCwB;;AAApB;;AAnvBN;AAAA;;AAAA;AAAA;AAovBE;;;AACa;AArvBf;AAAA;;AAAA;AAAA;AAwvBqB;;AAxvBrB;AAAA;;AAAA;AAAA;AA2vBwB;;AAJQ;AAFjB;;;;;;;;;;;;;;;;;;AAAA;;;;ACp0BuB;;;ADo0BvB;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AASwD;;AAAA;AAAA;AAAA;;AAjvBvE;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA4qBmB;AAAb;AAAJ;;;AACmB;;AAAiB;;AAAjB;AACc;;AAAb;AAAlB;;AAYqB;;AAAA;;AAAA;AACgB;AAAnB;AAmpCd;;AAAA;;AAAuB;AAAvB;;AAx2DR;AAAA;;AAAA;AAAA;AA02DE;AA12DF;;AA02DE;AAAA;AA3lCA;;AAAA;;;AAEW;;AAinCL;AAAe;;;AAEf;;AAAmB;;;AAQnB;;AAAA;AAAA;;AAAkB;AAKU;;AAAA;;;AAC4B;;AAAjB;;AAAiB;AAA9B;;AAAA;AAAZ;AAl6DtB;AAAA;AAAA;AAAA;AAq6Dc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;AAHE;AAAA;AAAA;AAKL;;AAAA;AAh1Df;AAAA;;AAAA;AAAA;AAi1DkB;AAXmB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtzDkB;;AAAA;;AAAA;AAszDrD;AAAA;AAeA;;AAAA;;AAAA;;;AAhoC0B;;AAwoC1B;;;;;;;;;;AAAA;;;ACx+DoC;;;ADw+DpC;AAvoCA;AAAA;;;AAztBF;AAAA;;AAAA;AAAA;AA0tB6B;AA1tB7B;;AA0tBE;AAAA;AAC0B;;;AAltB5B;;AAktBE;AAAA;;AAP8D;;AAA5D;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;;AAAA;;;;;;AAlFS;;AAAa;;AAAb;AAAJ;;;AACY;;AAAiB;;AAAjB;AACc;;AAAb;AAAlB;;;;;AACS;;AAAa;;AAAb;AAAJ;;;AACY;;AAAiB;;AAAjB;AACc;;AAAb;AAAlB;;;;;AACS;;AAAY;;AAAZ;;;;;AAAJ;;;AACY;;AAAiB;;AAAjB;AACc;;AAAb;AAAlB;;;;;;;;;;;;;;;;AA0FJ;;;AAWsB;;AAAA;AAt0BtB;AAAA;AAAA;AAAA;AAy0Bc;;AAAA;AACsB;;AAAnB;AAFG;;AAGF;;AAHE;AAAA;AAAA;AA/uBpB;AAAA;;AAAA;AAAA;AAqvBkB;AAX0B;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1tBW;;AAAA;;AAAA;AA0tBrD;AAAA;AAvtBF;AAAA;;AAAA;AAAA;AAquBoE;AAAjC;AAruBnC;;AAquBE;AAAA;;AAGF;;;AAOgB;;AAp0BhB;AAAA;AAAA;AAAA;AAo0BS;AAAP;AACA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;;AAAA;;;AAvwBF;AAAA;;AAAA;AAAA;AAwwB6B;;AAAA;AAxwB7B;;AAwwBE;AAAA;AAC0B;;;AAhwB5B;;AAgwBE;AAAA;;AAGF;;;AAzvBuD;;AAAA;;AAAA;AA2vBrB;AAAA;;AAAhC;AAltBF;AAAA;;AAAA;AAAA;AAmtBmC;AAAW;AAArC;AAAP;AACA;;;;AAEA;;AAAA;;;;AAE0B;;;AA3wB5B;;AA2wBE;AAAA;;AAyDF;;;;;;;AAt5BA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAyEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAnCA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAm0BE;;;AAAoB;;;AAzyBtB;AAAA;;AAAA;AAAA;AA61Bc;;;AA13Bd;AAAA;;AAAA;AAAA;AAMA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAm1BM;;AAAA;AAAJ;;;AACqB;;AAAA;;AAAA;AACF;;AAAA;AAAX;AAAN;;AAl1BJ;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AA21BM;;;AAAc;;AAAA;AAAA;;AAAA;;;;AAAd;;;;;;;;;;;AAn1BN;;AA+2BE;;AAAA;AAAA;;AAAA;AACA;;AAAA;AApCQ;;AAAA;;AAAA;AAAA;;AAAe;ACn8BS;ADo8BxB;;AAAgB;AACH;;AAAA;;AAAA;AACb;;AAAA;;AAAA;AAAwB;;AAAA;;AAAA;AAAxB;AAAN;;;;;AAt2BJ;AAAA;;AAAA;AAAA;;;;;;AAy0ByB;;AAAA;;AAAA;ACz6BS;AD06Bd;AAAZ;AAAA;;AACN;;;AAA4B;;;AA0CN;;;AAxCN;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AC76BgB;AD86Bb;AACZ;;AAAA;;;AAsCe;;;AA+CxB;;;AACQ;;AAAgB;;AAAU;AAA1B;AACN;;;AAAoB;AAAP;;AAAA;;AAAA;AA73Bf;AAAA;;AAAA;AAAA;AA83BmB;;AAAA;AACoB;;AAAb;;AAAa;AAA9B;AAAP;;AAAA;;AAAA;AASF;;;AAx3BuD;;AAAA;;AAAA;AAy3Bd;AAAA;AAAA;AACd;;;AAGA;AAAA;;;AACD;;AAAA;;;AAv+B1B;AAAA;AAAA;AAAA;AAy+BwB;;AAAA;;;AACT;;AAAA;AAj5Bf;AAAA;;AAAA;AAAA;AAk5BkB;AAPD;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AASf;;AAAA;AAAA;AACA;AASF;;;;;;;AAC6B;;AAArB;AA55BR;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA85BM;AAAJ;;;AAAwB;AAAP;;AAAA;AAEX;;AAAA;;AAAiB;AAAjB;AAAA;;AA1DN;;;AAAyB;;;AAmEzB;;AAAA;;;AAz6BF;;AA06BI;;AAAA;AACO;AAAP;;AAAA;AA96BJ;AAAA;;AAAA;AAAA;AAo7BqB;AAAA;;AAAA;AC3jCY;;AD4jCL;AACD;AAt7B3B;;AAu7BE;AAAA;AA17BF;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAg8ByB;AAAnB;;AACJ;;;AACqB;;AAAA;;AAAA;ACtkCU;;ADukClB;AAAX;;AA5+BJ;AAAA;;AAAA;AAAA;AC7FkC;AD8kC1B;AAAmB;AAGN;;AAAA;AAAA;;AAAA;ACjlCa;ADklCE;AAC5B;AAA2B;AAIN;;AAAA;;AAAA;AAj9B7B;;AAi9BE;AAAA;AA1hCF;AAAA;AAAA;AAAA;AA6hCE;;AAAA;AA7hCF;AA6hCE;AAAA;AA1hCF;AAAA;;AAAA;AAAA;AA6hCE;AA7hCF;;AA6hCE;AAAA;AAj9BF;;AAo9BE;;AAAA;AAIA;;AAAA;AAr9BF;AAAA;;AAAA;AAAA;AAs2BmB;;AAAA;ACj/BmB;;;;;ADm/Bf;ACr/BU;;ADw/Bd;AC1/Be;AD2/BN;AAApB;;AAyDoB;;;AAwD5B;;;AAn9BuD;;AAAA;;AAAA;AAo9BZ;AAAA;AAAzC;AAYF;;;;;AAzkCA;AAAA;AAAA;AAAA;;AAAA;AAkJA;AAAA;;AAAA;AAAA;AA07BmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIuB;;;AAAjB;AACuC;;AAA1B;;;AAAb;AACgC;;AAA1B;;;AACa;;;AAAA;AAElB;;AAAA;;AAAA;AAAP;AAEM;;AAAwB;AAAxB;AAAA;;AAlgCR;AAAA;;AAAA;AAAA;AAqgCE;;AAAA;AArgCF;;AAqgCE;AAAA;AACA;;AAAA;;;AAEA;;;AAr/BqD;;AAs/B3B;;AAt/B2B;AAs/BnB;;AAn/BpC;AAAA;;AAAA;AAAA;AAo/BsC;AAAlC;AAp/BJ;;AAo/BI;AAAA;AAEA;AAE0B;;AACW;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJtC;;;;ACppCkC;;;ADopClC;;AAWsC;;AACb;AAAA;AAAA;;;AACD;AAAA;;;AA/mC5B;AAAA;AAAA;AAAA;AAknCgB;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKL;;AAAA;AA7hCjB;AAAA;;AAAA;AAAA;AA8hCoB;AAXwB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAngCW;;AAmgC3B;;AAngC2B;AAmgCnD;AAAA;;;;;;AAqBJ;;;;;AAEgB;;AA5mChB;AAAA;AAAA;AAAA;AA4mCS;AAAP;AAj/BF;AAAA;;AAAA;AAAA;AAk/BmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;ACvrCoC;ADurCpC;AAAA;;;;AAAA;AArnCF;AAAA;;AAAA;AAAA;AA+GA;AAAA;;AAAA;AAAA;AA0gCyB;AAAjB;AAAA;;AACN;;;AACE;;;;;;;;;;AAAA;;;AC7rCkC;;;AD6rClC;AAQA;;;AAnoCJ;;AAooC0B;AAAtB;AArhCJ;;AAshCgD;AAA5C;;;;;;AAeJ;;;;;;AA3jCuD;;AAAA;;AAAA;AAAA;;AAokCrB;AAAA;;AAAhC;AA3hCF;AAAA;;AAAA;AAAA;AA4hCmC;AAAW;AAArC;AAAP;AAGA;;;;AAEA;;AAAA;;AC5tC8B;AD4tC9B;AAAA;AAIqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAA+B;;AAAiB;AAAhD;AAAA;;AACA;AAAiC;;;AAAjC;AAAA;;AAAA;;AAEmB;;;AAAA;AAAA;AAAA;;AACzB;AAAA;AAGM;AAAA;;AAAA;;AAAwB;;;AACxB;AAAmB;;;AACzB;AAAA;AACA;;AAAA;AClvCgC;ADovCX;AACf;;AAAiB;AA9pCzB;AAAA;;AAAA;AAAA;AAgqCS;;AAAA;AAAP;AAhqCF;AAAA;;AAAA;AAAA;ACvFkC;ADyvCf;AACX;;AAAoB;AC1vCM;AD2vCD;AAEd;AC7vCe;AD8vCL;AA5lC7B;AAAA;;AAAA;AAAA;AA+lC2D;AAAnD;AA/lCR;AAAA;;AAAA;AAAA;AAgmCmC;;;AAA3B;AAAA;;ACjwC6B;;ADmwChB;AAAA;;AAAA;AACW;;;AAAyB;;;AAEhC;;AAAA;;AAAyB;;AAAzC;AAAP;AACuB;;AAAA;;AAAhB;;AAAA;AAAP;AACuB;;AAAA;;AAAhB;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAGM;AAAiB;AAAjB;;AAGN;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEmB;;AAFnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAOyB;;AAAA;;AA1nC3B;AAAA;;AAAA;AAAA;AA2nCoE;AAAjC;AA3nCnC;;AA2nCE;AAAA;AAEA;AAGiC;;AAnDM;;AAmDN;;;;;;;;;;;;;;AAHjC;;;;AC3xCoC;;;AD2xCpC;AAnoCoF;;AAAA;;AAAA;AA6oCrC;AAAA;AAAA;AACI;AAAhB;;AAAgB;AAA7C;;AAAuB;AAEZ;;AAAA;;;AACI;;AAAA;;;AACF;;AAAA;AACQ;;AAAA;;;AACD;;AAAA;;;AALe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAzC;AA/pCF;AAAA;;AAAA;AAAA;AAuqC6B;;AAAA;AAAA;;AAAA;AAvqC7B;;AAuqCE;AAAA;AACA;;;AA0BM;;AAAA;AAAsC;;AAAhB;AAE5B;AAnwCF;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAmwCE;;;;AC50CoC;;;AD40CpC;AASA;AAIiB;;AAAA;AAAA;;;;;;;;;AAJjB;;;;ACr1CoC;;;ADq1CpC;AAjCA;;AAAA;;;AACE;;;;;;;;;;;;;AAAA;;;;ACrzCkC;;;ADqzClC;AAUwB;;;AA9qC5B;;AA8qCE;AAAA;;;;;;AAxD2D;;AAAA;;AAAA;;AAAA;;;;;;AA6F7D;;;AAlzCA;AAAA;AAAA;AAAA;AAmzCiC;;;AAChB;;AAAA;ACn2CoB;;ADo2C5B;AAAP;AAQF;;;;;;;AAptCuD;;AAstCtB;;AAttCsB;AAstCd;AAAA;;AAAvC;AA7qCF;AAAA;;AAAA;AAAA;AA8qCmC;AAAW;AAArC;AAAP;AACA;;;;AAxtCqD;;AA0tCjB;;AA1tCiB;AA0tCT;AAAA;AACF;AAAA;;;AA9tC0C;;AAAA;AAAA;AAsV9C;AAAA;AAy4BpB;;AAAiB;AAA5B;;AAAA;AAAP;AAEyB;;;AAAA;AAAA;AAAA;;AACzB;;;AAA+B;;AAAiB;AAA5B;;AAAA;AAId;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAiB;AAFjB;;AAAwB;;;AAAxB;AAAA;;AAOA;;AAAmB;;;ACl4CO;ADo4CX;AAhzCvB;AAAA;;AAAA;AAAA;AAizCwC;AAAhC;AAAA;;AAGF;AAAJ;;;AAAmD;AAAP;;AAAA;AAGtC;;AAAA;;AAAuB;AAIN;AAAA;;;;;;;;AAAA;;;;ACj5Ca;;;ADi5Cb;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;ACr5Cc;;;ADq5Cd;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AA7vC8D;;AAAA;;AAAA;AAsV9C;AAAA;AA86BG;;;AAAvB;;;AAGD;;AC55CkB;;AD45ClB;AACX;;AAA8B;AAGnB;;AAAA;AACX;;AAAuB;AAE7B;;AAAA;AAuEF;;;;;;;AAEE;;AAAA;AA3yCF;AAAA;;AAAA;AAAA;AA4yCmC;AAAW;AAArC;AAAP;AACwB;;AAt1C6B;;AAs1C/C;;AAt1C+C;AAAA;;AAu1CnB;AAAA;;AAAlC;AACA;;;;AACwC;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAE5B;AAAA;;;AAAA;;AAAA;;AAAkB;AAAvB;;AAAA;AAAP;AAEmD;;AAAA;AAAA;AAAA;;AAh2CiC;;AAAA;AAAA;AAi2C5C;AAAA;AAAA;;AAAxC;AAC+C;AAAA;AAClC;;AAAiB;AAAvB;;AAAA;AAAP;AA3EkC;AAAA;AAAA;;AAAlC;AA5uCF;AAAA;;AAAA;AAAA;AA6uCmC;AAAW;AAArC;AAAP;AACA;;;;AAEuC;AAAA;AACG;AAAA;;;AA7xC0C;;AAAA;AAAA;AAsV9C;AAAA;AAw8BpB;;AAAiB;AAA5B;;AAAA;AAAP;AACyB;;;AAAA;AAAA;AAAA;;AACzB;;;AAA+B;;AAAiB;AAsEzC;;AAAA;AAAP;AACyC;;AAAA;AAAjB;;AAAiB;AAAlC;;AAAA;;AAAA;AAAP;AACM;;AAAoB;AAG1B;;;;;;;;;;;;;;;;AAAA;;;;ACngDoC;;;ADmgDpC;AAaoB;AA99CtB;AAAA;AAAA;AAAA;AAi+Cc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKA;;AAAA;;;AACG;;AAAA;;;AAXN;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaf;;AAAA;AAAA;AAGA;;AAAA;;AAAA;;;AAG0B;;;AA/4C5B;;AA+4CE;AAAA;;AApGM;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAiB;AAFjB;;AAAwB;;;AAAxB;AAAA;;AAOA;;AAAmB;;;ACh8CO;ADk8CX;AA92CvB;AAAA;;AAAA;AAAA;AA+2CwC;AAAhC;AAAA;;AAGF;AAAJ;;;AAAmD;AAqDnC;;;AAlDV;;AAAA;;AAAuB;AAIN;AAAA;;;;;;;;AAAA;;;;AC/8Ca;;;AD+8Cb;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;ACn9Cc;;;ADm9Cd;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AA3zC8D;;AAAA;;AAAA;AAsV9C;AAAA;AA4+BG;;;AAAvB;;;AAGD;;AC19CkB;;AD09ClB;AACX;;AAA8B;AAGnB;;AAAA;AACX;;AAAuB;AA2Bb;;;AAj8ClB;AAAA;;AAAA;AAAA;AAqjDE;AAljDF;AAAA;AAAA;AAAA;AA0jDE;AAx9CF;AAAA;;AAAA;AAAA;AAg+CE;AAWF;;;;;;;;AA1lDA;AAAA;AAAA;AAAA;AAimDkC;AAAzB;AAAP;AA/8CF;AAAA;;AAAA;AAAA;AAg9CmC;AAAW;AAArC;AAAP;AAz/CqD;;AAAA;;AAAA;AAAA;;AA0/CrB;AAAA;;AAAhC;AACA;;;;AAEqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAAuB;;;AAAvB;AACA;AAAyB;;AAAiB;AAA1C;AACmB;;;AAAA;AAAA;AACzB;AACO;;AAAA;;;AAAuB;;AAAA;;AAAA;AAAvB;;;;AAAP;AAEM;;AAAA;;AAAA;;AAAwB;;;AACxB;;AAAmB;;;AACzB;AAAA;AACA;;AAAA;AChqDgC;ADkqDX;AACf;;AAAiB;AA5kDzB;AAAA;;AAAA;AAAA;AA6kDS;AAAP;AAGA;;AAAA;;AACiB;;AADjB;AAAA;;;AAAA;;AAAA;;AAEmB;;AAFnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAvnDF;AAAA;AAAA;AAAA;AA6nDoB;;;AAAZ;;AACA;;AAAA;AAAqC;;AAAX;AACA;AAAA;;AAAA;AAAA;;AA1gDlC;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA6gDQ;;AAAqB;AAArB;AAAA;;;;;;AAGF;;;AAAuB;;AAAA;;AAAA;;;;;AAAvB;;;;;;;AAIe;;AAAA;;AAAA;ACxrDgB;;ADyrDV;AC1rDO;AD4rDE;;AAAA;AAAA;AAAA;;AAAf;AC5rDa;AD6rDP;AAviD2D;;AAAA;;AAAA;AAAA;AAAA;;AAsV9C;AAAA;AAAA;AAmkC4C;;;AAA1D;;;AACH;;AC/iDc;;AD+iDd;AACf;;AAA0B;AArkCM;AAAA;AAAA;AAwkCpB;;AAAiB;AAA5B;;AAAA;AAAP;AAGa;AAAA;;;;;;;;AAAA;;;;ACzjDuB;;;ADyjDvB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIC;AAAA;;;;;;;;AAAA;;;;AC7jDsB;;;AD6jDtB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIG;;AAAA;AACb;;AAAmB;AAAnB;AAAA;;AAEA;;AAAA;AAAJ;;;;;;;AA8HA;;AAAA;AAAA;AAnHA;;;AAA2B;;;AAsHvB;;AAAA;;AAAA;AAAJ;;;;;;;AAII;;AAAA;;AAAA;AAAA;AAAA;;AAAJ;;;;;;;AAIkC;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAE9B;;AAAA;;;AAAA;;AAAA;;;AAAkD;;AAAA;;AAAA;AAAlD;AAAA;AAIsB;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAC1B;AAC6B;;;AAAqB;;;AAElD;AAE0B;;AACH;;AAjEM;;AAiEN;AAAA;AAAA;;;;;;;;;;AAHvB;;;;ACvtDoC;;;ADutDpC;AASA;;AAAA;;;AACE;AAGqB;;;;;;;;;AAHrB;;;ACjuDkC;;;ADiuDlC;AAOA;;;AAGI;;AAAA;;AAAA;AAAA;;AAAuB;AAAvB;;AACA;;AAAA;;AAAA;AAAA;;AAAsB;AAAtB;AAAA;;AAAA;;AAEN;;AAAA;AAAA;;;AAtmDF;AAAA;;AAAA;AAAA;AAumD6B;;AAAA;AAvmD7B;;AAumDE;AAAA;AACA;;;AAEA;;;AACE;;AAAA;;;AACE;;;;;;;;;;;;;;AAAA;;;;ACpvDgC;;;ADovDhC;AAQA;;AAAA;AAAA;;;AAEuB;;AAAA;;AAhmD7B;AAAA;;AAAA;AAAA;AAimDsE;AAAjC;AAjmDrC;;AAimDI;AAAA;AAkBwB;;;AAhoD5B;;AAgoDE;AAAA;;AAfyB;;AAAA;AAAA;;;AACE;AAAA;;;AACL;;AAAA;AAltDxB;AAAA;AAAA;AAAA;AAotDiB;;AAAA;AA3nDjB;AAAA;;AAAA;AAAA;AA4nDoB;AAEJ;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAPH;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaf;;AAAA;AAAA;;;;AAzDoD;;AAAA;;AAAA;;;;;;AAvuChB;;AAAA;AAAA;AAomCH;AAAjB;;AAAiB;AAA5B;;AAAA;AAAP;AAEa;AAAA;;;;;;;;AAAA;;;;ACplDuB;;;ADolDvB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIC;AAAA;;;;;;;;AAAA;;;;ACxlDsB;;;ADwlDtB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIqB;;AAAA;AAC7B;;AAA2B;AAEsB;AAAA;;;AAA/B;;;AACO;AC7lDI;;AD8lDJ;AC/lDC;ADimDD;AACzB;;AAAmB;ACjmDU;;ADmmDF;AAC3B;;AAAoB;;;AA6FG;;;;;;;;;;;AAuF/B;;;AAhoDuD;;AAAA;;AAAA;AA0oDnB;AAAA;AAAA;;AAAlC;AAC0C;AAAA;AACS;AAAA;;;AA/oDiC;;AAAA;AAAA;AAsV9C;AAAA;AA0zCtC;;;;AACqB;AAAA;;;AACf;AAAkC;;AAAiB;AAjtD3D;AAAA;;AAAA;AAAA;AAqtDW;;AAAA;;;AAE2B;;AAAjB;;AAAiB;AAH9B;;AAAA;AAA6B;;;AAMf;ACjzDY;ADizDZ;AAAd;;AAAa;AACb;AAAA;;AAAyB;AACzB;;AAAA;;AAAoB;AAE1B;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AA+CF;;;AA9sDsF;;AAAA;;AAAA;AA4U9C;AAAA;AAAA;;AAo4CtC;AA13CsC;AAAA;AAAA;AA43ChB;;AAAiB;AAAhC;;AAAA;AAAP;AAE+B;AAAA;;;;;;;;AAAA;;;;AC52DK;;;AD42DL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAKD;AAAA;;;;;;;;AAAA;;;;ACj3DM;;;ADi3DN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAMb;;AAAA;AACX;;AAAuB;AA14CS;AAAA;AAAA;AA84CJ;;;AAEX;;;AAGN;AC93DkB;;AD+3Db;AAEtB;AAiHF;;;;;AAEgB;;AA96DhB;AAAA;AAAA;AAAA;AA86DS;AAAP;AAnzDF;AAAA;;AAAA;AAAA;AAozDmC;AAAW;AAArC;AAAP;AAEiC;;AAA0B;;AAAA;AAAiB;;AAA0B;;AAAA;AAA5E;AAApB;AAn0DR;AAAA;;AAAA;AAAA;AAq0DM;AAAJ;;;AACE;AAt0DJ;AAAA;;AAAA;AAAA;AAy0DQ;;AAAA;AAAoB;AAApB;AAAA;;ACz/DuC;AD0/DzC;AAAJ;;;AACE;AAGF;;AAAA;AAAA;;;AAt1DF;AAAA;;AAAA;AAAA;AAw1DmB;;AAAA;AACuB;;AAAb;AAv1D7B;AAAA;;AAAA;AAAA;AAy1DE;;AAAA;AAz1DF;;AAy1DE;AAAA;AAv1DF;AAAA;;AAAA;AAAA;AAw1DE;;AAAA;AAx1DF;;AAw1DE;AAAA;AAE0B;AAx1D5B;AAAA;;AAAA;AAAA;AAy1DE;;AAAA;AAz1DF;;AAy1DE;AAAA;AA/8DF;AAAA;AAAA;AAAA;AAg9DE;AAh9DF;AAg9DE;AAAA;;AAGF;;;AACgB;;AAr1DhB;AAAA;;AAAA;AAAA;AAq1DS;AAAP;AACkE;;AAAxC;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAC1B;;;AACE;AAx1DJ;AAAA;;AAAA;AAAA;;;;;;;;;;;AAw1DI;;;;ACthEkC;;;ADshElC;;AAeJ;;;;;;AAEgB;;AAz2DhB;AAAA;;AAAA;AAAA;AAy2DS;AAAP;AACsB;;AAAtB;;;AACA;;AAAA;;ACjiEiC;;;;ADiiEjC;AAAA;AACA;;;AAr/DF;AAAA;;AAAA;AAAA;AAw/DiD;AACJ;;AAAxB;AAAA;;AAAA;AAGnB;AAn3DF;AAAA;;AAAA;AAAA;AAzIA;AAAA;;AAAA;AAAA;AA+/DyC;;;;;;;;;AAHvC;;;;ACjjEoC;;;ADijEpC;AA//DF;AAAA;AAAA;AAAA;AAwgE+B;AAA7B;;;AAGW;;AAA0B;;AAAA;AAAiB;;AAA0B;;AAAA;AAA5E;AC7jEgC;AD6jEhC;AADI;AAAA;;AAEN;;;AACE;AAj4DN;AAAA;;AAAA;AAAA;;;;;;;AAi4DM;;;AC/jEgC;;;AD+jEhC;AA95DN;AAAA;;AAAA;AAAA;AAu7DgC;AAj6DhC;AAAA;;AAAA;AAAA;AAk6DkB;AA7hElB;AAAA;;AAAA;AAAA;AA8hEqB;AA3hErB;AAAA;AAAA;AAAA;AA4hEoB;AAn9DpB;AAAA;;AAAA;AAAA;AAo9DmB;AAv6DnB;AAAA;;AAAA;AAAA;AAw6D8B;AA16D9B;AAAA;;AAAA;AAAA;AA26D6B;AA76D7B;AAAA;;AAAA;AAAA;AA86DoC;AA7hEpC;AAAA;;AAAA;AAAA;AA8hEc;AAr9Dd;AAAA;;AAAA;AAAA;AAs9DoB;AA/iEpB;AAAA;AAAA;AAAA;AAgjEwD;AAArC;AA7iEnB;AAAA;;AAAA;AAAA;AA8iEsD;AAApC;AA/7DlB;AAAA;;AAAA;AAAA;AAg8D4D;AAAvC;AAr7DrB;AAAA;;AAAA;AAAA;AAs7D2B;AA97D3B;AAAA;;AAAA;AAAA;AA+7DmB;AAx8DnB;AAAA;;AAAA;AAAA;AAy8DyB;AAhBhB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;;AAAA;AAriEF;AAAA;AAAA;AAAA;AAuhEqD;AACH;;AAAzB;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACrB;;;AACE;AA94DN;AAAA;;AAAA;AAAA;AA5IA;AAAA;AAAA;AAAA;AA6hE8C;;;;;;;;;AAHxC;;;;AC5kEgC;;;AD4kEhC;;;;AAuCN;;;AAOgB;;AA57DhB;AAAA;;AAAA;AAAA;AA47DS;AAAP;AAEA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAvkEF;AAAA;;AAAA;AAAA;AA0kE6C;AAH3C;AAAA;;;;AAAA;AAKA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEmB;;AAFnB;AAAA;;;;AAAA;AAKgD;;AAAb;;AAAa;AA/8DlD;;AA+8DE;AAAA;AACoD;;AAAf;AAAe;AAxkEtD;AAwkEE;AAAA;AACsD;;AAAhB;;AAAgB;AA5kExD;;AA4kEE;AAAA;AACkD;;AAAd;;AAAc;AAjgEpD;;AAigEE;AAAA;AACwE;;AAAzB;;AAAyB;AAr9D1E;;AAq9DE;AAAA;AACsE;;AAAxB;;AAAwB;AAx9DxE;;AAw9DE;AAAA;AACoF;;AAA/B;;AAA+B;AA39DtF;;AA29DE;AAAA;AACwC;;AAAT;;AAAS;AA3kE1C;;AA2kEE;AAAA;AACsD;;AAAf;;AAAe;AAngExD;;AAmgEE;AAAA;AAC4E;;AAA3B;;AAA2B;AA9+D9E;;AA8+DE;AAAA;AAC8D;;AAAd;;AAAc;AAAnC;AA9lE7B;AA8lEE;AAAA;AAC4D;;AAAb;;AAAa;AAAlC;AA5lE5B;;AA4lEE;AAAA;AACkE;;AAAhB;;AAAgB;AAArC;AA9+D/B;;AA8+DE;AAAA;AACkE;;AAAtB;;AAAsB;AAp+DpE;;AAo+DE;AAAA;AACkD;;AAAd;;AAAc;AA7+DpD;;AA6+DE;AAAA;AAC8D;;AAApB;;AAAoB;AAv/DhE;;AAu/DE;AAAA;AAj9DF;;AAm9D8B;;;;;;;;;;AAA5B;;;;;;;;;;AAsBF;;;AASgB;;AA7mEhB;AAAA;AAAA;AAAA;AA6mES;AAAP;AAtBc;;AAyBd;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;AAqBA;AAAA;;;;ACltEoC;;;ADktEpC;;AAOF;;;AAliEA;AAAA;;AAAA;AAAA;AAmiE4B;;AAAA;AAniE5B;;AAmiEE;AAAA;;AAQF;;;AA3iEA;AAAA;;AAAA;AAAA;AA4iES;;AAAA;AAAP;AA5iEF;AAAA;;AAAA;AAAA;AA6iE4B;;AAAA;AA7iE5B;;AA6iEE;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000 10000 1000000 1000000000000"
    },
    "18": {
      "op": "bytecblock \"base_token_id\" 0x151f7c75 \"admin_account\" \"total_deposits\" \"total_borrows\" \"contract_state\" \"loan_record\" \"accepted_collaterals\" \"circulating_lst\" \"active_loan_records\" \"lst_token_id\" \"borrow_index_wad\" \"migration_admin\" \"last_apr_bps\" \"cash_on_hand\" \"fee_pool\" 0x09ef525f 0xae859f3b \"buyout_token_id\" \"current_accumulated_commission\" \"accepted_collaterals_count\" \"max_apr_bps\" \"liq_threshold_bps\" \"base_bps\" \"liq_bonus_bps\" \"total_commission_earned\" \"total_additional_rewards\" 0x00 \"ltv_bps\" \"util_cap_bps\" \"prev_apr_bps\" \"last_accrual_ts\" \"commission_percentage\" \"flux_oracle_app\" 0x0000000000000000 \"rate_model_type\" \"kink_norm_bps\" \"slope1_bps\" \"slope2_bps\" \"origination_fee_bps\" \"protocol_share_bps\" \"oracle_app\" \"ema_alpha_bps\" \"power_gamma_q16\" \"scarcity_K_bps\" \"deposit_record\""
    },
    "694": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "696": {
      "op": "bz main_after_if_else@41",
      "stack_out": []
    },
    "699": {
      "op": "pushbytess 0x3b01665e 0xd2600ca9 0x6ca100cd 0x34b8343e 0xca7a1795 0x17c33662 0x5efce39a 0x5cac25a9 0xe596ac73 0x86a6b1bb 0xbae4c238 0x3e41a49b 0x15a5b25e 0xc0799344 0x8553cffa 0xb4a74766 0xae99f45b 0xbed00024 0xd217f842 0x0de801ad 0xd0e69812 0x5f0d6f03 // method \"createApplication(account,uint64)void\", method \"initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void\", method \"setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void\", method \"setContractState(uint64)void\", method \"setMigrationAdmin(account)void\", method \"generateLSTToken(pay)void\", method \"optInToLST(uint64,pay)void\", method \"configureLSTToken(axfer,uint64)void\", method \"getOraclePrice(uint64)uint64\", method \"addNewCollateralType(uint64,uint64,pay,uint64)void\", method \"depositAlgo(pay,uint64,pay)void\", method \"withdrawDeposit(axfer,uint64,uint64,pay)void\", method \"borrow(axfer,uint64,uint64,uint64,uint64,pay)void\", method \"addLoanRecordExternal(uint64,uint64,account,uint64)void\", method \"accrueLoanInterest(account,account)void\", method \"current_apr_bps()uint64\", method \"getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)\", method \"repayLoanAlgo(pay,uint64)void\", method \"withdrawPlatformFees(account,pay)void\", method \"buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void\", method \"maxWithdrawableCollateralLST(uint64)uint64\", method \"withdrawCollateral(uint64,uint64,uint64)void\"",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)"
      ]
    },
    "811": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "813": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "815": {
      "op": "pushbytess 0x6c6337c0 0x70d451f7 0xdaa7f7f2 0x3172ca9d 0xef0bd27a 0x71757509 0x0ac83b5d 0xd0b8a7de 0x4d658379 0x400e14fb 0x51ef3b21 // method \"getAcceptedCollateralsCount()uint64\", method \"liquidatePartialAlgo(account,pay,uint64,uint64)void\", method \"getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"gas()void\", method \"calculateCollateralValueUSD(uint64,uint64,uint64)uint64\", method \"pickupAlgoRewards()void\", method \"migrateCollateralTokenId(uint64,pay)void\", method \"migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)\", method \"acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void\", method \"goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void\", method \"goOffline()void\"",
      "defined_out": [
        "Method(acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(goOffline()void)",
        "Method(goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(liquidatePartialAlgo(account,pay,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(optInToLST(uint64,pay)void)",
        "Method(pickupAlgoRewards()void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(liquidatePartialAlgo(account,pay,uint64,uint64)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(pickupAlgoRewards()void)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "Method(goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void)",
        "Method(goOffline()void)"
      ]
    },
    "872": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(goOffline()void)",
        "Method(goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(liquidatePartialAlgo(account,pay,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(optInToLST(uint64,pay)void)",
        "Method(pickupAlgoRewards()void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(liquidatePartialAlgo(account,pay,uint64,uint64)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(pickupAlgoRewards()void)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "Method(goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void)",
        "Method(goOffline()void)",
        "tmp%2#0"
      ]
    },
    "875": {
      "op": "match main_createApplication_route@3 main_initApplication_route@4 main_setRateParams_route@5 main_setContractState_route@6 main_setMigrationAdmin_route@7 main_generateLSTToken_route@8 main_optInToLST_route@9 main_configureLSTToken_route@10 main_getOraclePrice_route@11 main_addNewCollateralType_route@12 main_depositAlgo_route@13 main_withdrawDeposit_route@14 main_borrow_route@15 main_addLoanRecordExternal_route@16 main_accrueLoanInterest_route@17 main_current_apr_bps_route@18 main_getLoanRecord_route@19 main_repayLoanAlgo_route@20 main_withdrawPlatformFees_route@21 main_buyoutSplitAlgo_route@22 main_maxWithdrawableCollateralLST_route@23 main_withdrawCollateral_route@24 main_getCirculatingLST_route@25 main_getTotalDeposits_route@26 main_getAcceptedCollateralsCount_route@27 main_liquidatePartialAlgo_route@28 main_getLoanStatus_route@29 main_gas_route@30 main_calculateCollateralValueUSD_route@31 main_pickupAlgoRewards_route@32 main_migrateCollateralTokenId_route@33 main_migrateContract_route@34 main_acceptMigrationAlgoContract_route@35 main_goOnline_route@36 main_goOffline_route@37",
      "stack_out": []
    },
    "947": {
      "block": "main_after_if_else@41",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "948": {
      "op": "return",
      "stack_out": []
    },
    "949": {
      "block": "main_goOffline_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%252#0"
      ],
      "stack_out": [
        "tmp%252#0"
      ]
    },
    "951": {
      "op": "!",
      "defined_out": [
        "tmp%253#0"
      ],
      "stack_out": [
        "tmp%253#0"
      ]
    },
    "952": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "953": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%254#0"
      ],
      "stack_out": [
        "tmp%254#0"
      ]
    },
    "955": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "956": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.goOffline",
      "op": "callsub goOffline"
    },
    "959": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "960": {
      "op": "return",
      "stack_out": []
    },
    "961": {
      "block": "main_goOnline_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%238#0"
      ],
      "stack_out": [
        "tmp%238#0"
      ]
    },
    "963": {
      "op": "!",
      "defined_out": [
        "tmp%239#0"
      ],
      "stack_out": [
        "tmp%239#0"
      ]
    },
    "964": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "965": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%240#0"
      ],
      "stack_out": [
        "tmp%240#0"
      ]
    },
    "967": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "968": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%242#0"
      ],
      "stack_out": [
        "tmp%242#0"
      ]
    },
    "970": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%242#0"
      ],
      "stack_out": [
        "tmp%242#0",
        "1"
      ]
    },
    "971": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%21#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0"
      ]
    },
    "972": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%21#0",
        "gtxn_idx%21#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "gtxn_idx%21#0 (copy)"
      ]
    },
    "973": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%21#0",
        "gtxn_type%21#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "gtxn_type%21#0"
      ]
    },
    "975": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%21#0",
        "gtxn_type%21#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "gtxn_type%21#0",
        "pay"
      ]
    },
    "976": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%21#0",
        "gtxn_type_matches%21#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "gtxn_type_matches%21#0"
      ]
    },
    "977": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%21#0"
      ]
    },
    "978": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%21#0",
        "tmp%243#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "tmp%243#0"
      ]
    },
    "981": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%21#0",
        "tmp%244#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "tmp%244#0"
      ]
    },
    "984": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%245#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%245#0"
      ]
    },
    "987": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0"
      ]
    },
    "990": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%247#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%247#0"
      ]
    },
    "993": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0"
      ]
    },
    "996": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%21#0",
        "reinterpret_bytes[8]%49#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0",
        "reinterpret_bytes[8]%49#0"
      ]
    },
    "999": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0",
        "tmp%249#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0",
        "tmp%249#0"
      ]
    },
    "1000": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%21#0",
        "reinterpret_bytes[8]%50#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0",
        "tmp%249#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0",
        "tmp%249#0",
        "reinterpret_bytes[8]%50#0"
      ]
    },
    "1003": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0",
        "tmp%249#0",
        "tmp%250#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0",
        "tmp%249#0",
        "tmp%250#0"
      ]
    },
    "1004": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "gtxn_idx%21#0",
        "reinterpret_bytes[8]%51#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0",
        "tmp%249#0",
        "tmp%250#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0",
        "tmp%249#0",
        "tmp%250#0",
        "reinterpret_bytes[8]%51#0"
      ]
    },
    "1007": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0",
        "tmp%249#0",
        "tmp%250#0",
        "tmp%251#0"
      ],
      "stack_out": [
        "gtxn_idx%21#0",
        "tmp%244#0",
        "tmp%246#0",
        "tmp%248#0",
        "tmp%249#0",
        "tmp%250#0",
        "tmp%251#0"
      ]
    },
    "1008": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.goOnline",
      "op": "callsub goOnline",
      "stack_out": []
    },
    "1011": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1012": {
      "op": "return",
      "stack_out": []
    },
    "1013": {
      "block": "main_acceptMigrationAlgoContract_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%230#0"
      ],
      "stack_out": [
        "tmp%230#0"
      ]
    },
    "1015": {
      "op": "!",
      "defined_out": [
        "tmp%231#0"
      ],
      "stack_out": [
        "tmp%231#0"
      ]
    },
    "1016": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1017": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%232#0"
      ],
      "stack_out": [
        "tmp%232#0"
      ]
    },
    "1019": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1020": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%234#0"
      ],
      "stack_out": [
        "tmp%234#0"
      ]
    },
    "1022": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%234#0"
      ],
      "stack_out": [
        "tmp%234#0",
        "2"
      ]
    },
    "1024": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%19#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0"
      ]
    },
    "1025": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%19#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%19#0 (copy)"
      ]
    },
    "1026": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_type%19#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_type%19#0"
      ]
    },
    "1028": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%19#0",
        "gtxn_type%19#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_type%19#0",
        "axfer"
      ]
    },
    "1030": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_type_matches%19#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_type_matches%19#0"
      ]
    },
    "1031": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%19#0"
      ]
    },
    "1032": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%19#0",
        "tmp%235#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "tmp%235#0"
      ]
    },
    "1034": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%19#0",
        "tmp%235#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "tmp%235#0",
        "1"
      ]
    },
    "1035": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0"
      ]
    },
    "1036": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%20#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%20#0 (copy)"
      ]
    },
    "1037": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0"
      ]
    },
    "1039": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "pay"
      ]
    },
    "1040": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type_matches%20#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type_matches%20#0"
      ]
    },
    "1041": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0"
      ]
    },
    "1042": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0"
      ]
    },
    "1045": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0",
        "reinterpret_bytes[1]%13#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0",
        "reinterpret_bytes[1]%13#0"
      ]
    },
    "1048": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%236#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%236#0"
      ]
    },
    "1049": {
      "op": "txnas Accounts",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%237#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%237#0"
      ]
    },
    "1051": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.acceptMigrationAlgoContract",
      "op": "callsub acceptMigrationAlgoContract",
      "stack_out": []
    },
    "1054": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1055": {
      "op": "return",
      "stack_out": []
    },
    "1056": {
      "block": "main_migrateContract_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%223#0"
      ],
      "stack_out": [
        "tmp%223#0"
      ]
    },
    "1058": {
      "op": "!",
      "defined_out": [
        "tmp%224#0"
      ],
      "stack_out": [
        "tmp%224#0"
      ]
    },
    "1059": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1060": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%225#0"
      ],
      "stack_out": [
        "tmp%225#0"
      ]
    },
    "1062": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1063": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%227#0"
      ],
      "stack_out": [
        "tmp%227#0"
      ]
    },
    "1065": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%227#0"
      ],
      "stack_out": [
        "tmp%227#0",
        "1"
      ]
    },
    "1066": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0"
      ]
    },
    "1067": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ]
    },
    "1068": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ]
    },
    "1070": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "pay"
      ]
    },
    "1071": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ]
    },
    "1072": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%18#0"
      ]
    },
    "1073": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.migrateContract",
      "op": "callsub migrateContract",
      "defined_out": [
        "tmp%228#0"
      ],
      "stack_out": [
        "tmp%228#0"
      ]
    },
    "1076": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%228#0"
      ],
      "stack_out": [
        "tmp%228#0",
        "0x151f7c75"
      ]
    },
    "1077": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%228#0"
      ]
    },
    "1078": {
      "op": "concat",
      "defined_out": [
        "tmp%229#0"
      ],
      "stack_out": [
        "tmp%229#0"
      ]
    },
    "1079": {
      "op": "log",
      "stack_out": []
    },
    "1080": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1081": {
      "op": "return",
      "stack_out": []
    },
    "1082": {
      "block": "main_migrateCollateralTokenId_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%217#0"
      ],
      "stack_out": [
        "tmp%217#0"
      ]
    },
    "1084": {
      "op": "!",
      "defined_out": [
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0"
      ]
    },
    "1085": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1086": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%219#0"
      ],
      "stack_out": [
        "tmp%219#0"
      ]
    },
    "1088": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1089": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%48#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%48#0"
      ]
    },
    "1092": {
      "op": "btoi",
      "defined_out": [
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0"
      ]
    },
    "1093": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%221#0",
        "tmp%222#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "tmp%222#0"
      ]
    },
    "1095": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%221#0",
        "tmp%222#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "tmp%222#0",
        "1"
      ]
    },
    "1096": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%17#0",
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "gtxn_idx%17#0"
      ]
    },
    "1097": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)",
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)"
      ]
    },
    "1098": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0"
      ]
    },
    "1100": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "pay",
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "pay"
      ]
    },
    "1101": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0",
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0"
      ]
    },
    "1102": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%221#0",
        "gtxn_idx%17#0"
      ]
    },
    "1103": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.migrateCollateralTokenId",
      "op": "callsub migrateCollateralTokenId",
      "stack_out": []
    },
    "1106": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1107": {
      "op": "return",
      "stack_out": []
    },
    "1108": {
      "block": "main_pickupAlgoRewards_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%213#0"
      ],
      "stack_out": [
        "tmp%213#0"
      ]
    },
    "1110": {
      "op": "!",
      "defined_out": [
        "tmp%214#0"
      ],
      "stack_out": [
        "tmp%214#0"
      ]
    },
    "1111": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1112": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%215#0"
      ],
      "stack_out": [
        "tmp%215#0"
      ]
    },
    "1114": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1115": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.pickupAlgoRewards",
      "op": "callsub pickupAlgoRewards"
    },
    "1118": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1119": {
      "op": "return",
      "stack_out": []
    },
    "1120": {
      "block": "main_calculateCollateralValueUSD_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%206#0"
      ],
      "stack_out": [
        "tmp%206#0"
      ]
    },
    "1122": {
      "op": "!",
      "defined_out": [
        "tmp%207#0"
      ],
      "stack_out": [
        "tmp%207#0"
      ]
    },
    "1123": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1124": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%208#0"
      ],
      "stack_out": [
        "tmp%208#0"
      ]
    },
    "1126": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1127": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0"
      ]
    },
    "1130": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "reinterpret_bytes[8]%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "reinterpret_bytes[8]%46#0"
      ]
    },
    "1133": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%210#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%210#0"
      ]
    },
    "1134": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "reinterpret_bytes[8]%47#0",
        "tmp%210#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%210#0",
        "reinterpret_bytes[8]%47#0"
      ]
    },
    "1137": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%210#0",
        "tmp%211#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%210#0",
        "tmp%211#0"
      ]
    },
    "1138": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "1141": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0"
      ]
    },
    "1142": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0",
        "0x151f7c75"
      ]
    },
    "1143": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ]
    },
    "1144": {
      "op": "concat",
      "defined_out": [
        "tmp%212#0"
      ],
      "stack_out": [
        "tmp%212#0"
      ]
    },
    "1145": {
      "op": "log",
      "stack_out": []
    },
    "1146": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1147": {
      "op": "return",
      "stack_out": []
    },
    "1148": {
      "block": "main_gas_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0"
      ]
    },
    "1150": {
      "op": "!",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "1151": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1152": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%204#0"
      ]
    },
    "1154": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1155": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1156": {
      "op": "return",
      "stack_out": []
    },
    "1157": {
      "block": "main_getLoanStatus_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "1159": {
      "op": "!",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "1160": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1161": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%197#0"
      ],
      "stack_out": [
        "tmp%197#0"
      ]
    },
    "1163": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1164": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%12#0"
      ]
    },
    "1167": {
      "op": "btoi",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "1168": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "1170": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "op": "callsub getLoanStatus",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "1173": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%0#0"
      ]
    },
    "1175": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0"
      ]
    },
    "1176": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "elements_to_encode%1#0"
      ]
    },
    "1178": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "1179": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%2#0"
      ]
    },
    "1181": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "1182": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%3#0"
      ]
    },
    "1184": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "1185": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "elements_to_encode%4#0"
      ]
    },
    "1187": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "1188": {
      "op": "bytec 27 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00"
      ]
    },
    "1190": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0"
      ]
    },
    "1191": {
      "op": "uncover 8",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "1193": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%6#0",
        "encoded_bool%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0"
      ]
    },
    "1194": {
      "op": "bytec 27 // 0x00",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "1196": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0"
      ]
    },
    "1197": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "elements_to_encode%6#0"
      ]
    },
    "1199": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "1200": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%6#0"
      ]
    },
    "1202": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "1204": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%10#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1205": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%8#0"
      ]
    },
    "1207": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%10#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1208": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%9#0"
      ]
    },
    "1210": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1211": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%10#0"
      ]
    },
    "1213": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1214": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_bool%0#0"
      ]
    },
    "1216": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1217": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0"
      ]
    },
    "1218": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "1219": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ]
    },
    "1220": {
      "op": "pushint 321 // 321"
    },
    "1223": {
      "op": "swap",
      "defined_out": [
        "321",
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "321",
        "is_true%0#0"
      ]
    },
    "1224": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1225": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "1226": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1227": {
      "op": "concat",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "1228": {
      "op": "log",
      "stack_out": []
    },
    "1229": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1230": {
      "op": "return",
      "stack_out": []
    },
    "1231": {
      "block": "main_liquidatePartialAlgo_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%186#0"
      ]
    },
    "1233": {
      "op": "!",
      "defined_out": [
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%187#0"
      ]
    },
    "1234": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1235": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "1237": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1238": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "1241": {
      "op": "btoi",
      "defined_out": [
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%190#0"
      ]
    },
    "1242": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0"
      ]
    },
    "1244": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%191#0",
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "tmp%192#0"
      ]
    },
    "1246": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%191#0",
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "tmp%192#0",
        "1"
      ]
    },
    "1247": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0"
      ]
    },
    "1248": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)"
      ]
    },
    "1249": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0"
      ]
    },
    "1251": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "pay",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "pay"
      ]
    },
    "1252": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0"
      ]
    },
    "1253": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0"
      ]
    },
    "1254": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%16#0",
        "reinterpret_bytes[8]%43#0",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "reinterpret_bytes[8]%43#0"
      ]
    },
    "1257": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%191#0",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "tmp%193#0"
      ]
    },
    "1258": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%16#0",
        "reinterpret_bytes[8]%44#0",
        "tmp%191#0",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "tmp%193#0",
        "reinterpret_bytes[8]%44#0"
      ]
    },
    "1261": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%191#0",
        "tmp%193#0",
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "tmp%193#0",
        "tmp%194#0"
      ]
    },
    "1262": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidatePartialAlgo",
      "op": "callsub liquidatePartialAlgo",
      "stack_out": []
    },
    "1265": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1266": {
      "op": "return",
      "stack_out": []
    },
    "1267": {
      "block": "main_getAcceptedCollateralsCount_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "1269": {
      "op": "!",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "1270": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1271": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%183#0"
      ]
    },
    "1273": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1274": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "op": "callsub getAcceptedCollateralsCount",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "1277": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "1278": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "1279": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "1280": {
      "op": "concat",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "1281": {
      "op": "log",
      "stack_out": []
    },
    "1282": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1283": {
      "op": "return",
      "stack_out": []
    },
    "1284": {
      "block": "main_getTotalDeposits_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%176#0"
      ]
    },
    "1286": {
      "op": "!",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "1287": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1288": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "1290": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1291": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "op": "callsub getTotalDeposits",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "1294": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "1295": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "1296": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "1297": {
      "op": "concat",
      "defined_out": [
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0"
      ]
    },
    "1298": {
      "op": "log",
      "stack_out": []
    },
    "1299": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1300": {
      "op": "return",
      "stack_out": []
    },
    "1301": {
      "block": "main_getCirculatingLST_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "1303": {
      "op": "!",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "1304": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1305": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "1307": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1308": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "op": "callsub getCirculatingLST",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "1311": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "1312": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "1313": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "1314": {
      "op": "concat",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1315": {
      "op": "log",
      "stack_out": []
    },
    "1316": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1317": {
      "op": "return",
      "stack_out": []
    },
    "1318": {
      "block": "main_withdrawCollateral_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "1320": {
      "op": "!",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "1321": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1322": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "1324": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1325": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%40#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%40#0"
      ]
    },
    "1328": {
      "op": "btoi",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "1329": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%41#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0",
        "reinterpret_bytes[8]%41#0"
      ]
    },
    "1332": {
      "op": "btoi",
      "defined_out": [
        "tmp%168#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%168#0",
        "tmp%169#0"
      ]
    },
    "1333": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%42#0",
        "tmp%168#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%168#0",
        "tmp%169#0",
        "reinterpret_bytes[8]%42#0"
      ]
    },
    "1336": {
      "op": "btoi",
      "defined_out": [
        "tmp%168#0",
        "tmp%169#0",
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%168#0",
        "tmp%169#0",
        "tmp%170#0"
      ]
    },
    "1337": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawCollateral",
      "op": "callsub withdrawCollateral",
      "stack_out": []
    },
    "1340": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1341": {
      "op": "return",
      "stack_out": []
    },
    "1342": {
      "block": "main_maxWithdrawableCollateralLST_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "1344": {
      "op": "!",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "1345": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1346": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "1348": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1349": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%39#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%39#0"
      ]
    },
    "1352": {
      "op": "btoi",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "1353": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLST",
      "op": "callsub maxWithdrawableCollateralLST",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1356": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "1357": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "1358": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "1359": {
      "op": "concat",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "1360": {
      "op": "log",
      "stack_out": []
    },
    "1361": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1362": {
      "op": "return",
      "stack_out": []
    },
    "1363": {
      "block": "main_buyoutSplitAlgo_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1365": {
      "op": "!",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "1366": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1367": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1369": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1370": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "1373": {
      "op": "btoi",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "1374": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "1376": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%10#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "1379": {
      "op": "btoi",
      "defined_out": [
        "tmp%151#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%152#0"
      ]
    },
    "1380": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0"
      ]
    },
    "1382": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%151#0",
        "tmp%153#0",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "tmp%154#0"
      ]
    },
    "1384": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%151#0",
        "tmp%153#0",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "tmp%154#0",
        "3"
      ]
    },
    "1386": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0"
      ]
    },
    "1387": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ]
    },
    "1388": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ]
    },
    "1390": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "axfer"
      ]
    },
    "1392": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ]
    },
    "1393": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0"
      ]
    },
    "1394": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%151#0",
        "tmp%153#0",
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "tmp%155#0"
      ]
    },
    "1396": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "gtxn_idx%13#0",
        "tmp%151#0",
        "tmp%153#0",
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "tmp%155#0",
        "2"
      ]
    },
    "1398": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0"
      ]
    },
    "1399": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ]
    },
    "1400": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ]
    },
    "1402": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay"
      ]
    },
    "1403": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ]
    },
    "1404": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0"
      ]
    },
    "1405": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%38#0",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%38#0"
      ]
    },
    "1408": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%151#0",
        "tmp%153#0",
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%156#0"
      ]
    },
    "1409": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%151#0",
        "tmp%153#0",
        "tmp%156#0",
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%156#0",
        "tmp%157#0"
      ]
    },
    "1411": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%151#0",
        "tmp%153#0",
        "tmp%156#0",
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%156#0",
        "tmp%157#0",
        "1"
      ]
    },
    "1412": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%15#0",
        "tmp%151#0",
        "tmp%153#0",
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%156#0",
        "gtxn_idx%15#0"
      ]
    },
    "1413": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)",
        "tmp%151#0",
        "tmp%153#0",
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%156#0",
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)"
      ]
    },
    "1414": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%151#0",
        "tmp%153#0",
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%156#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0"
      ]
    },
    "1416": {
      "op": "intc_1 // pay",
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%156#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "pay"
      ]
    },
    "1417": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0",
        "tmp%151#0",
        "tmp%153#0",
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%156#0",
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0"
      ]
    },
    "1418": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%151#0",
        "tmp%153#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%156#0",
        "gtxn_idx%15#0"
      ]
    },
    "1419": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitAlgo",
      "op": "callsub buyoutSplitAlgo",
      "stack_out": []
    },
    "1422": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1423": {
      "op": "return",
      "stack_out": []
    },
    "1424": {
      "block": "main_withdrawPlatformFees_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "1426": {
      "op": "!",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "1427": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1428": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "1430": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1431": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "1434": {
      "op": "btoi",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "1435": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "1437": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%144#0",
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "tmp%145#0"
      ]
    },
    "1439": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%144#0",
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "tmp%145#0",
        "1"
      ]
    },
    "1440": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%12#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "gtxn_idx%12#0"
      ]
    },
    "1441": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)"
      ]
    },
    "1442": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0"
      ]
    },
    "1444": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay"
      ]
    },
    "1445": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0"
      ]
    },
    "1446": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%144#0",
        "gtxn_idx%12#0"
      ]
    },
    "1447": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawPlatformFees",
      "op": "callsub withdrawPlatformFees",
      "stack_out": []
    },
    "1450": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1451": {
      "op": "return",
      "stack_out": []
    },
    "1452": {
      "block": "main_repayLoanAlgo_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "1454": {
      "op": "!",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "1455": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1456": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "1458": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1459": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "1461": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0",
        "1"
      ]
    },
    "1462": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1463": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ]
    },
    "1464": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ]
    },
    "1466": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0",
        "pay"
      ]
    },
    "1467": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ]
    },
    "1468": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1469": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%37#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%37#0"
      ]
    },
    "1472": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%138#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%138#0"
      ]
    },
    "1473": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "op": "callsub repayLoanAlgo",
      "stack_out": []
    },
    "1476": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1477": {
      "op": "return",
      "stack_out": []
    },
    "1478": {
      "block": "main_getLoanRecord_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1480": {
      "op": "!",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "1481": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1482": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "1484": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1485": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "1488": {
      "op": "btoi",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "1489": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "1491": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "1494": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0",
        "0x151f7c75"
      ]
    },
    "1495": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%131#0"
      ]
    },
    "1496": {
      "op": "concat",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "1497": {
      "op": "log",
      "stack_out": []
    },
    "1498": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1499": {
      "op": "return",
      "stack_out": []
    },
    "1500": {
      "block": "main_current_apr_bps_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "1502": {
      "op": "!",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "1503": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1504": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "1506": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1507": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1510": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "1511": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "1512": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "1513": {
      "op": "concat",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "1514": {
      "op": "log",
      "stack_out": []
    },
    "1515": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1516": {
      "op": "return",
      "stack_out": []
    },
    "1517": {
      "block": "main_accrueLoanInterest_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "1519": {
      "op": "!",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "1520": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1521": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "1523": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1524": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "1527": {
      "op": "btoi",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "1528": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "1530": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%6#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0",
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "1533": {
      "op": "btoi",
      "defined_out": [
        "tmp%117#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%117#0",
        "tmp%118#0"
      ]
    },
    "1534": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%117#0",
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%117#0",
        "tmp%119#0"
      ]
    },
    "1536": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "op": "callsub accrueLoanInterest",
      "stack_out": []
    },
    "1539": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1540": {
      "op": "return",
      "stack_out": []
    },
    "1541": {
      "block": "main_addLoanRecordExternal_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "1543": {
      "op": "!",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "1544": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1545": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "1547": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1548": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%34#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%34#0"
      ]
    },
    "1551": {
      "op": "btoi",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "1552": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%35#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0",
        "reinterpret_bytes[8]%35#0"
      ]
    },
    "1555": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%4#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0",
        "reinterpret_bytes[8]%35#0",
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "1558": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%35#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%108#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%109#0"
      ]
    },
    "1559": {
      "op": "txnas Accounts",
      "defined_out": [
        "reinterpret_bytes[8]%35#0",
        "tmp%108#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%108#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%110#0"
      ]
    },
    "1561": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%35#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%108#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%108#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%110#0",
        "reinterpret_bytes[8]%36#0"
      ]
    },
    "1564": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%35#0",
        "tmp%108#0",
        "tmp%110#0",
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%108#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%110#0",
        "tmp%111#0"
      ]
    },
    "1565": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addLoanRecordExternal",
      "op": "callsub addLoanRecordExternal",
      "stack_out": []
    },
    "1568": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1569": {
      "op": "return",
      "stack_out": []
    },
    "1570": {
      "block": "main_borrow_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1572": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "1573": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1574": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "1576": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1577": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "1579": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "2"
      ]
    },
    "1581": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1582": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ]
    },
    "1583": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ]
    },
    "1585": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0",
        "axfer"
      ]
    },
    "1587": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ]
    },
    "1588": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1589": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%30#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%30#0"
      ]
    },
    "1592": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%100#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0"
      ]
    },
    "1593": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%31#0",
        "tmp%100#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%31#0"
      ]
    },
    "1596": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0"
      ]
    },
    "1597": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%32#0",
        "tmp%100#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "reinterpret_bytes[8]%32#0"
      ]
    },
    "1600": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ]
    },
    "1601": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "reinterpret_bytes[8]%33#0"
      ]
    },
    "1604": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%103#0"
      ]
    },
    "1606": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%103#0",
        "1"
      ]
    },
    "1607": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%10#0"
      ]
    },
    "1608": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)",
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)"
      ]
    },
    "1609": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0"
      ]
    },
    "1611": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "pay",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0",
        "pay"
      ]
    },
    "1612": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type_matches%10#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%10#0",
        "gtxn_type_matches%10#0"
      ]
    },
    "1613": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%10#0"
      ]
    },
    "1614": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "op": "callsub borrow",
      "stack_out": []
    },
    "1617": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1618": {
      "op": "return",
      "stack_out": []
    },
    "1619": {
      "block": "main_withdrawDeposit_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "1621": {
      "op": "!",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "1622": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1623": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "1625": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1626": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "1628": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0",
        "2"
      ]
    },
    "1630": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1631": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ]
    },
    "1632": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ]
    },
    "1634": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "axfer"
      ]
    },
    "1636": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ]
    },
    "1637": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1638": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%28#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%28#0"
      ]
    },
    "1641": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0"
      ]
    },
    "1642": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "reinterpret_bytes[8]%29#0"
      ]
    },
    "1645": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0"
      ]
    },
    "1646": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0",
        "tmp%94#0"
      ]
    },
    "1648": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0",
        "tmp%94#0",
        "1"
      ]
    },
    "1649": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0",
        "gtxn_idx%8#0"
      ]
    },
    "1650": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)"
      ]
    },
    "1651": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0"
      ]
    },
    "1653": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay"
      ]
    },
    "1654": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0"
      ]
    },
    "1655": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0",
        "gtxn_idx%8#0"
      ]
    },
    "1656": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "op": "callsub withdrawDeposit",
      "stack_out": []
    },
    "1659": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1660": {
      "op": "return",
      "stack_out": []
    },
    "1661": {
      "block": "main_depositAlgo_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1663": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "1664": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1665": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "1667": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1668": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "1670": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "2"
      ]
    },
    "1672": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1673": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "1674": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "1676": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "pay"
      ]
    },
    "1677": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "1678": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1679": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%27#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%27#0"
      ]
    },
    "1682": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0"
      ]
    },
    "1683": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "tmp%86#0"
      ]
    },
    "1685": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%5#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "tmp%86#0",
        "1"
      ]
    },
    "1686": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0"
      ]
    },
    "1687": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)"
      ]
    },
    "1688": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0"
      ]
    },
    "1690": {
      "op": "intc_1 // pay",
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay"
      ]
    },
    "1691": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0"
      ]
    },
    "1692": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0"
      ]
    },
    "1693": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "op": "callsub depositAlgo",
      "stack_out": []
    },
    "1696": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1697": {
      "op": "return",
      "stack_out": []
    },
    "1698": {
      "block": "main_addNewCollateralType_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1700": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "1701": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1702": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "1704": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1705": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0"
      ]
    },
    "1708": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ]
    },
    "1711": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%79#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%79#0"
      ]
    },
    "1713": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%79#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%79#0",
        "1"
      ]
    },
    "1714": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0"
      ]
    },
    "1715": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "1716": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "1718": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "1719": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "1720": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0"
      ]
    },
    "1721": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%26#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%26#0"
      ]
    },
    "1724": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "op": "callsub addNewCollateralType",
      "stack_out": []
    },
    "1727": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1728": {
      "op": "return",
      "stack_out": []
    },
    "1729": {
      "block": "main_getOraclePrice_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1731": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1732": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1733": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1735": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1736": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0"
      ]
    },
    "1739": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1742": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1743": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1744": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1745": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1746": {
      "op": "log",
      "stack_out": []
    },
    "1747": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1748": {
      "op": "return",
      "stack_out": []
    },
    "1749": {
      "block": "main_configureLSTToken_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1751": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1752": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1753": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1755": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1756": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1758": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "1"
      ]
    },
    "1759": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1760": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "1761": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "1763": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "1765": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "1766": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1767": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "1770": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%69#0"
      ]
    },
    "1771": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "op": "callsub configureLSTToken",
      "stack_out": []
    },
    "1774": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1775": {
      "op": "return",
      "stack_out": []
    },
    "1776": {
      "block": "main_optInToLST_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1778": {
      "op": "!",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1779": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1780": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1782": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1783": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "1786": {
      "op": "btoi",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1787": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%62#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "tmp%63#0"
      ]
    },
    "1789": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%62#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "tmp%63#0",
        "1"
      ]
    },
    "1790": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "gtxn_idx%2#0"
      ]
    },
    "1791": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "1792": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "1794": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "1795": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "1796": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%62#0",
        "gtxn_idx%2#0"
      ]
    },
    "1797": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "op": "callsub optInToLST",
      "stack_out": []
    },
    "1800": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1801": {
      "op": "return",
      "stack_out": []
    },
    "1802": {
      "block": "main_generateLSTToken_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1804": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1805": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1806": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1808": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1809": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1811": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "1"
      ]
    },
    "1812": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1813": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "1814": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "1816": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "1817": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "1818": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1819": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "op": "callsub generateLSTToken",
      "stack_out": []
    },
    "1822": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1823": {
      "op": "return",
      "stack_out": []
    },
    "1824": {
      "block": "main_setMigrationAdmin_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1826": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1827": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1828": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1830": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1831": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "1834": {
      "op": "btoi",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1835": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "1837": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setMigrationAdmin",
      "op": "callsub setMigrationAdmin",
      "stack_out": []
    },
    "1840": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1841": {
      "op": "return",
      "stack_out": []
    },
    "1842": {
      "block": "main_setContractState_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1844": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1845": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1846": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1848": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1849": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "1852": {
      "op": "btoi",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1853": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setContractState",
      "op": "callsub setContractState",
      "stack_out": []
    },
    "1856": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1857": {
      "op": "return",
      "stack_out": []
    },
    "1858": {
      "block": "main_setRateParams_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1860": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1861": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1862": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1864": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1865": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1868": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1869": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1872": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1873": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "1876": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "1877": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "1880": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1881": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "1884": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "1885": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%13#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "1888": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1889": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "1892": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "1893": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%15#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "1896": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "1897": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "1900": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1901": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[8]%17#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "1904": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "1905": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "1908": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "1909": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_bytes[8]%19#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "1912": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "1913": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams",
      "op": "callsub setRateParams",
      "stack_out": []
    },
    "1916": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1917": {
      "op": "return",
      "stack_out": []
    },
    "1918": {
      "block": "main_initApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1920": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1921": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1922": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1924": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1925": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1927": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "1928": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1929": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "1930": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "1932": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1933": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1934": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1935": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1938": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ]
    },
    "1939": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1942": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1943": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1946": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1947": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1950": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1951": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1954": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1955": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[1]%1#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "1958": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1959": {
      "op": "txnas Applications",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1961": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1964": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "1965": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%7#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1968": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "1969": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[1]%2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "1972": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "1973": {
      "op": "txnas Applications",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "1975": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "op": "callsub initApplication",
      "stack_out": []
    },
    "1978": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1979": {
      "op": "return",
      "stack_out": []
    },
    "1980": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1982": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1983": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1984": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1986": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1987": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1988": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "1991": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1992": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1994": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1997": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1998": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "2001": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2002": {
      "op": "return",
      "stack_out": []
    },
    "2003": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "params": {
        "admin#0": "bytes",
        "baseTokenId#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2006": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "2007": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "2009": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2010": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseTokenId#0 (copy)"
      ]
    },
    "2012": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2013": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "2014": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2015": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2016": {
      "op": "bytec 12 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\""
      ],
      "stack_out": [
        "\"migration_admin\""
      ]
    },
    "2018": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"migration_admin\"",
        "admin#0 (copy)"
      ]
    },
    "2020": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2021": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\""
      ],
      "stack_out": [
        "\"contract_state\""
      ]
    },
    "2023": {
      "op": "bytec 34 // 0x0000000000000000",
      "defined_out": [
        "\"contract_state\"",
        "0x0000000000000000"
      ],
      "stack_out": [
        "\"contract_state\"",
        "0x0000000000000000"
      ]
    },
    "2025": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2026": {
      "op": "pushbytess \"contract_version\" 0x000000000000076c // \"contract_version\", 0x000000000000076c",
      "defined_out": [
        "\"contract_version\"",
        "0x000000000000076c"
      ],
      "stack_out": [
        "\"contract_version\"",
        "0x000000000000076c"
      ]
    },
    "2054": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2055": {
      "retsub": true,
      "op": "retsub"
    },
    "2056": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "params": {
        "mbrTxn#0": "uint64",
        "ltv_bps#0": "uint64",
        "liq_threshold_bps#0": "uint64",
        "liq_bonus_bps#0": "uint64",
        "origination_fee_bps#0": "uint64",
        "protocol_share_bps#0": "uint64",
        "oracle_app_id#0": "uint64",
        "buyout_token_id#0": "uint64",
        "additional_rewards_commission_percentage#0": "uint64",
        "flux_oracle_app_id#0": "uint64"
      },
      "block": "initApplication",
      "stack_in": [],
      "op": "proto 10 0"
    },
    "2059": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2061": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2062": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2063": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2064": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2065": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2066": {
      "op": "assert",
      "stack_out": []
    },
    "2067": {
      "op": "frame_dig -10",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2069": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2071": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2072": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2073": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2074": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2075": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2076": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "2079": {
      "op": "frame_dig -10",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2081": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2083": {
      "op": "pushint 400000 // 400000",
      "defined_out": [
        "400000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "400000"
      ]
    },
    "2087": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2088": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "2091": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2092": {
      "block": "initApplication_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2093": {
      "op": "frame_dig -2",
      "defined_out": [
        "additional_rewards_commission_percentage#0 (copy)"
      ],
      "stack_out": [
        "additional_rewards_commission_percentage#0 (copy)"
      ]
    },
    "2095": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "additional_rewards_commission_percentage#0 (copy)"
      ],
      "stack_out": [
        "additional_rewards_commission_percentage#0 (copy)",
        "100"
      ]
    },
    "2097": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2098": {
      "error": "COMMISSION_TOO_HIGH",
      "op": "assert // COMMISSION_TOO_HIGH",
      "stack_out": []
    },
    "2099": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\""
      ],
      "stack_out": [
        "\"ltv_bps\""
      ]
    },
    "2101": {
      "op": "frame_dig -9",
      "defined_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ]
    },
    "2103": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2104": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\""
      ],
      "stack_out": [
        "\"liq_threshold_bps\""
      ]
    },
    "2106": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ]
    },
    "2108": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2109": {
      "op": "bytec 39 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\""
      ],
      "stack_out": [
        "\"origination_fee_bps\""
      ]
    },
    "2111": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ],
      "stack_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ]
    },
    "2113": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2114": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\""
      ],
      "stack_out": [
        "\"accepted_collaterals_count\""
      ]
    },
    "2116": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ]
    },
    "2117": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2118": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\""
      ],
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "2120": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "2121": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2122": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "2124": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circulating_lst\"",
        "0"
      ]
    },
    "2125": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2126": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\""
      ],
      "stack_out": [
        "\"total_deposits\""
      ]
    },
    "2127": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_deposits\"",
        "0"
      ]
    },
    "2128": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2129": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\""
      ],
      "stack_out": [
        "\"active_loan_records\""
      ]
    },
    "2131": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"active_loan_records\"",
        "0"
      ]
    },
    "2132": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2133": {
      "op": "bytec 40 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\""
      ],
      "stack_out": [
        "\"protocol_share_bps\""
      ]
    },
    "2135": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ],
      "stack_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ]
    },
    "2137": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2138": {
      "op": "bytec 41 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\""
      ],
      "stack_out": [
        "\"oracle_app\""
      ]
    },
    "2140": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ],
      "stack_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ]
    },
    "2142": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2143": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\""
      ],
      "stack_out": [
        "\"lst_token_id\""
      ]
    },
    "2145": {
      "op": "pushbytes 0x0000000000000063",
      "defined_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ],
      "stack_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ]
    },
    "2155": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2156": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "2158": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "\"base_bps\"",
        "50"
      ],
      "stack_out": [
        "\"base_bps\"",
        "50"
      ]
    },
    "2160": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2161": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "2163": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"util_cap_bps\"",
        "8000"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "8000"
      ]
    },
    "2166": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2167": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\""
      ],
      "stack_out": [
        "\"total_borrows\""
      ]
    },
    "2169": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows\"",
        "0"
      ]
    },
    "2170": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2171": {
      "op": "bytec 35 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "2173": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rate_model_type\"",
        "0"
      ]
    },
    "2174": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2175": {
      "op": "bytec 36 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "2177": {
      "op": "pushint 5000 // 5000",
      "defined_out": [
        "\"kink_norm_bps\"",
        "5000"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "5000"
      ]
    },
    "2180": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2181": {
      "op": "bytec 37 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "2183": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "\"slope1_bps\"",
        "1000"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "1000"
      ]
    },
    "2184": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2185": {
      "op": "bytec 38 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "2187": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "\"slope2_bps\"",
        "2000"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "2000"
      ]
    },
    "2190": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2191": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "2193": {
      "op": "pushint 6000 // 6000",
      "defined_out": [
        "\"max_apr_bps\"",
        "6000"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "6000"
      ]
    },
    "2196": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2197": {
      "op": "bytec 42 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "2199": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"ema_alpha_bps\"",
        "0"
      ]
    },
    "2200": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2201": {
      "op": "bytec 30 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\""
      ],
      "stack_out": [
        "\"prev_apr_bps\""
      ]
    },
    "2203": {
      "op": "pushint 50 // 50",
      "stack_out": [
        "\"prev_apr_bps\"",
        "50"
      ]
    },
    "2205": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2206": {
      "op": "pushbytes \"util_ema_bps\"",
      "defined_out": [
        "\"util_ema_bps\""
      ],
      "stack_out": [
        "\"util_ema_bps\""
      ]
    },
    "2220": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"util_ema_bps\"",
        "0"
      ]
    },
    "2221": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2222": {
      "op": "bytec 43 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "2224": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"power_gamma_q16\"",
        "0"
      ]
    },
    "2225": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2226": {
      "op": "bytec 44 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "2228": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"scarcity_K_bps\"",
        "0"
      ]
    },
    "2229": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2230": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\""
      ],
      "stack_out": [
        "\"borrow_index_wad\""
      ]
    },
    "2232": {
      "op": "intc 5 // 1000000000000",
      "defined_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ],
      "stack_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ]
    },
    "2234": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2235": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\""
      ],
      "stack_out": [
        "\"last_accrual_ts\""
      ]
    },
    "2237": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"last_accrual_ts\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"last_accrual_ts\"",
        "new_state_value%0#0"
      ]
    },
    "2239": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2240": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2241": {
      "op": "bytec 23 // \"base_bps\"",
      "stack_out": [
        "0",
        "\"base_bps\""
      ]
    },
    "2243": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2244": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2245": {
      "op": "bytec 13 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "2247": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ]
    },
    "2248": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2249": {
      "op": "frame_dig -3",
      "defined_out": [
        "buyout_token_id#0 (copy)"
      ],
      "stack_out": [
        "buyout_token_id#0 (copy)"
      ]
    },
    "2251": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2252": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"buyout_token_id\""
      ]
    },
    "2254": {
      "op": "swap",
      "stack_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2255": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2256": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\""
      ],
      "stack_out": [
        "\"liq_bonus_bps\""
      ]
    },
    "2258": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ]
    },
    "2260": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2261": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\""
      ],
      "stack_out": [
        "\"total_commission_earned\""
      ]
    },
    "2263": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_commission_earned\"",
        "0"
      ]
    },
    "2264": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2265": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\""
      ],
      "stack_out": [
        "\"current_accumulated_commission\""
      ]
    },
    "2267": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"current_accumulated_commission\"",
        "0"
      ]
    },
    "2268": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2269": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\""
      ],
      "stack_out": [
        "\"commission_percentage\""
      ]
    },
    "2271": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"commission_percentage\"",
        "additional_rewards_commission_percentage#0 (copy)"
      ]
    },
    "2273": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2274": {
      "op": "bytec 14 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\""
      ],
      "stack_out": [
        "\"cash_on_hand\""
      ]
    },
    "2276": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"cash_on_hand\"",
        "0"
      ]
    },
    "2277": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2278": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\""
      ],
      "stack_out": [
        "\"total_additional_rewards\""
      ]
    },
    "2280": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_additional_rewards\"",
        "0"
      ]
    },
    "2281": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2282": {
      "op": "bytec 33 // \"flux_oracle_app\"",
      "defined_out": [
        "\"flux_oracle_app\""
      ],
      "stack_out": [
        "\"flux_oracle_app\""
      ]
    },
    "2284": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"flux_oracle_app\"",
        "flux_oracle_app_id#0 (copy)"
      ],
      "stack_out": [
        "\"flux_oracle_app\"",
        "flux_oracle_app_id#0 (copy)"
      ]
    },
    "2286": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2287": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2288": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2289": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2290": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2291": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2292": {
      "op": "bz initApplication_after_if_else@7",
      "stack_out": []
    },
    "2295": {
      "op": "itxn_begin"
    },
    "2296": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2298": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2299": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2300": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2301": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0"
      ]
    },
    "2302": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2303": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "2304": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2306": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2308": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2310": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2312": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2314": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "2315": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2317": {
      "op": "itxn_submit"
    },
    "2318": {
      "block": "initApplication_after_if_else@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2319": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"buyout_token_id\""
      ]
    },
    "2321": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2322": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "2323": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2324": {
      "op": "bz initApplication_after_if_else@10",
      "stack_out": []
    },
    "2327": {
      "op": "itxn_begin"
    },
    "2328": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2330": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2331": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "2333": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2334": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%6#0"
      ]
    },
    "2335": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "2336": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "2337": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "2339": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2341": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2343": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2345": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2347": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2348": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2350": {
      "op": "itxn_submit"
    },
    "2351": {
      "block": "initApplication_after_if_else@10",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2352": {
      "block": "initApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2353": {
      "op": "b initApplication_bool_merge@4"
    },
    "2356": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams",
      "params": {
        "base_bps#0": "uint64",
        "util_cap_bps#0": "uint64",
        "kink_norm_bps#0": "uint64",
        "slope1_bps#0": "uint64",
        "slope2_bps#0": "uint64",
        "max_apr_bps#0": "uint64",
        "max_apr_step_bps#0": "uint64",
        "ema_alpha_bps#0": "uint64",
        "power_gamma_q16#0": "uint64",
        "scarcity_K_bps#0": "uint64",
        "rate_model_type#0": "uint64",
        "liq_bonus_bps#0": "uint64"
      },
      "block": "setRateParams",
      "stack_in": [],
      "op": "proto 12 0"
    },
    "2359": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2361": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2362": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2363": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2364": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2365": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2366": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "2367": {
      "op": "frame_dig -11",
      "defined_out": [
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2369": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2372": {
      "op": "frame_dig -11",
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2374": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)",
        "10000"
      ]
    },
    "2375": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2376": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2379": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2380": {
      "block": "setRateParams_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "BAD_UTIL_CAP",
      "op": "assert // BAD_UTIL_CAP",
      "defined_out": [],
      "stack_out": []
    },
    "2381": {
      "op": "frame_dig -10",
      "defined_out": [
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2383": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2386": {
      "op": "frame_dig -10",
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2388": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)",
        "10000"
      ]
    },
    "2389": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2390": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2393": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2394": {
      "block": "setRateParams_bool_merge@8",
      "stack_in": [
        "and_result%1#0"
      ],
      "error": "BAD_KINK",
      "op": "assert // BAD_KINK",
      "defined_out": [],
      "stack_out": []
    },
    "2395": {
      "op": "frame_dig -7",
      "defined_out": [
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2397": {
      "op": "bz setRateParams_after_if_else@14",
      "stack_out": []
    },
    "2400": {
      "op": "frame_dig -7",
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2402": {
      "op": "frame_dig -12",
      "defined_out": [
        "base_bps#0 (copy)",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)",
        "base_bps#0 (copy)"
      ]
    },
    "2404": {
      "op": ">=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2405": {
      "error": "BAD_MAX_APR",
      "op": "assert // BAD_MAX_APR",
      "stack_out": []
    },
    "2406": {
      "block": "setRateParams_after_if_else@14",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2408": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)",
        "10000"
      ]
    },
    "2409": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2410": {
      "error": "BAD_EMA_ALPHA",
      "op": "assert // BAD_EMA_ALPHA",
      "stack_out": []
    },
    "2411": {
      "op": "frame_dig -2",
      "defined_out": [
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2413": {
      "op": "bz setRateParams_bool_true@16",
      "stack_out": []
    },
    "2416": {
      "op": "frame_dig -2",
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2418": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)",
        "255"
      ]
    },
    "2421": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "2422": {
      "op": "bz setRateParams_bool_false@17",
      "stack_out": []
    },
    "2425": {
      "block": "setRateParams_bool_true@16",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2426": {
      "block": "setRateParams_bool_merge@18",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "UNSUPPORTED_MODEL",
      "op": "assert // UNSUPPORTED_MODEL",
      "defined_out": [],
      "stack_out": []
    },
    "2427": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "2429": {
      "op": "frame_dig -12",
      "defined_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ],
      "stack_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ]
    },
    "2431": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2432": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "2434": {
      "op": "frame_dig -11",
      "defined_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ]
    },
    "2436": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2437": {
      "op": "bytec 36 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "2439": {
      "op": "frame_dig -10",
      "defined_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2441": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2442": {
      "op": "bytec 37 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "2444": {
      "op": "frame_dig -9",
      "defined_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ]
    },
    "2446": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2447": {
      "op": "bytec 38 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "2449": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ]
    },
    "2451": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2452": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "2454": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ]
    },
    "2456": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2457": {
      "op": "pushbytes \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\""
      ],
      "stack_out": [
        "\"max_apr_step_bps\""
      ]
    },
    "2475": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ]
    },
    "2477": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2478": {
      "op": "bytec 35 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "2480": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ]
    },
    "2482": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2483": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\""
      ],
      "stack_out": [
        "\"liq_bonus_bps\""
      ]
    },
    "2485": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ]
    },
    "2487": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2488": {
      "op": "bytec 42 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "2490": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2492": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2493": {
      "op": "bytec 43 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "2495": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ],
      "stack_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ]
    },
    "2497": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2498": {
      "op": "bytec 44 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "2500": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ],
      "stack_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ]
    },
    "2502": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2503": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2504": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2506": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2507": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2508": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2511": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2512": {
      "op": "bytec 30 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "2514": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2515": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2516": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "2517": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2519": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2520": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "2521": {
      "op": ">",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2522": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2525": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2526": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2528": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2529": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "2530": {
      "op": "bytec 30 // \"prev_apr_bps\"",
      "stack_out": [
        "maybe_value%4#0",
        "\"prev_apr_bps\""
      ]
    },
    "2532": {
      "op": "swap",
      "stack_out": [
        "\"prev_apr_bps\"",
        "maybe_value%4#0"
      ]
    },
    "2533": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2534": {
      "block": "setRateParams_after_if_else@21",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2535": {
      "block": "setRateParams_bool_false@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2536": {
      "op": "b setRateParams_bool_merge@18"
    },
    "2539": {
      "block": "setRateParams_bool_false@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2540": {
      "op": "b setRateParams_bool_merge@8"
    },
    "2543": {
      "block": "setRateParams_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2544": {
      "op": "b setRateParams_bool_merge@4"
    },
    "2547": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setContractState",
      "params": {
        "state#0": "uint64"
      },
      "block": "setContractState",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2550": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2552": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2553": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2554": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2555": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2556": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2557": {
      "op": "bnz setContractState_bool_true@2",
      "stack_out": []
    },
    "2560": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2562": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2563": {
      "op": "bytec 12 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "2565": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2566": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2567": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2568": {
      "op": "bz setContractState_bool_false@3",
      "stack_out": []
    },
    "2571": {
      "block": "setContractState_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2572": {
      "block": "setContractState_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "defined_out": [],
      "stack_out": []
    },
    "2573": {
      "op": "frame_dig -1",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)"
      ]
    },
    "2575": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)",
        "2"
      ]
    },
    "2577": {
      "op": "<=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2578": {
      "error": "INVALID_STATE",
      "op": "assert // INVALID_STATE",
      "stack_out": []
    },
    "2579": {
      "op": "frame_dig -1",
      "stack_out": [
        "state#0 (copy)"
      ]
    },
    "2581": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2582": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"contract_state\""
      ]
    },
    "2584": {
      "op": "swap",
      "stack_out": [
        "\"contract_state\"",
        "val_as_bytes%0#0"
      ]
    },
    "2585": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2586": {
      "retsub": true,
      "op": "retsub"
    },
    "2587": {
      "block": "setContractState_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2588": {
      "op": "b setContractState_bool_merge@4"
    },
    "2591": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setMigrationAdmin",
      "params": {
        "migrationAdmin#0": "bytes"
      },
      "block": "setMigrationAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2594": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2596": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2597": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2598": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2599": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2600": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2601": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "2602": {
      "op": "bytec 12 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\""
      ],
      "stack_out": [
        "\"migration_admin\""
      ]
    },
    "2604": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"migration_admin\"",
        "migrationAdmin#0 (copy)"
      ],
      "stack_out": [
        "\"migration_admin\"",
        "migrationAdmin#0 (copy)"
      ]
    },
    "2606": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2607": {
      "retsub": true,
      "op": "retsub"
    },
    "2608": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "params": {
        "mbrTxn#0": "uint64"
      },
      "block": "generateLSTToken",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2611": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2613": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2614": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2615": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2616": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2617": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2618": {
      "op": "assert",
      "stack_out": []
    },
    "2619": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2621": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2623": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2624": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2625": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2626": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2627": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2628": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2631": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2633": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2635": {
      "op": "pushint 102000 // 102000",
      "defined_out": [
        "102000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "102000"
      ]
    },
    "2639": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2640": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2643": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2644": {
      "block": "generateLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2645": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2646": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2647": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2648": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2649": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2650": {
      "op": "itxn_begin"
    },
    "2651": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2653": {
      "op": "dig 1",
      "defined_out": [
        "baseToken#0",
        "baseToken#0 (copy)",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2655": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "baseToken#0",
        "check%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2657": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2658": {
      "op": "dig 2",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2660": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "baseToken#0",
        "check%1#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2662": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2663": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2665": {
      "op": "dig 4",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2667": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "baseToken#0",
        "check%2#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "2669": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0"
      ]
    },
    "2670": {
      "op": "pushbytes \"c\"",
      "defined_out": [
        "\"c\"",
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "\"c\""
      ]
    },
    "2673": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "\"c\"",
        "value%2#0"
      ]
    },
    "2674": {
      "op": "concat",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2675": {
      "op": "uncover 5",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "baseToken#0"
      ]
    },
    "2677": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%3#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "2679": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0"
      ]
    },
    "2680": {
      "op": "pushbytes \"c\"",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "\"c\""
      ]
    },
    "2683": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "\"c\"",
        "value%3#0"
      ]
    },
    "2684": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "2685": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2687": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2689": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2691": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "0"
      ]
    },
    "2692": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2694": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2696": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2698": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "2700": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "2702": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2704": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2705": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2707": {
      "op": "itxn_submit"
    },
    "2708": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "result.CreatedAssetID#0"
      ],
      "stack_out": [
        "result.CreatedAssetID#0"
      ]
    },
    "2710": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2711": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2713": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2714": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2715": {
      "retsub": true,
      "op": "retsub"
    },
    "2716": {
      "block": "generateLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2717": {
      "op": "b generateLSTToken_bool_merge@4"
    },
    "2720": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "params": {
        "lstAssetId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "optInToLST",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2723": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2725": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2726": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2727": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2728": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2729": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2730": {
      "op": "assert",
      "stack_out": []
    },
    "2731": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2733": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2735": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2736": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2737": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2738": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2739": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2740": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2743": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2745": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2747": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "2000"
      ]
    },
    "2750": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2751": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2754": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2755": {
      "block": "optInToLST_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2756": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAssetId#0 (copy)"
      ],
      "stack_out": [
        "lstAssetId#0 (copy)"
      ]
    },
    "2758": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2759": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2761": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2762": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2763": {
      "op": "itxn_begin"
    },
    "2764": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2766": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2767": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2769": {
      "op": "frame_dig -2",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "lstAssetId#0 (copy)"
      ]
    },
    "2771": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2773": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2775": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2777": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2779": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2780": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2782": {
      "op": "itxn_submit"
    },
    "2783": {
      "retsub": true,
      "op": "retsub"
    },
    "2784": {
      "block": "optInToLST_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2785": {
      "op": "b optInToLST_bool_merge@4"
    },
    "2788": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "params": {
        "axferTxn#0": "uint64",
        "circulating_lst#0": "uint64"
      },
      "block": "configureLSTToken",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2791": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2793": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2794": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2795": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2796": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2797": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2798": {
      "op": "assert",
      "stack_out": []
    },
    "2799": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2800": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "2802": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2803": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2804": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2805": {
      "op": "frame_dig -2",
      "defined_out": [
        "axferTxn#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "axferTxn#0 (copy)"
      ]
    },
    "2807": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2809": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2810": {
      "error": "LST token not set",
      "op": "assert // LST token not set",
      "stack_out": []
    },
    "2811": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2813": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2815": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "2816": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2817": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2818": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "2819": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2820": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2823": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2825": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2827": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2829": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2830": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2833": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2834": {
      "block": "configureLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2835": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "2837": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ],
      "stack_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ]
    },
    "2839": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2840": {
      "retsub": true,
      "op": "retsub"
    },
    "2841": {
      "block": "configureLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2842": {
      "op": "b configureLSTToken_bool_merge@4"
    },
    "2845": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "params": {
        "tokenId#0": "bytes"
      },
      "block": "getOraclePrice",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2848": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2849": {
      "op": "bytec 41 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_app\""
      ]
    },
    "2851": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "maybe_exists%0#0"
      ]
    },
    "2852": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2853": {
      "op": "dup",
      "defined_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "2854": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "address#0",
        "check%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "check%0#0"
      ]
    },
    "2856": {
      "op": "bury 1",
      "stack_out": [
        "oracle#0",
        "check%0#0"
      ]
    },
    "2858": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2859": {
      "op": "itxn_begin"
    },
    "2860": {
      "op": "pushbytes 0xac13e004 // method \"getTokenPrice(uint64)(uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))"
      ]
    },
    "2866": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2868": {
      "op": "frame_dig -1",
      "defined_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ]
    },
    "2870": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2872": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2874": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2876": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2878": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2879": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2881": {
      "op": "itxn_submit"
    },
    "2882": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2884": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2885": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2888": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2889": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2890": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2891": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "12"
      ]
    },
    "2893": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2894": {
      "retsub": true,
      "op": "retsub"
    },
    "2895": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "updateCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2898": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "2900": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2902": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2903": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2904": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2905": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0"
      ]
    },
    "2906": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2907": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "2909": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2910": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2912": {
      "op": "+",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "2913": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "2915": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0"
      ]
    },
    "2918": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "collateral#0 (copy)"
      ]
    },
    "2920": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2923": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0",
        "collateral#0 (copy)"
      ]
    },
    "2925": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2928": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "newTotal#0"
      ]
    },
    "2930": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2931": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "collateral#0"
      ]
    },
    "2933": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0"
      ]
    },
    "2936": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "tmp%3#0"
      ]
    },
    "2938": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2940": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2941": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%4#0",
        "tmp%5#0"
      ]
    },
    "2943": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2944": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2946": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2947": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%6#0"
      ]
    },
    "2948": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2949": {
      "op": "box_put",
      "stack_out": []
    },
    "2950": {
      "retsub": true,
      "op": "retsub"
    },
    "2951": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "reduceCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2954": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "2956": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2958": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2959": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2960": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2961": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0"
      ]
    },
    "2962": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2963": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "2965": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2966": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2967": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2969": {
      "op": ">=",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2970": {
      "error": "INSUFFICIENT_COLLATERAL",
      "op": "assert // INSUFFICIENT_COLLATERAL",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2971": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2973": {
      "op": "-",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "2974": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "2976": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0"
      ]
    },
    "2979": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "collateral#0 (copy)"
      ]
    },
    "2981": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2984": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0",
        "collateral#0 (copy)"
      ]
    },
    "2986": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2989": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "newTotal#0"
      ]
    },
    "2991": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ]
    },
    "2992": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "collateral#0"
      ]
    },
    "2994": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0"
      ]
    },
    "2997": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "tmp%6#0"
      ]
    },
    "2999": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "3001": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3002": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0",
        "tmp%8#0"
      ]
    },
    "3004": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3005": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "3007": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3008": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0"
      ]
    },
    "3009": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3010": {
      "op": "box_put",
      "stack_out": []
    },
    "3011": {
      "retsub": true,
      "op": "retsub"
    },
    "3012": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralBaseTokenId#0": "bytes",
        "mbrTxn#0": "uint64",
        "originatingAppId#0": "bytes"
      },
      "block": "addNewCollateralType",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3015": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3016": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "3017": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3018": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3019": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3020": {
      "op": "txn Sender",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "3022": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0"
      ]
    },
    "3023": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "3024": {
      "op": "app_global_get_ex",
      "defined_out": [
        "baseToken#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3025": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3026": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%1#0"
      ]
    },
    "3027": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3028": {
      "op": "frame_dig -4",
      "defined_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3030": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "3031": {
      "op": "dup"
    },
    "3032": {
      "op": "uncover 2",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0",
        "baseToken#0"
      ]
    },
    "3034": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3035": {
      "error": "CANNOT_USE_BASE_AS_COLLATERAL",
      "op": "assert // CANNOT_USE_BASE_AS_COLLATERAL",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3036": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\""
      ]
    },
    "3038": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3040": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3041": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3042": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3043": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3045": {
      "op": "!",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%5#0"
      ]
    },
    "3046": {
      "error": "COLLATERAL_ALREADY_EXISTS",
      "op": "assert // COLLATERAL_ALREADY_EXISTS",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3047": {
      "op": "frame_dig -2",
      "defined_out": [
        "mbrTxn#0 (copy)",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "3049": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "3051": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0"
      ]
    },
    "3052": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0",
        "\"admin_account\""
      ]
    },
    "3053": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3054": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "3055": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%7#0"
      ]
    },
    "3056": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3059": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "3061": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0"
      ]
    },
    "3063": {
      "op": "pushint 101000 // 101000",
      "defined_out": [
        "101000",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0",
        "101000"
      ]
    },
    "3067": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%9#0"
      ]
    },
    "3068": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3071": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "3072": {
      "block": "addNewCollateralType_bool_merge@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ],
      "error": "INSUFFICIENT_MBR",
      "op": "assert // INSUFFICIENT_MBR",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3073": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0"
      ]
    },
    "3074": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0",
        "\"base_token_id\""
      ]
    },
    "3075": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3076": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0"
      ]
    },
    "3077": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3079": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralBaseTokenId#0 (copy)",
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)",
        "collateralBaseTokenId#0 (copy)"
      ]
    },
    "3081": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3082": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0"
      ]
    },
    "3083": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3084": {
      "op": "bytec 34 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "3086": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3087": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "originatingAppId#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%4#0",
        "originatingAppId#0 (copy)"
      ]
    },
    "3089": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0"
      ]
    },
    "3090": {
      "op": "frame_dig 1",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ]
    },
    "3092": {
      "op": "dup"
    },
    "3093": {
      "op": "uncover 2",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "newAcceptedCollateral#0"
      ]
    },
    "3095": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3096": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0"
      ]
    },
    "3097": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "3099": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3100": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0"
      ]
    },
    "3101": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "1"
      ]
    },
    "3102": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0"
      ]
    },
    "3103": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "3105": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "\"accepted_collaterals_count\"",
        "new_state_value%0#0"
      ]
    },
    "3106": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3107": {
      "op": "itxn_begin"
    },
    "3108": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "3110": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3111": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3112": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3114": {
      "op": "frame_dig 0",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%2#0"
      ]
    },
    "3116": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3118": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "3120": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3122": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "4"
      ]
    },
    "3124": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3126": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "1000"
      ]
    },
    "3127": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3129": {
      "op": "itxn_submit"
    },
    "3130": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3131": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3133": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3134": {
      "retsub": true,
      "op": "retsub"
    },
    "3135": {
      "block": "addNewCollateralType_bool_false@3",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "3136": {
      "op": "b addNewCollateralType_bool_merge@4"
    },
    "3139": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "params": {
        "depositTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3142": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3143": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "3144": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3145": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3147": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": []
    },
    "3148": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3149": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contract_state\""
      ]
    },
    "3151": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3152": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3153": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3154": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "3155": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3156": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": []
    },
    "3157": {
      "op": "frame_dig -3",
      "defined_out": [
        "depositTxn#0 (copy)"
      ],
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "3159": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3161": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3163": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3164": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "3167": {
      "op": "frame_dig -3",
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "3169": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "3171": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "3173": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "3174": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "3177": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "3178": {
      "block": "depositAlgo_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "3179": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "3181": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "3183": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "10000"
      ]
    },
    "3184": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3185": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "3186": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "3188": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": []
    },
    "3191": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "_interestSlice#0"
      ]
    },
    "3194": {
      "op": "pop",
      "stack_out": []
    },
    "3195": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3196": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "3197": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3198": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "3199": {
      "op": "bnz depositAlgo_else_body@6",
      "stack_out": []
    },
    "3202": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3204": {
      "block": "depositAlgo_after_if_else@7",
      "stack_in": [
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "3205": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3207": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3208": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "3210": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3211": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "3212": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3213": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "3215": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3217": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3219": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3221": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "4"
      ]
    },
    "3223": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3225": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "1000"
      ]
    },
    "3226": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3228": {
      "op": "itxn_submit"
    },
    "3229": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstDue#2",
        "0"
      ]
    },
    "3230": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3232": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "lstDue#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3233": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "maybe_value%4#0"
      ]
    },
    "3234": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3235": {
      "op": "bytec 8 // \"circulating_lst\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3237": {
      "op": "swap",
      "stack_out": [
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3238": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3239": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3240": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "3241": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3242": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "3243": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "3245": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "3246": {
      "op": "bytec_3 // \"total_deposits\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3247": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3248": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3249": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "3252": {
      "op": "bytec 13 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3254": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3255": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3256": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3257": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "3258": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3259": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "3260": {
      "op": "btoi",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3261": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3262": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%10#0"
      ]
    },
    "3264": {
      "op": "swap",
      "stack_out": [
        "tmp%10#0",
        "val_as_bytes%0#0"
      ]
    },
    "3265": {
      "op": "concat",
      "defined_out": [
        "depositKey#0"
      ],
      "stack_out": [
        "depositKey#0"
      ]
    },
    "3266": {
      "op": "bytec 45 // \"deposit_record\"",
      "defined_out": [
        "\"deposit_record\"",
        "depositKey#0"
      ],
      "stack_out": [
        "depositKey#0",
        "\"deposit_record\""
      ]
    },
    "3268": {
      "op": "swap",
      "stack_out": [
        "\"deposit_record\"",
        "depositKey#0"
      ]
    },
    "3269": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "3270": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "3271": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3272": {
      "op": "bury 1",
      "stack_out": [
        "tmp%11#0",
        "maybe_exists%7#0"
      ]
    },
    "3274": {
      "op": "bz depositAlgo_else_body@10",
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "3277": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "3278": {
      "op": "box_get",
      "defined_out": [
        "existingRecord#0",
        "maybe_exists%8#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "existingRecord#0",
        "maybe_exists%8#0"
      ]
    },
    "3279": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%11#0",
        "existingRecord#0"
      ]
    },
    "3280": {
      "op": "dup",
      "defined_out": [
        "existingRecord#0",
        "existingRecord#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "existingRecord#0",
        "existingRecord#0 (copy)"
      ]
    },
    "3281": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%11#0",
        "existingRecord#0",
        "existingRecord#0 (copy)",
        "0"
      ]
    },
    "3282": {
      "op": "extract_uint64",
      "defined_out": [
        "existingRecord#0",
        "tmp%11#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "existingRecord#0",
        "tmp%14#0"
      ]
    },
    "3283": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%11#0",
        "existingRecord#0",
        "tmp%14#0",
        "amount#0 (copy)"
      ]
    },
    "3285": {
      "op": "+",
      "defined_out": [
        "existingRecord#0",
        "newAmount#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "existingRecord#0",
        "newAmount#0"
      ]
    },
    "3286": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "newAmount#0",
        "existingRecord#0"
      ]
    },
    "3287": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "newAmount#0",
        "tmp%11#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "newAmount#0",
        "tmp%15#0"
      ]
    },
    "3290": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "tmp%15#0",
        "newAmount#0"
      ]
    },
    "3291": {
      "op": "itob",
      "defined_out": [
        "tmp%11#0",
        "tmp%15#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%15#0",
        "val_as_bytes%1#0"
      ]
    },
    "3292": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "val_as_bytes%1#0",
        "tmp%15#0"
      ]
    },
    "3293": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3294": {
      "op": "box_put",
      "stack_out": []
    },
    "3295": {
      "retsub": true,
      "op": "retsub"
    },
    "3296": {
      "block": "depositAlgo_else_body@10",
      "stack_in": [
        "tmp%11#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0"
      ]
    },
    "3297": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3298": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "3299": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%11#0",
        "maybe_value%9#0"
      ]
    },
    "3300": {
      "op": "btoi",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "to_encode%1#0"
      ]
    },
    "3301": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "val_as_bytes%2#0"
      ]
    },
    "3302": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "val_as_bytes%2#0",
        "amount#0 (copy)"
      ]
    },
    "3304": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "3305": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "3306": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3307": {
      "op": "box_put",
      "stack_out": []
    },
    "3308": {
      "retsub": true,
      "op": "retsub"
    },
    "3309": {
      "block": "depositAlgo_else_body@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3310": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "3312": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3313": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "3314": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "10000"
      ]
    },
    "3315": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "3316": {
      "op": "intc_0 // 0",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "3317": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3318": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "3319": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#1"
      ]
    },
    "3320": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0"
      ]
    },
    "3321": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "3323": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "3324": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "3325": {
      "op": "divw",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3326": {
      "op": "b depositAlgo_after_if_else@7"
    },
    "3329": {
      "block": "depositAlgo_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "3330": {
      "op": "b depositAlgo_bool_merge@4"
    },
    "3333": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "lstAppId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "withdrawDeposit",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3336": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0"
      ]
    },
    "3337": {
      "op": "dup",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0"
      ]
    },
    "3338": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0"
      ]
    },
    "3340": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "0"
      ]
    },
    "3341": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "3343": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3344": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "maybe_value%0#0"
      ]
    },
    "3345": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3346": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "0"
      ]
    },
    "3347": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0",
        "lstAsset#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "0",
        "\"contract_state\""
      ]
    },
    "3349": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstAsset#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3350": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_value%1#0"
      ]
    },
    "3351": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#0"
      ]
    },
    "3352": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#0",
        "1"
      ]
    },
    "3353": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%1#0"
      ]
    },
    "3354": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3355": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "lstAsset#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3357": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%2#0"
      ]
    },
    "3359": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3361": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%4#0"
      ]
    },
    "3362": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3365": {
      "op": "frame_dig -4",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3367": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%5#0"
      ]
    },
    "3369": {
      "op": "frame_dig 3",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%5#0",
        "lstAsset#0"
      ]
    },
    "3371": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%6#0"
      ]
    },
    "3372": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3375": {
      "op": "frame_dig -4",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3377": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "lstAsset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%7#0"
      ]
    },
    "3379": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "lstAsset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%7#0",
        "amount#0 (copy)"
      ]
    },
    "3381": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%8#0"
      ]
    },
    "3382": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3385": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "lstAsset#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3386": {
      "block": "withdrawDeposit_bool_merge@5",
      "stack_in": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3387": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3389": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%9#0"
      ]
    },
    "3391": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "3000",
        "tmp%9#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%9#0",
        "3000"
      ]
    },
    "3394": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%10#0"
      ]
    },
    "3395": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3396": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "_interestSlice#0"
      ]
    },
    "3399": {
      "op": "pop",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3400": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3402": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "lstAppId#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "lstAppId#0 (copy)",
        "tmp%11#0"
      ]
    },
    "3404": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%12#0"
      ]
    },
    "3405": {
      "op": "bz withdrawDeposit_else_body@7",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3408": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "0"
      ]
    },
    "3409": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3411": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ]
    },
    "3412": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3413": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0"
      ]
    },
    "3414": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3415": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%1#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "maybe_exists%1#0"
      ]
    },
    "3416": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3417": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3419": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3420": {
      "op": "uncover 2",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3422": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3423": {
      "block": "withdrawDeposit_after_if_else@8",
      "stack_in": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ],
      "op": "dup",
      "defined_out": [
        "asaDue#1",
        "asaDue#1 (copy)"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "asaDue#1 (copy)"
      ]
    },
    "3424": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3427": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asaDue#1",
        "tmp%13#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0"
      ]
    },
    "3429": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "asaDue#1",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "value%0#0",
        "check%0#0"
      ]
    },
    "3431": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "value%0#0"
      ]
    },
    "3432": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asaDue#1",
        "tmp%14#0",
        "value%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "value%0#0",
        "tmp%14#0"
      ]
    },
    "3434": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "asaDue#1",
        "check%1#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "3436": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "value%0#0",
        "value%1#0"
      ]
    },
    "3437": {
      "op": "-",
      "defined_out": [
        "asaDue#1",
        "tmp%15#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0"
      ]
    },
    "3438": {
      "op": "dig 1",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0",
        "asaDue#1 (copy)"
      ]
    },
    "3440": {
      "op": ">=",
      "defined_out": [
        "asaDue#1",
        "tmp%16#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%16#0"
      ]
    },
    "3441": {
      "op": "assert",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3442": {
      "op": "itxn_begin"
    },
    "3443": {
      "op": "txn Sender",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "3445": {
      "op": "dig 1",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "asaDue#1 (copy)"
      ]
    },
    "3447": {
      "op": "itxn_field Amount",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "3449": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3451": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "1"
      ]
    },
    "3452": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3454": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "1000"
      ]
    },
    "3455": {
      "op": "itxn_field Fee",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3457": {
      "op": "itxn_submit"
    },
    "3458": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3459": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3461": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3462": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%2#0"
      ]
    },
    "3463": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "asaDue#1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "3465": {
      "op": "-",
      "defined_out": [
        "asaDue#1",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0"
      ]
    },
    "3466": {
      "op": "bytec 8 // \"circulating_lst\"",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3468": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3469": {
      "op": "app_global_put",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3470": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3471": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"total_deposits\""
      ]
    },
    "3472": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3473": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0"
      ]
    },
    "3474": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_value%3#0",
        "asaDue#1"
      ]
    },
    "3475": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "new_state_value%1#0"
      ]
    },
    "3476": {
      "op": "bytec_3 // \"total_deposits\"",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3477": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3478": {
      "op": "app_global_put",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3479": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "new_state_value%2#0"
      ]
    },
    "3482": {
      "op": "bytec 13 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3484": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3485": {
      "op": "app_global_put",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3486": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "0"
      ]
    },
    "3487": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3488": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3489": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_value%4#0"
      ]
    },
    "3490": {
      "op": "btoi",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "to_encode%0#0"
      ]
    },
    "3491": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "val_as_bytes%0#0"
      ]
    },
    "3492": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%17#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "val_as_bytes%0#0",
        "tmp%17#0"
      ]
    },
    "3494": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%17#0",
        "val_as_bytes%0#0"
      ]
    },
    "3495": {
      "op": "concat",
      "defined_out": [
        "depositKey#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "depositKey#0"
      ]
    },
    "3496": {
      "op": "bytec 45 // \"deposit_record\"",
      "defined_out": [
        "\"deposit_record\"",
        "depositKey#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "depositKey#0",
        "\"deposit_record\""
      ]
    },
    "3498": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "\"deposit_record\"",
        "depositKey#0"
      ]
    },
    "3499": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%18#0"
      ]
    },
    "3500": {
      "op": "dup",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%18#0",
        "tmp%18#0"
      ]
    },
    "3501": {
      "op": "frame_bury 1",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%18#0"
      ]
    },
    "3503": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3504": {
      "op": "bury 1",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_exists%5#0"
      ]
    },
    "3506": {
      "op": "bz withdrawDeposit_after_if_else@14",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3509": {
      "op": "frame_dig 1",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%18#0"
      ]
    },
    "3511": {
      "op": "box_get",
      "defined_out": [
        "existingRecord#0",
        "maybe_exists%6#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "existingRecord#0",
        "maybe_exists%6#0"
      ]
    },
    "3512": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_exists%6#0",
        "existingRecord#0"
      ]
    },
    "3513": {
      "op": "dup",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_exists%6#0",
        "existingRecord#0",
        "existingRecord#0 (copy)"
      ]
    },
    "3514": {
      "op": "cover 2",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "existingRecord#0",
        "maybe_exists%6#0",
        "existingRecord#0"
      ]
    },
    "3516": {
      "op": "frame_bury 0",
      "defined_out": [
        "existingRecord#0",
        "maybe_exists%6#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "existingRecord#0",
        "maybe_exists%6#0"
      ]
    },
    "3518": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "existingRecord#0"
      ]
    },
    "3519": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "existingRecord#0",
        "0"
      ]
    },
    "3520": {
      "op": "extract_uint64",
      "defined_out": [
        "existingRecord#0",
        "tmp%18#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%21#0"
      ]
    },
    "3521": {
      "op": "frame_dig -3",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%21#0",
        "amount#0 (copy)"
      ]
    },
    "3523": {
      "op": "-",
      "defined_out": [
        "existingRecord#0",
        "newAmount#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "newAmount#0"
      ]
    },
    "3524": {
      "op": "dup",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "newAmount#0",
        "newAmount#0"
      ]
    },
    "3525": {
      "op": "frame_bury 2",
      "defined_out": [
        "existingRecord#0",
        "newAmount#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "newAmount#0"
      ]
    },
    "3527": {
      "op": "bnz withdrawDeposit_else_body@12",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3530": {
      "op": "frame_dig 1",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%18#0"
      ]
    },
    "3532": {
      "op": "box_del",
      "defined_out": [
        "existingRecord#0",
        "newAmount#0",
        "tmp%18#0",
        "{box_del}"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "{box_del}"
      ]
    },
    "3533": {
      "op": "pop",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3534": {
      "block": "withdrawDeposit_after_if_else@14",
      "stack_in": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "3535": {
      "block": "withdrawDeposit_else_body@12",
      "stack_in": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "existingRecord#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "existingRecord#0"
      ]
    },
    "3537": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "existingRecord#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%24#0"
      ]
    },
    "3540": {
      "op": "frame_dig 2",
      "defined_out": [
        "existingRecord#0",
        "newAmount#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%24#0",
        "newAmount#0"
      ]
    },
    "3542": {
      "op": "itob",
      "defined_out": [
        "existingRecord#0",
        "newAmount#0",
        "tmp%24#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%24#0",
        "val_as_bytes%1#0"
      ]
    },
    "3543": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "val_as_bytes%1#0",
        "tmp%24#0"
      ]
    },
    "3544": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "existingRecord#0",
        "newAmount#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3545": {
      "op": "frame_dig 1",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "existingRecord#0",
        "newAmount#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "encoded_tuple_buffer%5#0",
        "tmp%18#0"
      ]
    },
    "3547": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%18#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3548": {
      "op": "box_put",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3549": {
      "retsub": true,
      "op": "retsub"
    },
    "3550": {
      "block": "withdrawDeposit_else_body@7",
      "stack_in": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ],
      "op": "itxn_begin"
    },
    "3551": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "3553": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3555": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3557": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3559": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "appl"
      ]
    },
    "3561": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3563": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "1000"
      ]
    },
    "3564": {
      "op": "itxn_field Fee",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3566": {
      "op": "itxn_submit"
    },
    "3567": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "3569": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3570": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "awst_tmp%0#0",
        "tmp%0#1"
      ]
    },
    "3573": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "3574": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "3577": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "3578": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#1",
        "tmp%2#1"
      ]
    },
    "3579": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#1"
      ]
    },
    "3580": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3581": {
      "op": "itxn_begin"
    },
    "3582": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "3584": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3586": {
      "op": "frame_dig -2",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3588": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3590": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "3592": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3594": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "3595": {
      "op": "itxn_field Fee",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3597": {
      "op": "itxn_submit"
    },
    "3598": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "3600": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3601": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%4#1"
      ]
    },
    "3604": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "awst_tmp%1#0"
      ]
    },
    "3605": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "3608": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1",
        "0x151f7c75"
      ]
    },
    "3609": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ]
    },
    "3610": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ]
    },
    "3611": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3612": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3614": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3615": {
      "op": "uncover 2",
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3617": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3618": {
      "op": "b withdrawDeposit_after_if_else@8"
    },
    "3621": {
      "block": "withdrawDeposit_bool_false@4",
      "stack_in": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%18#0",
        "newAmount#0",
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3622": {
      "op": "b withdrawDeposit_bool_merge@5"
    },
    "3625": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "params": {
        "assetTransferTxn#0": "uint64",
        "requestedLoanAmount#0": "uint64",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64",
        "collateralTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "borrow",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "3628": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0"
      ]
    },
    "3629": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1"
      ]
    },
    "3631": {
      "op": "dupn 4",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ]
    },
    "3633": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "0"
      ]
    },
    "3634": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "0",
        "\"contract_state\""
      ]
    },
    "3636": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3637": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "maybe_value%0#0"
      ]
    },
    "3638": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "tmp%0#0"
      ]
    },
    "3639": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "tmp%0#0",
        "1"
      ]
    },
    "3640": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "tmp%1#0"
      ]
    },
    "3641": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ]
    },
    "3642": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "\"loan_record\""
      ]
    },
    "3644": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "\"loan_record\"",
        "tmp%2#0"
      ]
    },
    "3646": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "tmp%3#0"
      ]
    },
    "3647": {
      "op": "box_len",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "maybe_value%1#0",
        "hasLoan#0"
      ]
    },
    "3648": {
      "op": "dup",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "maybe_value%1#0",
        "hasLoan#0",
        "hasLoan#0 (copy)"
      ]
    },
    "3649": {
      "op": "uncover 2",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hasLoan#0",
        "maybe_value%1#0"
      ]
    },
    "3651": {
      "op": "pop",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3652": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hasLoan#0",
        "_interestSlice#0"
      ]
    },
    "3655": {
      "op": "pop",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3656": {
      "op": "bz borrow_else_body@2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3659": {
      "op": "txn Sender",
      "defined_out": [
        "hasLoan#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%4#0"
      ]
    },
    "3661": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "hasLoan#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%5#0"
      ]
    },
    "3664": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "hasLoan#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%5#0",
        "40"
      ]
    },
    "3666": {
      "op": "extract_uint64",
      "defined_out": [
        "hasLoan#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%6#0"
      ]
    },
    "3667": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "hasLoan#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%6#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3669": {
      "op": "+",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3670": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3672": {
      "block": "borrow_after_if_else@3",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3674": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%0#0"
      ]
    },
    "3676": {
      "op": "pushint 4000 // 4000",
      "defined_out": [
        "4000",
        "tmp%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%0#0",
        "4000"
      ]
    },
    "3679": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%1#0"
      ]
    },
    "3680": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3681": {
      "op": "frame_dig -6",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3683": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "3685": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%2#0",
        "tmp%3#3"
      ]
    },
    "3687": {
      "op": "==",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%4#1"
      ]
    },
    "3688": {
      "op": "bz borrow_bool_false@34",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3691": {
      "op": "frame_dig -6",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3693": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%5#1"
      ]
    },
    "3695": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "tmp%5#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%5#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3697": {
      "op": "==",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%6#1"
      ]
    },
    "3698": {
      "op": "bz borrow_bool_false@34",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3701": {
      "op": "frame_dig -6",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3703": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%7#0"
      ]
    },
    "3705": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%7#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3707": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%7#0",
        "tmp%8#1"
      ]
    },
    "3708": {
      "op": "==",
      "defined_out": [
        "tmp%9#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%9#1"
      ]
    },
    "3709": {
      "op": "bz borrow_bool_false@34",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3712": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3713": {
      "block": "borrow_bool_merge@35",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3714": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "\"accepted_collaterals\""
      ]
    },
    "3716": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3718": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "3719": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3720": {
      "op": "bury 1",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_exists%0#0"
      ]
    },
    "3722": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3723": {
      "op": "frame_dig -2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3725": {
      "op": "frame_dig 1",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1"
      ]
    },
    "3727": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)",
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1",
        "lstApp#0 (copy)"
      ]
    },
    "3729": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralUSD#0"
      ]
    },
    "3732": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralUSD#0",
        "0"
      ]
    },
    "3733": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralUSD#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "3735": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3736": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%2#0"
      ]
    },
    "3737": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%7#0"
      ]
    },
    "3738": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralToUse#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%7#0",
        "10000"
      ]
    },
    "3739": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3740": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0"
      ]
    },
    "3741": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3742": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3743": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%3#0"
      ]
    },
    "3744": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "3747": {
      "op": "frame_dig -5",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3749": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ]
    },
    "3750": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0",
        "1000000"
      ]
    },
    "3752": {
      "op": "divw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3753": {
      "op": ">=",
      "defined_out": [
        "collateralToUse#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%0#2"
      ]
    },
    "3754": {
      "error": "exceeds LTV limit",
      "op": "assert // exceeds LTV limit",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3755": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3756": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3757": {
      "op": "app_global_get_ex",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3758": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#2"
      ]
    },
    "3759": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#2",
        "0"
      ]
    },
    "3760": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "collateralToUse#1",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#2",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "3762": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maybe_exists%1#1",
        "maybe_value%0#2",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#2",
        "maybe_value%1#0",
        "maybe_exists%1#1"
      ]
    },
    "3763": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#2",
        "maybe_value%1#0"
      ]
    },
    "3764": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "h#0",
        "l#0"
      ]
    },
    "3765": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "h#0",
        "l#0",
        "10000"
      ]
    },
    "3766": {
      "op": "divw",
      "defined_out": [
        "capBorrow#0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0"
      ]
    },
    "3767": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0",
        "0"
      ]
    },
    "3768": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "capBorrow#0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3770": {
      "op": "app_global_get_ex",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3771": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#2"
      ]
    },
    "3772": {
      "op": "frame_dig -5",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#2",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3774": {
      "op": "+",
      "defined_out": [
        "capBorrow#0",
        "collateralToUse#1",
        "tmp%1#4"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0",
        "tmp%1#4"
      ]
    },
    "3775": {
      "op": ">=",
      "defined_out": [
        "collateralToUse#1",
        "tmp%2#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%2#2"
      ]
    },
    "3776": {
      "error": "UTIL_CAP_EXCEEDED",
      "op": "assert // UTIL_CAP_EXCEEDED",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3777": {
      "op": "bytec 34 // 0x0000000000000000",
      "defined_out": [
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#0"
      ]
    },
    "3779": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3781": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3782": {
      "op": "bytec 33 // \"flux_oracle_app\"",
      "defined_out": [
        "\"flux_oracle_app\"",
        "0",
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "0",
        "\"flux_oracle_app\""
      ]
    },
    "3784": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3785": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%4#0"
      ]
    },
    "3786": {
      "op": "bz borrow_after_if_else@6",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3789": {
      "op": "itxn_begin"
    },
    "3790": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3791": {
      "op": "bytec 33 // \"flux_oracle_app\"",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "0",
        "\"flux_oracle_app\""
      ]
    },
    "3793": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3794": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0"
      ]
    },
    "3795": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "collateralToUse#1",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%5#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "3797": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "0"
      ]
    },
    "3798": {
      "op": "bytec 33 // \"flux_oracle_app\"",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "0",
        "\"flux_oracle_app\""
      ]
    },
    "3800": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_exists%6#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3801": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0"
      ]
    },
    "3802": {
      "op": "txn Sender",
      "defined_out": [
        "collateralToUse#1",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%9#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0",
        "tmp%9#0"
      ]
    },
    "3804": {
      "op": "dup",
      "defined_out": [
        "collateralToUse#1",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%10#0",
        "tmp%9#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "3805": {
      "op": "pushbytes 0xd4d7aa5c // method \"getUserTier(address)uint64\"",
      "defined_out": [
        "Method(getUserTier(address)uint64)",
        "collateralToUse#1",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%10#0",
        "tmp%9#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0",
        "tmp%9#0",
        "tmp%10#0",
        "Method(getUserTier(address)uint64)"
      ]
    },
    "3811": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "3813": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0",
        "tmp%9#0"
      ]
    },
    "3815": {
      "op": "itxn_field Accounts",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0"
      ]
    },
    "3817": {
      "op": "itxn_field Applications",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "3819": {
      "op": "itxn_field Sender",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0"
      ]
    },
    "3821": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3823": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "appl"
      ]
    },
    "3825": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3827": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "1000"
      ]
    },
    "3828": {
      "op": "itxn_field Fee",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3830": {
      "op": "itxn_submit"
    },
    "3831": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "awst_tmp%0#0"
      ]
    },
    "3833": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3834": {
      "op": "extract 4 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "awst_tmp%0#0",
        "userTier#0"
      ]
    },
    "3837": {
      "op": "frame_bury 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "awst_tmp%0#0"
      ]
    },
    "3839": {
      "op": "extract 0 4",
      "defined_out": [
        "collateralToUse#1",
        "tmp%12#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%12#0"
      ]
    },
    "3842": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "collateralToUse#1",
        "tmp%12#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "3843": {
      "op": "==",
      "defined_out": [
        "collateralToUse#1",
        "tmp%13#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%13#0"
      ]
    },
    "3844": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3845": {
      "block": "borrow_after_if_else@6",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#0"
      ]
    },
    "3847": {
      "op": "btoi",
      "defined_out": [
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3"
      ]
    },
    "3848": {
      "op": "dup",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "userTier#3"
      ]
    },
    "3849": {
      "op": "frame_bury 5",
      "defined_out": [
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3"
      ]
    },
    "3851": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "0"
      ]
    },
    "3852": {
      "op": "bytec 39 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\"",
        "0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "0",
        "\"origination_fee_bps\""
      ]
    },
    "3854": {
      "op": "app_global_get_ex",
      "defined_out": [
        "initialFee#0",
        "maybe_exists%0#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "initialFee#0",
        "maybe_exists%0#0"
      ]
    },
    "3855": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "maybe_exists%0#0",
        "initialFee#0"
      ]
    },
    "3856": {
      "op": "frame_bury 4",
      "defined_out": [
        "initialFee#0",
        "maybe_exists%0#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "maybe_exists%0#0"
      ]
    },
    "3858": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3"
      ]
    },
    "3859": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "initialFee#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "1"
      ]
    },
    "3860": {
      "op": "==",
      "defined_out": [
        "initialFee#0",
        "tmp%0#2",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%0#2"
      ]
    },
    "3861": {
      "op": "bz borrow_else_body@17",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3864": {
      "op": "frame_dig 4",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0"
      ]
    },
    "3866": {
      "op": "pushint 90 // 90",
      "defined_out": [
        "90",
        "initialFee#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0",
        "90"
      ]
    },
    "3868": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "initialFee#0",
        "lo#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3869": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "hi#0",
        "initialFee#0",
        "lo#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi#0",
        "lo#0",
        "100"
      ]
    },
    "3871": {
      "op": "divw",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "effectiveFeeBps#1"
      ]
    },
    "3872": {
      "op": "frame_bury 3",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3874": {
      "block": "borrow_after_if_else@26",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig -5",
      "defined_out": [
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3876": {
      "op": "frame_dig 3",
      "defined_out": [
        "effectiveFeeBps#1",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "requestedLoanAmount#0 (copy)",
        "effectiveFeeBps#1"
      ]
    },
    "3878": {
      "op": "mulw",
      "defined_out": [
        "effectiveFeeBps#1",
        "feeHi#0",
        "feeLo#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "feeHi#0",
        "feeLo#0"
      ]
    },
    "3879": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "effectiveFeeBps#1",
        "feeHi#0",
        "feeLo#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "feeHi#0",
        "feeLo#0",
        "10000"
      ]
    },
    "3880": {
      "op": "divw",
      "defined_out": [
        "effectiveFeeBps#1",
        "fee#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#0"
      ]
    },
    "3881": {
      "op": "frame_dig -5",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3883": {
      "op": "dig 1",
      "defined_out": [
        "effectiveFeeBps#1",
        "fee#0",
        "fee#0 (copy)",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#0",
        "requestedLoanAmount#0 (copy)",
        "fee#0 (copy)"
      ]
    },
    "3885": {
      "op": "-",
      "defined_out": [
        "disbursement#2",
        "effectiveFeeBps#1",
        "fee#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#0",
        "disbursement#2"
      ]
    },
    "3886": {
      "op": "frame_bury 2",
      "defined_out": [
        "disbursement#2",
        "effectiveFeeBps#1",
        "fee#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#0"
      ]
    },
    "3888": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "fee#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#0",
        "0"
      ]
    },
    "3889": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "fee#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "3891": {
      "op": "app_global_get_ex",
      "defined_out": [
        "disbursement#2",
        "effectiveFeeBps#1",
        "fee#0",
        "maybe_exists%0#0",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#0",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3892": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#0",
        "maybe_value%0#2"
      ]
    },
    "3893": {
      "op": "+",
      "defined_out": [
        "disbursement#2",
        "effectiveFeeBps#1",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "3894": {
      "op": "bytec 15 // \"fee_pool\"",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"fee_pool\""
      ]
    },
    "3896": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "\"fee_pool\"",
        "new_state_value%0#0"
      ]
    },
    "3897": {
      "op": "app_global_put",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3898": {
      "op": "frame_dig 6",
      "defined_out": [
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3900": {
      "op": "bz borrow_else_body@8",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3903": {
      "op": "txn Sender",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3905": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "borrower#0 (copy)"
      ]
    },
    "3906": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0"
      ]
    },
    "3909": {
      "op": "dig 1",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "borrower#0 (copy)"
      ]
    },
    "3911": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0"
      ]
    },
    "3914": {
      "op": "frame_dig 2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#2"
      ]
    },
    "3916": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "disbursement#2 (copy)",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#2 (copy)",
        "disbursement#2 (copy)"
      ]
    },
    "3917": {
      "op": "cover 3",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#2 (copy)"
      ]
    },
    "3919": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "newDebt#0"
      ]
    },
    "3920": {
      "op": "dig 1",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "newDebt#0",
        "existingLoan#0 (copy)"
      ]
    },
    "3922": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "newDebt#0",
        "tmp%0#1"
      ]
    },
    "3925": {
      "op": "uncover 2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "existingLoan#0"
      ]
    },
    "3927": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "existingLoan#0",
        "40"
      ]
    },
    "3929": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1"
      ]
    },
    "3930": {
      "op": "frame_dig -4",
      "defined_out": [
        "borrower#0",
        "collateralAmount#0 (copy)",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3932": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "to_encode%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "to_encode%0#0"
      ]
    },
    "3933": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ]
    },
    "3934": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3935": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3936": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3937": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0"
      ]
    },
    "3938": {
      "op": "uncover 4",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "disbursement#2"
      ]
    },
    "3940": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3941": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "to_encode%1#0"
      ]
    },
    "3943": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3944": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "3945": {
      "op": "bytec 27 // 0x00",
      "defined_out": [
        "0x00",
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "3947": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%2#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3948": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3949": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3950": {
      "op": "uncover 4",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "newDebt#0"
      ]
    },
    "3952": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "3953": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "3954": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "3956": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_exists%1#1",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#1"
      ]
    },
    "3957": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "maybe_value%1#0"
      ]
    },
    "3958": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "3959": {
      "op": "dig 6",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "borrower#0 (copy)"
      ]
    },
    "3961": {
      "op": "uncover 6",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "borrower#0 (copy)",
        "tmp%0#1"
      ]
    },
    "3963": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3964": {
      "op": "uncover 5",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3966": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3967": {
      "op": "uncover 3",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3969": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%8#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3970": {
      "op": "uncover 3",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0"
      ]
    },
    "3972": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%9#0",
        "hasLoan#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3973": {
      "op": "uncover 2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%3#0"
      ]
    },
    "3975": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%10#0",
        "hasLoan#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3976": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "3977": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3978": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "3980": {
      "op": "uncover 2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "3982": {
      "op": "concat",
      "defined_out": [
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "tmp%3#0"
      ]
    },
    "3983": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%3#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3984": {
      "op": "box_put",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3985": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3987": {
      "op": "frame_dig -4",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3989": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3992": {
      "block": "borrow_after_if_else@9",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "borrower#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3994": {
      "op": "itxn_begin"
    },
    "3995": {
      "op": "frame_dig 2",
      "defined_out": [
        "borrower#0",
        "disbursement#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2"
      ]
    },
    "3997": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "disbursement#2 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2 (copy)",
        "disbursement#2 (copy)"
      ]
    },
    "3998": {
      "op": "cover 2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "borrower#0",
        "disbursement#2 (copy)"
      ]
    },
    "4000": {
      "op": "itxn_field Amount",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "borrower#0"
      ]
    },
    "4002": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "4004": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "disbursement#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "1"
      ]
    },
    "4005": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "4007": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "disbursement#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "1000"
      ]
    },
    "4008": {
      "op": "itxn_field Fee",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "4010": {
      "op": "itxn_submit"
    },
    "4011": {
      "op": "dup",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "disbursement#2 (copy)"
      ]
    },
    "4012": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "4015": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "disbursement#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "0"
      ]
    },
    "4016": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "disbursement#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "0",
        "\"total_borrows\""
      ]
    },
    "4018": {
      "op": "app_global_get_ex",
      "defined_out": [
        "disbursement#2",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "4019": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "maybe_value%7#0"
      ]
    },
    "4020": {
      "op": "+",
      "defined_out": [
        "disbursement#2",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "4021": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4023": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4024": {
      "op": "app_global_put",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4025": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "disbursement#2",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "new_state_value%1#0"
      ]
    },
    "4028": {
      "op": "bytec 13 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "disbursement#2",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "4030": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "4031": {
      "op": "app_global_put",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4032": {
      "retsub": true,
      "op": "retsub"
    },
    "4033": {
      "block": "borrow_else_body@8",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%16#0"
      ]
    },
    "4035": {
      "op": "frame_dig 2",
      "defined_out": [
        "disbursement#2",
        "tmp%16#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%16#0",
        "disbursement#2"
      ]
    },
    "4037": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "disbursement#2",
        "tmp%16#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%16#0",
        "disbursement#2",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4039": {
      "op": "uncover 2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "collateralTokenId#0 (copy)",
        "tmp%16#0"
      ]
    },
    "4041": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#2",
        "tmp%16#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "collateralTokenId#0 (copy)",
        "tmp%16#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4043": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.mintLoanRecord",
      "op": "callsub mintLoanRecord",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4046": {
      "op": "frame_dig -2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4048": {
      "op": "frame_dig -4",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "4050": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4053": {
      "op": "b borrow_after_if_else@9"
    },
    "4056": {
      "block": "borrow_else_body@17",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3"
      ]
    },
    "4058": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "2"
      ]
    },
    "4060": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%1#0"
      ]
    },
    "4061": {
      "op": "bz borrow_else_body@19",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4064": {
      "op": "frame_dig 4",
      "defined_out": [
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0"
      ]
    },
    "4066": {
      "op": "pushint 75 // 75",
      "defined_out": [
        "75",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0",
        "75"
      ]
    },
    "4068": {
      "op": "mulw",
      "defined_out": [
        "hi\u2081#0",
        "initialFee#0",
        "lo\u2081#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi\u2081#0",
        "lo\u2081#0"
      ]
    },
    "4069": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "hi\u2081#0",
        "initialFee#0",
        "lo\u2081#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi\u2081#0",
        "lo\u2081#0",
        "100"
      ]
    },
    "4071": {
      "op": "divw",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "effectiveFeeBps#1"
      ]
    },
    "4072": {
      "op": "frame_bury 3",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4074": {
      "op": "b borrow_after_if_else@26"
    },
    "4077": {
      "block": "borrow_else_body@19",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3"
      ]
    },
    "4079": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "3"
      ]
    },
    "4081": {
      "op": "==",
      "defined_out": [
        "tmp%2#2",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%2#2"
      ]
    },
    "4082": {
      "op": "bz borrow_else_body@21",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4085": {
      "op": "frame_dig 4",
      "defined_out": [
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0"
      ]
    },
    "4087": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0",
        "50"
      ]
    },
    "4089": {
      "op": "mulw",
      "defined_out": [
        "hi\u2082#0",
        "initialFee#0",
        "lo\u2082#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi\u2082#0",
        "lo\u2082#0"
      ]
    },
    "4090": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "hi\u2082#0",
        "initialFee#0",
        "lo\u2082#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi\u2082#0",
        "lo\u2082#0",
        "100"
      ]
    },
    "4092": {
      "op": "divw",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "effectiveFeeBps#1"
      ]
    },
    "4093": {
      "op": "frame_bury 3",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4095": {
      "op": "b borrow_after_if_else@26"
    },
    "4098": {
      "block": "borrow_else_body@21",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3"
      ]
    },
    "4100": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "4"
      ]
    },
    "4102": {
      "op": ">=",
      "defined_out": [
        "tmp%3#2",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%3#2"
      ]
    },
    "4103": {
      "op": "frame_dig 4",
      "defined_out": [
        "effectiveFeeBps#1",
        "tmp%3#2",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%3#2",
        "effectiveFeeBps#1"
      ]
    },
    "4105": {
      "op": "frame_bury 3",
      "defined_out": [
        "effectiveFeeBps#1",
        "tmp%3#2",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%3#2"
      ]
    },
    "4107": {
      "op": "bz borrow_after_if_else@26",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4110": {
      "op": "frame_dig 4",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0"
      ]
    },
    "4112": {
      "op": "pushint 25 // 25",
      "defined_out": [
        "25",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0",
        "25"
      ]
    },
    "4114": {
      "op": "mulw",
      "defined_out": [
        "effectiveFeeBps#1",
        "hi\u2083#0",
        "initialFee#0",
        "lo\u2083#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi\u2083#0",
        "lo\u2083#0"
      ]
    },
    "4115": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "effectiveFeeBps#1",
        "hi\u2083#0",
        "initialFee#0",
        "lo\u2083#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi\u2083#0",
        "lo\u2083#0",
        "100"
      ]
    },
    "4117": {
      "op": "divw",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "effectiveFeeBps#1"
      ]
    },
    "4118": {
      "op": "frame_bury 3",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4120": {
      "op": "b borrow_after_if_else@26"
    },
    "4123": {
      "block": "borrow_bool_false@34",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "4124": {
      "op": "b borrow_bool_merge@35"
    },
    "4127": {
      "block": "borrow_else_body@2",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "4129": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4131": {
      "op": "b borrow_after_if_else@3"
    },
    "4134": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.mintLoanRecord",
      "params": {
        "disbursement#0": "uint64",
        "collateralTokenId#0": "bytes",
        "borrowerAddress#0": "bytes",
        "collateralAmount#0": "uint64"
      },
      "block": "mintLoanRecord",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "4137": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralAmount#0 (copy)"
      ]
    },
    "4139": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "4140": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "4141": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4142": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4143": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0"
      ]
    },
    "4144": {
      "op": "frame_dig -4",
      "defined_out": [
        "disbursement#0 (copy)",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "disbursement#0 (copy)"
      ]
    },
    "4146": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4147": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%0#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "to_encode%0#0"
      ]
    },
    "4149": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "4150": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "4152": {
      "op": "bytec 27 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)",
        "0x00"
      ]
    },
    "4154": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4155": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "4156": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0"
      ]
    },
    "4158": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4160": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4161": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0"
      ]
    },
    "4162": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "4163": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4165": {
      "op": "frame_dig -3",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4167": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4168": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "4170": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4171": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4173": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4174": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0"
      ]
    },
    "4176": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4177": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "4179": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4180": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "4181": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4182": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "4184": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4186": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%0#0"
      ]
    },
    "4187": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4188": {
      "op": "box_put",
      "stack_out": []
    },
    "4189": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4190": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"active_loan_records\""
      ]
    },
    "4192": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4193": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "4194": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "4195": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "4196": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "4198": {
      "op": "swap",
      "stack_out": [
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "4199": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4200": {
      "retsub": true,
      "op": "retsub"
    },
    "4201": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addLoanRecordExternal",
      "params": {
        "disbursement#0": "uint64",
        "collateralTokenId#0": "bytes",
        "borrowerAddress#0": "bytes",
        "collateralAmount#0": "uint64"
      },
      "block": "addLoanRecordExternal",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "4204": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4206": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4207": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "4208": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4209": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4210": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4211": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "4212": {
      "op": "frame_dig -4",
      "defined_out": [
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)"
      ]
    },
    "4214": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4216": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)",
        "collateralTokenId#0 (copy)",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4218": {
      "op": "frame_dig -1",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)",
        "collateralTokenId#0 (copy)",
        "borrowerAddress#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "4220": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.mintLoanRecord",
      "op": "callsub mintLoanRecord",
      "stack_out": []
    },
    "4223": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#0 (copy)"
      ]
    },
    "4225": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "4227": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": []
    },
    "4230": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4231": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_borrows\""
      ]
    },
    "4233": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4234": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4235": {
      "op": "frame_dig -4",
      "stack_out": [
        "maybe_value%1#0",
        "disbursement#0 (copy)"
      ]
    },
    "4237": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "4238": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4240": {
      "op": "swap",
      "stack_out": [
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4241": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4242": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "4245": {
      "op": "bytec 13 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "4247": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "4248": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4249": {
      "retsub": true,
      "op": "retsub"
    },
    "4250": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "params": {
        "debtor#0": "bytes",
        "templateReserveAddress#0": "bytes"
      },
      "block": "accrueLoanInterest",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4253": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4255": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "4257": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4258": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4259": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "4261": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": []
    },
    "4262": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4263": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contract_state\""
      ]
    },
    "4265": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4266": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4267": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4268": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "4269": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "4270": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": []
    },
    "4271": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "{accrueMarket}"
      ]
    },
    "4274": {
      "op": "pop",
      "stack_out": []
    },
    "4275": {
      "op": "frame_dig -2",
      "stack_out": [
        "debtor#0 (copy)"
      ]
    },
    "4277": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "{syncBorrowerSnapshot}"
      ],
      "stack_out": [
        "{syncBorrowerSnapshot}"
      ]
    },
    "4280": {
      "op": "pop",
      "stack_out": []
    },
    "4281": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "4284": {
      "op": "bytec 13 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "4286": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "4287": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4288": {
      "retsub": true,
      "op": "retsub"
    },
    "4289": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "params": {},
      "block": "current_apr_bps",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4292": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "U_raw#0"
      ]
    },
    "4294": {
      "op": "dupn 6",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ]
    },
    "4296": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "0"
      ]
    },
    "4297": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "4298": {
      "op": "app_global_get_ex",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "4299": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "maybe_exists%0#0",
        "D#0"
      ]
    },
    "4300": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "maybe_exists%0#0",
        "D#0",
        "D#0 (copy)"
      ]
    },
    "4301": {
      "op": "uncover 2",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "4303": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0"
      ]
    },
    "4304": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "0"
      ]
    },
    "4305": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4307": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "B#0",
        "maybe_exists%1#0"
      ]
    },
    "4308": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "maybe_exists%1#0",
        "B#0"
      ]
    },
    "4309": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ]
    },
    "4311": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0"
      ]
    },
    "4312": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "0"
      ]
    },
    "4313": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "B#0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "4315": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "4316": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%2#0",
        "cap_bps#0"
      ]
    },
    "4317": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "maybe_exists%2#0"
      ]
    },
    "4319": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "4320": {
      "op": "bnz current_apr_bps_after_if_else@14",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4323": {
      "op": "intc_0 // 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4324": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4326": {
      "block": "current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@17",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4327": {
      "op": "bytec 35 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"rate_model_type\""
      ]
    },
    "4329": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4330": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%0#0"
      ]
    },
    "4331": {
      "op": "bnz current_apr_bps_ternary_false@2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4334": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4335": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "4337": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%0#0"
      ]
    },
    "4338": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0"
      ]
    },
    "4339": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0"
      ]
    },
    "4340": {
      "op": "bytec 36 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\"",
        "0",
        "base_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0",
        "\"kink_norm_bps\""
      ]
    },
    "4342": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "4343": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "4344": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4345": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "4347": {
      "op": "cover 3",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "4349": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "4350": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "4351": {
      "op": "bytec 37 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope1_bps\""
      ]
    },
    "4353": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "4354": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ]
    },
    "4355": {
      "op": "frame_bury 5",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "4357": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "4358": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "4359": {
      "op": "bytec 38 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope2_bps\""
      ]
    },
    "4361": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope2_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "4362": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope2_bps#0"
      ]
    },
    "4363": {
      "op": "frame_bury 6",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "4365": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "4366": {
      "op": "frame_dig 0",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_raw#0"
      ]
    },
    "4368": {
      "op": ">=",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "tmp%0#1"
      ]
    },
    "4369": {
      "op": "bz current_apr_bps_else_body@6",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ]
    },
    "4372": {
      "op": "frame_dig 5",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "4374": {
      "op": "frame_dig 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0",
        "U_raw#0"
      ]
    },
    "4376": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "hi1#0",
        "kink_norm_bps#0",
        "lo1#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0"
      ]
    },
    "4377": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0",
        "kink_norm_bps#0"
      ]
    },
    "4379": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "tmp%1#0"
      ]
    },
    "4380": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4381": {
      "op": "frame_bury 1",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4383": {
      "block": "current_apr_bps_after_if_else@7",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4384": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "4386": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "4387": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "4388": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0",
        "maxCap#0 (copy)"
      ]
    },
    "4389": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "4391": {
      "op": "frame_bury 4",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "4393": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "4394": {
      "op": "frame_dig 1",
      "defined_out": [
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "apr#11"
      ]
    },
    "4396": {
      "op": "frame_bury 2",
      "defined_out": [
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "4398": {
      "op": "bz current_apr_bps_after_if_else@10",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4401": {
      "op": "frame_dig 1",
      "defined_out": [
        "apr#0",
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4403": {
      "op": "dup",
      "defined_out": [
        "apr#0",
        "apr#0 (copy)",
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)"
      ]
    },
    "4404": {
      "op": "frame_dig 4",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)",
        "maxCap#0"
      ]
    },
    "4406": {
      "op": ">",
      "defined_out": [
        "apr#0",
        "apr#11",
        "maxCap#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "tmp%5#0"
      ]
    },
    "4407": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#0",
        "apr#11"
      ]
    },
    "4408": {
      "op": "frame_bury 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#0"
      ]
    },
    "4410": {
      "op": "bz current_apr_bps_after_if_else@10",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4413": {
      "op": "frame_dig 4",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#11"
      ]
    },
    "4415": {
      "op": "frame_bury 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4417": {
      "block": "current_apr_bps_after_if_else@10",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4419": {
      "op": "frame_bury 1",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4421": {
      "block": "current_apr_bps_ternary_merge@3",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "bytec 30 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\""
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"prev_apr_bps\""
      ]
    },
    "4423": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"prev_apr_bps\"",
        "apr#0"
      ]
    },
    "4425": {
      "op": "dup",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0",
        "apr#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"prev_apr_bps\"",
        "apr#0 (copy)",
        "apr#0 (copy)"
      ]
    },
    "4426": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "\"prev_apr_bps\"",
        "apr#0 (copy)"
      ]
    },
    "4428": {
      "op": "app_global_put",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4429": {
      "op": "frame_bury 0"
    },
    "4431": {
      "retsub": true,
      "op": "retsub"
    },
    "4432": {
      "block": "current_apr_bps_else_body@6",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "U_raw#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "U_raw#0"
      ]
    },
    "4434": {
      "op": "uncover 2",
      "defined_out": [
        "U_raw#0",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_raw#0",
        "kink_norm_bps#0"
      ]
    },
    "4436": {
      "op": "dup",
      "defined_out": [
        "U_raw#0",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_raw#0",
        "kink_norm_bps#0 (copy)",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4437": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_raw#0",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4439": {
      "op": "-",
      "defined_out": [
        "U_raw#0",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0"
      ]
    },
    "4440": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "U_raw#0",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0",
        "10000"
      ]
    },
    "4441": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "10000",
        "kink_norm_bps#0"
      ]
    },
    "4443": {
      "op": "-",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0"
      ]
    },
    "4444": {
      "op": "frame_dig 6",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "over#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0",
        "slope2_bps#0"
      ]
    },
    "4446": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "slope2_bps#0",
        "over#0"
      ]
    },
    "4448": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4449": {
      "op": "uncover 3",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0"
      ]
    },
    "4451": {
      "op": "frame_dig 5",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "4453": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "tmp%2#0"
      ]
    },
    "4454": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4456": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0",
        "denom#0"
      ]
    },
    "4458": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "4459": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4460": {
      "op": "frame_bury 1",
      "defined_out": [
        "U_raw#0",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4462": {
      "op": "b current_apr_bps_after_if_else@7"
    },
    "4465": {
      "block": "current_apr_bps_ternary_false@2",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4466": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "4468": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4469": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4470": {
      "op": "frame_bury 1",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4472": {
      "op": "b current_apr_bps_ternary_merge@3"
    },
    "4475": {
      "block": "current_apr_bps_after_if_else@14",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "4477": {
      "op": "frame_dig 9",
      "defined_out": [
        "D#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "cap_bps#0"
      ]
    },
    "4479": {
      "op": "mulw",
      "defined_out": [
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ]
    },
    "4480": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0",
        "10000"
      ]
    },
    "4481": {
      "op": "divw",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "4482": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0"
      ]
    },
    "4483": {
      "op": "frame_bury 3",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "4485": {
      "op": "bnz current_apr_bps_after_if_else@16",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4488": {
      "op": "intc_0 // 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4489": {
      "op": "frame_bury 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4491": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@17"
    },
    "4494": {
      "block": "current_apr_bps_after_if_else@16",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "B#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0"
      ]
    },
    "4496": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)"
      ]
    },
    "4497": {
      "op": "frame_dig 3",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ]
    },
    "4499": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0",
        "capBorrow#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "4500": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "4502": {
      "op": "<=",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#1"
      ]
    },
    "4503": {
      "op": "dig 1",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#1",
        "capBorrow#0 (copy)"
      ]
    },
    "4505": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "tmp%2#1",
        "capBorrow#0 (copy)",
        "B#0"
      ]
    },
    "4507": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0 (copy)",
        "B#0",
        "tmp%2#1"
      ]
    },
    "4509": {
      "op": "select",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0"
      ]
    },
    "4510": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0",
        "10000"
      ]
    },
    "4511": {
      "op": "mulw",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ]
    },
    "4512": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiN#0",
        "loN#0",
        "capBorrow#0"
      ]
    },
    "4514": {
      "op": "divw",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4515": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4517": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@17"
    },
    "4520": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "params": {
        "rec#0": "bytes"
      },
      "block": "currentDebtFromSnapshot",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "4523": {
      "op": "frame_dig -1",
      "defined_out": [
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)"
      ]
    },
    "4525": {
      "op": "pushint 73 // 73",
      "defined_out": [
        "73",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)",
        "73"
      ]
    },
    "4527": {
      "op": "extract_uint64",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0"
      ]
    },
    "4528": {
      "op": "dup",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "p#0"
      ]
    },
    "4529": {
      "op": "bnz currentDebtFromSnapshot_after_if_else@2",
      "stack_out": [
        "p#0"
      ]
    },
    "4532": {
      "op": "intc_0 // 0",
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4533": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "0",
        "rec#0 (copy)"
      ]
    },
    "4535": {
      "op": "uncover 2"
    },
    "4537": {
      "retsub": true,
      "op": "retsub"
    },
    "4538": {
      "block": "currentDebtFromSnapshot_after_if_else@2",
      "stack_in": [
        "p#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4539": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "p#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4541": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4542": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "p#0",
        "maybe_value%0#0"
      ]
    },
    "4543": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "p#0"
      ]
    },
    "4545": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0"
      ]
    },
    "4546": {
      "op": "frame_dig -1",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)"
      ]
    },
    "4548": {
      "op": "pushint 81 // 81",
      "defined_out": [
        "81",
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)",
        "81"
      ]
    },
    "4550": {
      "op": "extract_uint64",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "tmp%3#0"
      ]
    },
    "4551": {
      "op": "divw",
      "defined_out": [
        "p#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "p#0",
        "tmp%4#0"
      ]
    },
    "4552": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "tmp%4#0",
        "rec#0 (copy)"
      ]
    },
    "4554": {
      "op": "uncover 2"
    },
    "4556": {
      "retsub": true,
      "op": "retsub"
    },
    "4557": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "syncBorrowerSnapshot",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4560": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4562": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "4564": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4565": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4566": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "maybe_exists%0#0"
      ]
    },
    "4567": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "rec#0"
      ]
    },
    "4568": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4571": {
      "op": "dup",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4572": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0"
      ]
    },
    "4575": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "rec#0 (copy)"
      ]
    },
    "4577": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "4580": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "4581": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4582": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4583": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "4584": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "rec#0"
      ]
    },
    "4586": {
      "error": "Index access is out of bounds",
      "op": "extract 48 17 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "4589": {
      "op": "dig 4",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "liveDebt#0 (copy)"
      ]
    },
    "4591": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4592": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "4593": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4595": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4596": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0"
      ]
    },
    "4597": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4598": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)"
      ]
    },
    "4600": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)",
        "tmp%1#0"
      ]
    },
    "4602": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4603": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ]
    },
    "4605": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4606": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%3#0"
      ]
    },
    "4608": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "4609": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0",
        "maybe_value%1#0"
      ]
    },
    "4611": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "4612": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "4614": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4615": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "4616": {
      "op": "concat",
      "defined_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "4617": {
      "op": "uncover 2",
      "stack_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ]
    },
    "4619": {
      "op": "swap",
      "stack_out": [
        "liveDebt#0",
        "tmp%0#0",
        "newRec#0"
      ]
    },
    "4620": {
      "op": "box_put",
      "stack_out": [
        "liveDebt#0"
      ]
    },
    "4621": {
      "retsub": true,
      "op": "retsub"
    },
    "4622": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "params": {},
      "block": "accrueMarket",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4625": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "deltaT#0"
      ]
    },
    "4627": {
      "op": "dupn 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ]
    },
    "4629": {
      "op": "global LatestTimestamp"
    },
    "4631": {
      "op": "dup"
    },
    "4632": {
      "op": "intc_0 // 0"
    },
    "4633": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "0",
        "\"last_accrual_ts\""
      ]
    },
    "4635": {
      "op": "app_global_get_ex",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4636": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4637": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0",
        "last#0 (copy)"
      ]
    },
    "4638": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4640": {
      "op": "cover 3",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4642": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4643": {
      "op": "<=",
      "defined_out": [
        "last#0",
        "now#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp%0#0"
      ]
    },
    "4644": {
      "op": "bz accrueMarket_after_if_else@2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4647": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4648": {
      "op": "frame_bury 0"
    },
    "4650": {
      "retsub": true,
      "op": "retsub"
    },
    "4651": {
      "block": "accrueMarket_after_if_else@2",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0"
      ]
    },
    "4653": {
      "op": "frame_dig 5",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4655": {
      "op": "-",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4656": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0",
        "deltaT#0"
      ]
    },
    "4657": {
      "op": "frame_bury 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4659": {
      "op": "bnz accrueMarket_after_if_else@9",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4662": {
      "op": "intc_0 // 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4663": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4665": {
      "block": "accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.sliceFactorWad@10",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4667": {
      "op": "bnz accrueMarket_after_if_else@4",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4670": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\""
      ]
    },
    "4672": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4674": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4675": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4676": {
      "op": "frame_bury 0"
    },
    "4678": {
      "retsub": true,
      "op": "retsub"
    },
    "4679": {
      "block": "accrueMarket_after_if_else@4",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4680": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4682": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "oldIndex#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "maybe_exists%1#0"
      ]
    },
    "4683": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0"
      ]
    },
    "4684": {
      "op": "dup",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ]
    },
    "4685": {
      "op": "frame_dig 2",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ]
    },
    "4687": {
      "op": "mulw",
      "defined_out": [
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0"
      ]
    },
    "4688": {
      "op": "intc 5 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0",
        "1000000000000"
      ]
    },
    "4690": {
      "op": "divw",
      "defined_out": [
        "incrIndex#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "incrIndex#0"
      ]
    },
    "4691": {
      "op": "+",
      "defined_out": [
        "newIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0"
      ]
    },
    "4692": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0",
        "\"borrow_index_wad\""
      ]
    },
    "4694": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"borrow_index_wad\"",
        "newIndex#0"
      ]
    },
    "4695": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4696": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4697": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4699": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4700": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4701": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0",
        "totalBefore#0 (copy)"
      ]
    },
    "4702": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4704": {
      "op": "frame_bury 3",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4706": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4707": {
      "op": "intc_0 // 0",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "interest#0"
      ]
    },
    "4708": {
      "op": "frame_bury 1",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4710": {
      "op": "bz accrueMarket_after_if_else@6",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4713": {
      "op": "frame_dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4715": {
      "op": "frame_dig 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "simpleWad#0"
      ]
    },
    "4717": {
      "op": "mulw",
      "defined_out": [
        "hiB#0",
        "interest#0",
        "loB#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "4718": {
      "op": "intc 5 // 1000000000000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0",
        "1000000000000"
      ]
    },
    "4720": {
      "op": "divw",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4721": {
      "op": "frame_bury 1",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4723": {
      "block": "accrueMarket_after_if_else@6",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4724": {
      "op": "bytec 40 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"protocol_share_bps\""
      ]
    },
    "4726": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "maybe_exists%3#0"
      ]
    },
    "4727": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0"
      ]
    },
    "4728": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "10000"
      ]
    },
    "4729": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "10000",
        "protoBps#0"
      ]
    },
    "4730": {
      "op": "-",
      "defined_out": [
        "deposBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0"
      ]
    },
    "4731": {
      "op": "frame_dig 1",
      "defined_out": [
        "deposBps#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0",
        "interest#0"
      ]
    },
    "4733": {
      "op": "dup"
    },
    "4734": {
      "op": "uncover 2",
      "defined_out": [
        "deposBps#0",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "interest#0 (copy)",
        "deposBps#0"
      ]
    },
    "4736": {
      "op": "mulw",
      "defined_out": [
        "hiD#0",
        "interest#0",
        "loD#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0"
      ]
    },
    "4737": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0",
        "10000"
      ]
    },
    "4738": {
      "op": "divw",
      "defined_out": [
        "depositorInterest#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0"
      ]
    },
    "4739": {
      "op": "dup2",
      "defined_out": [
        "depositorInterest#0",
        "depositorInterest#0 (copy)",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "interest#0 (copy)",
        "depositorInterest#0 (copy)"
      ]
    },
    "4740": {
      "op": "-",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4741": {
      "op": "frame_dig 3",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ]
    },
    "4743": {
      "op": "dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0",
        "interest#0 (copy)"
      ]
    },
    "4745": {
      "op": "+",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0"
      ]
    },
    "4746": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4748": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4749": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4750": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4751": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "4752": {
      "op": "app_global_get_ex",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4753": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0"
      ]
    },
    "4754": {
      "op": "uncover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "depositorInterest#0"
      ]
    },
    "4756": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%1#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0"
      ]
    },
    "4757": {
      "op": "bytec_3 // \"total_deposits\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "4758": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "4759": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0"
      ]
    },
    "4760": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4761": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "4763": {
      "op": "app_global_get_ex",
      "defined_out": [
        "interest#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4764": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0"
      ]
    },
    "4765": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%2#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "new_state_value%2#0"
      ]
    },
    "4766": {
      "op": "bytec 15 // \"fee_pool\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "new_state_value%2#0",
        "\"fee_pool\""
      ]
    },
    "4768": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"fee_pool\"",
        "new_state_value%2#0"
      ]
    },
    "4769": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4770": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\""
      ]
    },
    "4772": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "now#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4774": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4775": {
      "op": "frame_bury 0"
    },
    "4777": {
      "retsub": true,
      "op": "retsub"
    },
    "4778": {
      "block": "accrueMarket_after_if_else@9",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4779": {
      "op": "bytec 13 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"last_apr_bps\""
      ]
    },
    "4781": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "4782": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1"
      ]
    },
    "4783": {
      "op": "frame_dig 0",
      "defined_out": [
        "deltaT#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "deltaT#0"
      ]
    },
    "4785": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0"
      ]
    },
    "4786": {
      "op": "pushint 31536000 // 31536000",
      "defined_out": [
        "31536000",
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0",
        "31536000"
      ]
    },
    "4791": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0"
      ]
    },
    "4792": {
      "op": "intc 5 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0",
        "1000000000000"
      ]
    },
    "4794": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0"
      ]
    },
    "4795": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0",
        "10000"
      ]
    },
    "4796": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4797": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4799": {
      "op": "b accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.sliceFactorWad@10"
    },
    "4802": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "params": {
        "borrowerAddress#0": "bytes"
      },
      "block": "getLoanRecord",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4805": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4807": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4809": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4810": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4811": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4812": {
      "retsub": true,
      "op": "retsub"
    },
    "4813": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "params": {
        "paymentTxn#0": "uint64",
        "repaymentAmount#0": "uint64"
      },
      "block": "repayLoanAlgo",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4816": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4818": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4819": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4820": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4821": {
      "op": "bury 1",
      "stack_out": [
        "remainingDebt#0",
        "maybe_exists%0#0"
      ]
    },
    "4823": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4824": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4825": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"contract_state\""
      ]
    },
    "4827": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4828": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%1#0"
      ]
    },
    "4829": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0"
      ]
    },
    "4830": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0",
        "1"
      ]
    },
    "4831": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%1#0"
      ]
    },
    "4832": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4833": {
      "op": "frame_dig -2",
      "defined_out": [
        "paymentTxn#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4835": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%2#0"
      ]
    },
    "4837": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "4839": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%4#0"
      ]
    },
    "4840": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4843": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4845": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%5#0"
      ]
    },
    "4847": {
      "op": "frame_dig -1",
      "defined_out": [
        "repaymentAmount#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%5#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4849": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%6#0"
      ]
    },
    "4850": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4853": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "4854": {
      "block": "repayLoanAlgo_bool_merge@4",
      "stack_in": [
        "remainingDebt#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4855": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "_interestSlice#0"
      ]
    },
    "4858": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4859": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%7#0"
      ]
    },
    "4861": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "4864": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4865": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%8#0"
      ]
    },
    "4867": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4870": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4873": {
      "op": "swap",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4874": {
      "op": "frame_dig -1",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4876": {
      "op": "dig 1",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)",
        "liveDebt#0 (copy)"
      ]
    },
    "4878": {
      "op": "<=",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "tmp%9#0"
      ]
    },
    "4879": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4880": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4882": {
      "op": "-",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4883": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "4884": {
      "op": "frame_bury 0",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4886": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "0"
      ]
    },
    "4887": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4889": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4890": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%2#0"
      ]
    },
    "4891": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%2#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4893": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0"
      ]
    },
    "4894": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4896": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4897": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4898": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4900": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4903": {
      "op": "bnz repayLoanAlgo_else_body@7",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4906": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"loan_record\""
      ]
    },
    "4908": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"loan_record\"",
        "tmp%11#0"
      ]
    },
    "4910": {
      "op": "concat",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "tmp%12#0"
      ]
    },
    "4911": {
      "op": "box_del",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "{box_del}"
      ]
    },
    "4912": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4913": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "0"
      ]
    },
    "4914": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4916": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4917": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%3#0"
      ]
    },
    "4918": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "4919": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "new_state_value%1#0"
      ]
    },
    "4920": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "4922": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "4923": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4924": {
      "op": "itxn_begin"
    },
    "4925": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4927": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "4928": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4929": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "32"
      ]
    },
    "4931": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4932": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ]
    },
    "4933": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "40"
      ]
    },
    "4935": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "4936": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4938": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4940": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4942": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "4"
      ]
    },
    "4944": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4946": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "1000"
      ]
    },
    "4947": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4949": {
      "op": "itxn_submit"
    },
    "4950": {
      "retsub": true,
      "op": "retsub"
    },
    "4951": {
      "block": "repayLoanAlgo_else_body@7",
      "stack_in": [
        "remainingDebt#0",
        "rec#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "tmp%15#0"
      ]
    },
    "4953": {
      "op": "swap",
      "defined_out": [
        "rec#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "rec#0"
      ]
    },
    "4954": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4955": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "rec#0",
        "tmp%16#0"
      ]
    },
    "4958": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "rec#0"
      ]
    },
    "4959": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "4962": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "0"
      ]
    },
    "4963": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4964": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4965": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0"
      ]
    },
    "4966": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%4#0",
        "repaymentAmount#0 (copy)",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4968": {
      "op": "itob",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "4969": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "4971": {
      "op": "itob",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4972": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "4973": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "4976": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4977": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4978": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4979": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "4981": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "4982": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "4983": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4985": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%5#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4986": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0"
      ]
    },
    "4987": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "4988": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%15#0"
      ]
    },
    "4990": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "4992": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4993": {
      "op": "uncover 5",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0",
        "tmp%17#0"
      ]
    },
    "4995": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4996": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4998": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4999": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%4#0"
      ]
    },
    "5001": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "5002": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%2#0"
      ]
    },
    "5004": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "remainingDebt#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "5005": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%3#0"
      ]
    },
    "5006": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "5007": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "5009": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "tmp%18#0"
      ]
    },
    "5011": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "tmp%19#0"
      ]
    },
    "5012": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%19#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "5013": {
      "op": "box_put",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "5014": {
      "retsub": true,
      "op": "retsub"
    },
    "5015": {
      "block": "repayLoanAlgo_bool_false@3",
      "stack_in": [
        "remainingDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "5016": {
      "op": "b repayLoanAlgo_bool_merge@4"
    },
    "5019": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawPlatformFees",
      "params": {
        "paymentReceiver#0": "bytes",
        "feeTxn#0": "uint64"
      },
      "block": "withdrawPlatformFees",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "5022": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "payout#0"
      ]
    },
    "5024": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0"
      ]
    },
    "5026": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "0"
      ]
    },
    "5027": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "5028": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5029": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "5030": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%1#0"
      ]
    },
    "5031": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": [
        "payout#0"
      ]
    },
    "5032": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "0"
      ]
    },
    "5033": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "payout#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5035": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5036": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%1#0"
      ]
    },
    "5037": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%2#0"
      ]
    },
    "5038": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%2#0",
        "1"
      ]
    },
    "5039": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%3#0"
      ]
    },
    "5040": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "payout#0"
      ]
    },
    "5041": {
      "op": "frame_dig -1",
      "defined_out": [
        "feeTxn#0 (copy)"
      ],
      "stack_out": [
        "payout#0",
        "feeTxn#0 (copy)"
      ]
    },
    "5043": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%4#0"
      ]
    },
    "5045": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5047": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%6#0"
      ]
    },
    "5048": {
      "op": "bz withdrawPlatformFees_bool_false@3",
      "stack_out": [
        "payout#0"
      ]
    },
    "5051": {
      "op": "frame_dig -1",
      "stack_out": [
        "payout#0",
        "feeTxn#0 (copy)"
      ]
    },
    "5053": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%7#0"
      ]
    },
    "5055": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%7#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "5056": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%8#0"
      ]
    },
    "5057": {
      "op": "bz withdrawPlatformFees_bool_false@3",
      "stack_out": [
        "payout#0"
      ]
    },
    "5060": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "payout#0",
        "and_result%0#0"
      ]
    },
    "5061": {
      "block": "withdrawPlatformFees_bool_merge@4",
      "stack_in": [
        "payout#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "payout#0"
      ]
    },
    "5062": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "payout#0",
        "0"
      ]
    },
    "5063": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0"
      ],
      "stack_out": [
        "payout#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "5065": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5066": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%2#0"
      ]
    },
    "5067": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "5068": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "0",
        "\"current_accumulated_commission\""
      ]
    },
    "5070": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5071": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "5072": {
      "op": "+",
      "defined_out": [
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5073": {
      "op": "dup",
      "stack_out": [
        "payout#0",
        "payout#0",
        "payout#0"
      ]
    },
    "5074": {
      "op": "frame_bury 0",
      "defined_out": [
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5076": {
      "op": "bz withdrawPlatformFees_after_if_else@7",
      "stack_out": [
        "payout#0"
      ]
    },
    "5079": {
      "op": "itxn_begin"
    },
    "5080": {
      "op": "frame_dig 0",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5082": {
      "op": "dup",
      "defined_out": [
        "payout#0",
        "payout#0 (copy)"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "payout#0 (copy)"
      ]
    },
    "5083": {
      "op": "itxn_field Amount",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5085": {
      "op": "frame_dig -2",
      "defined_out": [
        "paymentReceiver#0 (copy)",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "paymentReceiver#0 (copy)"
      ]
    },
    "5087": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5089": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "1"
      ]
    },
    "5090": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5092": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "1000"
      ]
    },
    "5093": {
      "op": "itxn_field Fee",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5095": {
      "op": "itxn_submit"
    },
    "5096": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "payout#0"
      ]
    },
    "5099": {
      "op": "bytec 15 // \"fee_pool\"",
      "stack_out": [
        "payout#0",
        "\"fee_pool\""
      ]
    },
    "5101": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "\"fee_pool\"",
        "0"
      ]
    },
    "5102": {
      "op": "app_global_put",
      "stack_out": [
        "payout#0"
      ]
    },
    "5103": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "stack_out": [
        "payout#0",
        "\"current_accumulated_commission\""
      ]
    },
    "5105": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "\"current_accumulated_commission\"",
        "0"
      ]
    },
    "5106": {
      "op": "app_global_put",
      "stack_out": [
        "payout#0"
      ]
    },
    "5107": {
      "block": "withdrawPlatformFees_after_if_else@7",
      "stack_in": [
        "payout#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "5108": {
      "block": "withdrawPlatformFees_bool_false@3",
      "stack_in": [
        "payout#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "payout#0",
        "and_result%0#0"
      ]
    },
    "5109": {
      "op": "b withdrawPlatformFees_bool_merge@4"
    },
    "5112": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitAlgo",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "premiumAxferTxn#0": "uint64",
        "repayPayTxn#0": "uint64",
        "lstAppId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "buyoutSplitAlgo",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "5115": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "premiumTokens#0"
      ]
    },
    "5117": {
      "op": "dup",
      "stack_out": [
        "premiumTokens#0",
        "refund#0"
      ]
    },
    "5118": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "\"loan_record\""
      ]
    },
    "5120": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "5122": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0"
      ]
    },
    "5123": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5125": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5126": {
      "op": "bury 1",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5128": {
      "error": "NO_LOAN_RECORD",
      "op": "assert // NO_LOAN_RECORD",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5129": {
      "op": "intc_0 // 0",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "5130": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5132": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5133": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "5134": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "5135": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "5136": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "5137": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5138": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%0#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "{accrueMarket}"
      ]
    },
    "5141": {
      "op": "pop",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5142": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "5144": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "5146": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%3#0",
        "10000"
      ]
    },
    "5147": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "5148": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5149": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5150": {
      "op": "swap",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "maybe_exists%2#0",
        "rec#0"
      ]
    },
    "5151": {
      "op": "dup",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "maybe_exists%2#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5152": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5154": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "rec#0"
      ]
    },
    "5155": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5156": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "5158": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0"
      ]
    },
    "5159": {
      "op": "dup",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5160": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0"
      ]
    },
    "5162": {
      "op": "dup",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5163": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5166": {
      "op": "dup",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5167": {
      "op": "cover 2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5169": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "5171": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#1"
      ]
    },
    "5174": {
      "op": "pop",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5175": {
      "op": "dup",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5176": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5178": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)"
      ]
    },
    "5179": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5180": {
      "op": "swap",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "debtBase#0",
        "collateralTokenId#0"
      ]
    },
    "5181": {
      "op": "uncover 2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "5183": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5185": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralUSD#0"
      ]
    },
    "5188": {
      "op": "swap",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtBase#0"
      ]
    },
    "5189": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5192": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "5193": {
      "error": "BAD_DEBT_USD",
      "op": "assert // BAD_DEBT_USD",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5194": {
      "op": "dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0 (copy)"
      ]
    },
    "5196": {
      "error": "BAD_COLLATERAL_USD",
      "op": "assert // BAD_COLLATERAL_USD",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5197": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "5198": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hLTV#0",
        "lLTV#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hLTV#0",
        "lLTV#0"
      ]
    },
    "5199": {
      "op": "dig 2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hLTV#0",
        "lLTV#0",
        "collateralUSD#0 (copy)"
      ]
    },
    "5201": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "ltvBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0"
      ]
    },
    "5202": {
      "op": "intc_0 // 0",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0",
        "0"
      ]
    },
    "5203": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "ltvBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5205": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "ltvBps#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5206": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0",
        "maybe_value%3#0"
      ]
    },
    "5207": {
      "op": "dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "ltvBps#0",
        "ltvBps#0 (copy)",
        "maybe_value%3#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0",
        "maybe_value%3#0",
        "ltvBps#0 (copy)"
      ]
    },
    "5209": {
      "op": ">",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "ltvBps#0",
        "rec#0",
        "tmp%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0",
        "tmp%10#0"
      ]
    },
    "5210": {
      "error": "NOT_BUYOUT_ELIGIBLE",
      "op": "assert // NOT_BUYOUT_ELIGIBLE",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0"
      ]
    },
    "5211": {
      "op": "intc_0 // 0",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0",
        "0"
      ]
    },
    "5212": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5214": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "ltvBps#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "5215": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0",
        "maybe_value%4#0"
      ]
    },
    "5216": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0",
        "maybe_value%4#0",
        "10000"
      ]
    },
    "5217": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "ltvBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ltvBps#0",
        "hR#0",
        "lR#0"
      ]
    },
    "5218": {
      "op": "uncover 2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hR#0",
        "lR#0",
        "ltvBps#0"
      ]
    },
    "5220": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "ratio_bps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ratio_bps#0"
      ]
    },
    "5221": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ratio_bps#0",
        "10000"
      ]
    },
    "5222": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "premiumRateBps#0"
      ]
    },
    "5223": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hP#0",
        "lP#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hP#0",
        "lP#0"
      ]
    },
    "5224": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hP#0",
        "lP#0",
        "10000"
      ]
    },
    "5225": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0"
      ]
    },
    "5226": {
      "op": "intc_0 // 0",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5227": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5229": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5230": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "maybe_value%5#0"
      ]
    },
    "5231": {
      "op": "btoi",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "buyoutTokenId#0"
      ]
    },
    "5232": {
      "op": "swap",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0"
      ]
    },
    "5233": {
      "op": "intc_0 // 0",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5234": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5236": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "5237": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "maybe_value%6#0"
      ]
    },
    "5238": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5241": {
      "op": "dup"
    },
    "5242": {
      "op": "uncover 2",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0"
      ]
    },
    "5244": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0",
        "1000000"
      ]
    },
    "5246": {
      "op": "mulw",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hPT#0",
        "lPT#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5247": {
      "op": "cover 2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "buyoutTokenPrice#0",
        "hPT#0"
      ]
    },
    "5249": {
      "op": "swap",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hPT#0",
        "lPT#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5250": {
      "op": "bnz buyoutSplitAlgo_ternary_false@2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5253": {
      "op": "intc_0 // 0",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0"
      ]
    },
    "5254": {
      "op": "frame_bury 0",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5256": {
      "block": "buyoutSplitAlgo_ternary_merge@3",
      "stack_in": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "premiumAxferTxn#0 (copy)"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5258": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%12#0"
      ]
    },
    "5260": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "5262": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%14#0"
      ]
    },
    "5263": {
      "error": "INVALID_RECEIVER",
      "op": "assert // INVALID_RECEIVER",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5264": {
      "op": "frame_dig -4",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5266": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%15#0"
      ]
    },
    "5268": {
      "op": "frame_dig 7",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%15#0",
        "buyoutTokenId#0"
      ]
    },
    "5270": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%16#0"
      ]
    },
    "5271": {
      "error": "INVALID_XFER_ASSET",
      "op": "assert // INVALID_XFER_ASSET",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5272": {
      "op": "frame_dig -4",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5274": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "buyoutTokenId#0",
        "paidAmount#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "paidAmount#0"
      ]
    },
    "5276": {
      "op": "dup",
      "defined_out": [
        "buyoutTokenId#0",
        "paidAmount#0",
        "paidAmount#0 (copy)"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "paidAmount#0",
        "paidAmount#0 (copy)"
      ]
    },
    "5277": {
      "op": "frame_dig 0",
      "defined_out": [
        "buyoutTokenId#0",
        "paidAmount#0",
        "paidAmount#0 (copy)",
        "premiumTokens#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "paidAmount#0",
        "paidAmount#0 (copy)",
        "premiumTokens#0"
      ]
    },
    "5279": {
      "op": "dup",
      "defined_out": [
        "buyoutTokenId#0",
        "paidAmount#0",
        "paidAmount#0 (copy)",
        "premiumTokens#0",
        "premiumTokens#0 (copy)"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "paidAmount#0",
        "paidAmount#0 (copy)",
        "premiumTokens#0 (copy)",
        "premiumTokens#0 (copy)"
      ]
    },
    "5280": {
      "op": "cover 3",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "paidAmount#0",
        "paidAmount#0 (copy)",
        "premiumTokens#0 (copy)"
      ]
    },
    "5282": {
      "op": ">=",
      "defined_out": [
        "buyoutTokenId#0",
        "paidAmount#0",
        "premiumTokens#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "paidAmount#0",
        "tmp%18#0"
      ]
    },
    "5283": {
      "error": "INVALID_BUYOUT_AMOUNT",
      "op": "assert // INVALID_BUYOUT_AMOUNT",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "paidAmount#0"
      ]
    },
    "5284": {
      "op": "swap",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "paidAmount#0",
        "premiumTokens#0"
      ]
    },
    "5285": {
      "op": "-",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "refund#0"
      ]
    },
    "5286": {
      "op": "frame_bury 1",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5288": {
      "op": "frame_dig -3",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "repayPayTxn#0 (copy)"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "repayPayTxn#0 (copy)"
      ]
    },
    "5290": {
      "op": "gtxns Sender",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%19#0"
      ]
    },
    "5292": {
      "op": "frame_dig -6",
      "defined_out": [
        "buyer#0 (copy)",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%19#0",
        "buyer#0 (copy)"
      ]
    },
    "5294": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%20#0"
      ]
    },
    "5295": {
      "op": "bz buyoutSplitAlgo_bool_false@7",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5298": {
      "op": "frame_dig -3",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "repayPayTxn#0 (copy)"
      ]
    },
    "5300": {
      "op": "gtxns Receiver",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%21#0"
      ]
    },
    "5302": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "5304": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%23#0"
      ]
    },
    "5305": {
      "op": "bz buyoutSplitAlgo_bool_false@7",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5308": {
      "op": "frame_dig -3",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "repayPayTxn#0 (copy)"
      ]
    },
    "5310": {
      "op": "gtxns Amount",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%24#0"
      ]
    },
    "5312": {
      "op": "frame_dig 6",
      "defined_out": [
        "buyoutTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%24#0",
        "debtBase#0"
      ]
    },
    "5314": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%25#0"
      ]
    },
    "5315": {
      "op": "bz buyoutSplitAlgo_bool_false@7",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5318": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "refund#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "and_result%0#0"
      ]
    },
    "5319": {
      "block": "buyoutSplitAlgo_bool_merge@8",
      "stack_in": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5320": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%0#0"
      ]
    },
    "5322": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "{box_del}"
      ]
    },
    "5323": {
      "op": "pop",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5324": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "0"
      ]
    },
    "5325": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "5327": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "5328": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "maybe_value%7#0"
      ]
    },
    "5329": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "maybe_value%7#0",
        "1"
      ]
    },
    "5330": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "new_state_value%0#0"
      ]
    },
    "5331": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "5333": {
      "op": "swap",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "5334": {
      "op": "app_global_put",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5335": {
      "op": "itxn_begin"
    },
    "5336": {
      "op": "frame_dig 3",
      "defined_out": [
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "rec#0"
      ]
    },
    "5338": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "rec#0",
        "32"
      ]
    },
    "5340": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5341": {
      "op": "frame_dig 4",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "5343": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "5344": {
      "op": "cover 2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5346": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5348": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0"
      ]
    },
    "5350": {
      "op": "frame_dig -6",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "5352": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0"
      ]
    },
    "5354": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "5356": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0"
      ]
    },
    "5358": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "1000"
      ]
    },
    "5359": {
      "op": "itxn_field Fee",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0"
      ]
    },
    "5361": {
      "op": "itxn_submit"
    },
    "5362": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "\"accepted_collaterals\""
      ]
    },
    "5364": {
      "op": "frame_dig 5",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5366": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "tmp%27#0"
      ]
    },
    "5367": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ]
    },
    "5368": {
      "op": "box_get",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%8#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "tmp%27#0",
        "acVal#0",
        "maybe_exists%8#0"
      ]
    },
    "5369": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "tmp%27#0",
        "acVal#0"
      ]
    },
    "5370": {
      "op": "dup",
      "defined_out": [
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "tmp%27#0",
        "acVal#0",
        "acVal#0 (copy)"
      ]
    },
    "5371": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "tmp%27#0",
        "acVal#0",
        "acVal#0 (copy)",
        "24"
      ]
    },
    "5373": {
      "op": "extract_uint64",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "collateralAmount#0",
        "tmp%27#0",
        "acVal#0",
        "tmp%29#0"
      ]
    },
    "5374": {
      "op": "uncover 3",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "acVal#0",
        "tmp%29#0",
        "collateralAmount#0"
      ]
    },
    "5376": {
      "op": "-",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "acVal#0",
        "updatedTotal#0"
      ]
    },
    "5377": {
      "op": "dig 1",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "acVal#0",
        "updatedTotal#0",
        "acVal#0 (copy)"
      ]
    },
    "5379": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0",
        "tmp%30#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%30#0"
      ]
    },
    "5382": {
      "op": "dig 2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%30#0",
        "acVal#0 (copy)"
      ]
    },
    "5384": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0",
        "tmp%30#0",
        "tmp%31#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "5387": {
      "op": "uncover 2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "acVal#0",
        "tmp%30#0",
        "tmp%31#0",
        "updatedTotal#0"
      ]
    },
    "5389": {
      "op": "itob",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0",
        "tmp%30#0",
        "tmp%31#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "acVal#0",
        "tmp%30#0",
        "tmp%31#0",
        "val_as_bytes%0#0"
      ]
    },
    "5390": {
      "op": "dig 3",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "acVal#0",
        "tmp%30#0",
        "tmp%31#0",
        "val_as_bytes%0#0",
        "acVal#0 (copy)"
      ]
    },
    "5392": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "acVal#0",
        "tmp%30#0",
        "tmp%31#0",
        "val_as_bytes%0#0",
        "tmp%32#0"
      ]
    },
    "5395": {
      "op": "uncover 4",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "tmp%30#0",
        "tmp%31#0",
        "val_as_bytes%0#0",
        "tmp%32#0",
        "acVal#0"
      ]
    },
    "5397": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "tmp%30#0",
        "tmp%31#0",
        "val_as_bytes%0#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "5400": {
      "op": "uncover 4",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "tmp%31#0",
        "val_as_bytes%0#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%30#0"
      ]
    },
    "5402": {
      "op": "uncover 4",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "5404": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%4#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0",
        "tmp%32#0",
        "tmp%33#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "5405": {
      "op": "uncover 2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "tmp%33#0",
        "encoded_tuple_buffer%4#0",
        "tmp%32#0"
      ]
    },
    "5407": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%5#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0",
        "tmp%33#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "tmp%33#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5408": {
      "op": "uncover 2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "tmp%33#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "5410": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%6#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "tmp%33#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "5411": {
      "op": "swap",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "encoded_tuple_buffer%6#0",
        "tmp%33#0"
      ]
    },
    "5412": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%7#0",
        "rec#0",
        "tmp%0#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "tmp%27#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "5413": {
      "op": "box_put",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5414": {
      "op": "intc_0 // 0",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "0"
      ]
    },
    "5415": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "5417": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "5418": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "maybe_value%9#0"
      ]
    },
    "5419": {
      "op": "frame_dig 6",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_value%9#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "maybe_value%9#0",
        "debtBase#0"
      ]
    },
    "5421": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)",
        "maybe_value%9#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "maybe_value%9#0",
        "debtBase#0 (copy)",
        "debtBase#0 (copy)"
      ]
    },
    "5422": {
      "op": "cover 2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "debtBase#0",
        "maybe_value%9#0",
        "debtBase#0 (copy)"
      ]
    },
    "5424": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "debtBase#0",
        "new_state_value%1#0"
      ]
    },
    "5425": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "debtBase#0",
        "new_state_value%1#0",
        "\"total_borrows\""
      ]
    },
    "5427": {
      "op": "swap",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "debtBase#0",
        "\"total_borrows\"",
        "new_state_value%1#0"
      ]
    },
    "5428": {
      "op": "app_global_put",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "debtBase#0"
      ]
    },
    "5429": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5432": {
      "op": "frame_dig 0",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0"
      ]
    },
    "5434": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)"
      ]
    },
    "5435": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)",
        "2"
      ]
    },
    "5437": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "halfPremium#0"
      ]
    },
    "5438": {
      "op": "itxn_begin"
    },
    "5439": {
      "op": "intc_0 // 0",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "halfPremium#0",
        "0"
      ]
    },
    "5440": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "halfPremium#0",
        "0",
        "\"admin_account\""
      ]
    },
    "5441": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "5442": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1"
      ]
    },
    "5443": {
      "op": "dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "halfPremium#0 (copy)",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "halfPremium#0 (copy)"
      ]
    },
    "5445": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1"
      ]
    },
    "5447": {
      "op": "frame_dig 7",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "buyoutTokenId#0"
      ]
    },
    "5449": {
      "op": "dup",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenId#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "buyoutTokenId#0 (copy)",
        "buyoutTokenId#0 (copy)"
      ]
    },
    "5450": {
      "op": "cover 3",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "buyoutTokenId#0 (copy)"
      ]
    },
    "5452": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "maybe_value%0#1"
      ]
    },
    "5454": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0"
      ]
    },
    "5456": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "4"
      ]
    },
    "5458": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0"
      ]
    },
    "5460": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "1000"
      ]
    },
    "5461": {
      "op": "itxn_field Fee",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0"
      ]
    },
    "5463": {
      "op": "itxn_submit"
    },
    "5464": {
      "op": "itxn_begin"
    },
    "5465": {
      "op": "uncover 2",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "premiumTokens#0"
      ]
    },
    "5467": {
      "op": "swap",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "halfPremium#0"
      ]
    },
    "5468": {
      "op": "-",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "inner_txn_params%1%%param_AssetAmount_idx_0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "buyoutTokenId#0",
        "inner_txn_params%1%%param_AssetAmount_idx_0#1"
      ]
    },
    "5469": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "buyoutTokenId#0"
      ]
    },
    "5471": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5473": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtor#0 (copy)",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "debtor#0 (copy)"
      ]
    },
    "5475": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5477": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "4"
      ]
    },
    "5479": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5481": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "1000"
      ]
    },
    "5482": {
      "op": "itxn_field Fee",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5484": {
      "op": "itxn_submit"
    },
    "5485": {
      "op": "frame_dig 1",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "refund#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "refund#0"
      ]
    },
    "5487": {
      "op": "bz buyoutSplitAlgo_after_if_else@12",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5490": {
      "op": "itxn_begin"
    },
    "5491": {
      "op": "frame_dig 1",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "refund#0"
      ]
    },
    "5493": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5495": {
      "op": "frame_dig 7",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "buyoutTokenId#0"
      ]
    },
    "5497": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5499": {
      "op": "frame_dig -6",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "buyer#0 (copy)"
      ]
    },
    "5501": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5503": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "4"
      ]
    },
    "5505": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5507": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "1000"
      ]
    },
    "5508": {
      "op": "itxn_field Fee",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5510": {
      "op": "itxn_submit"
    },
    "5511": {
      "block": "buyoutSplitAlgo_after_if_else@12",
      "stack_in": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ],
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "new_state_value%2#0"
      ]
    },
    "5514": {
      "op": "bytec 13 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "5516": {
      "op": "swap",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "5517": {
      "op": "app_global_put",
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5518": {
      "retsub": true,
      "op": "retsub"
    },
    "5519": {
      "block": "buyoutSplitAlgo_bool_false@7",
      "stack_in": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "and_result%0#0"
      ]
    },
    "5520": {
      "op": "b buyoutSplitAlgo_bool_merge@8"
    },
    "5523": {
      "block": "buyoutSplitAlgo_ternary_false@2",
      "stack_in": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "hPT#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "hPT#0"
      ]
    },
    "5525": {
      "op": "frame_dig 9",
      "defined_out": [
        "hPT#0",
        "lPT#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5527": {
      "op": "frame_dig 8",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "hPT#0",
        "lPT#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5529": {
      "op": "divw",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0",
        "premiumTokens#0"
      ]
    },
    "5530": {
      "op": "frame_bury 0",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "lPT#0",
        "hPT#0"
      ]
    },
    "5532": {
      "op": "b buyoutSplitAlgo_ternary_merge@3"
    },
    "5535": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "params": {
        "debtBaseUnits#0": "uint64"
      },
      "block": "debtUSD",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5538": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5539": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "5540": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5541": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "5542": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0"
      ],
      "stack_out": [
        "baseTokenPrice#0"
      ]
    },
    "5545": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenPrice#0",
        "debtBaseUnits#0 (copy)"
      ],
      "stack_out": [
        "baseTokenPrice#0",
        "debtBaseUnits#0 (copy)"
      ]
    },
    "5547": {
      "op": "mulw",
      "defined_out": [
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "h#0",
        "l#0"
      ]
    },
    "5548": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "h#0",
        "l#0",
        "1000000"
      ]
    },
    "5550": {
      "op": "divw",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5551": {
      "retsub": true,
      "op": "retsub"
    },
    "5552": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLST",
      "params": {
        "lstAppId#0": "uint64"
      },
      "block": "maxWithdrawableCollateralLST",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5555": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0"
      ]
    },
    "5556": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ]
    },
    "5558": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5559": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\""
      ]
    },
    "5561": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\"",
        "tmp%0#0"
      ]
    },
    "5563": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0"
      ]
    },
    "5564": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5565": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_exists%0#0"
      ]
    },
    "5567": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5568": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0"
      ]
    },
    "5569": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5571": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5572": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%1#0"
      ]
    },
    "5573": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%2#0"
      ]
    },
    "5574": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%2#0",
        "1"
      ]
    },
    "5575": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%3#0"
      ]
    },
    "5576": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5577": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "{accrueMarket}"
      ]
    },
    "5580": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5581": {
      "op": "bytec 6 // \"loan_record\"",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\""
      ]
    },
    "5583": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\"",
        "tmp%4#0"
      ]
    },
    "5585": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%5#0"
      ]
    },
    "5586": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5587": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0"
      ]
    },
    "5588": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5589": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5592": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "5594": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5595": {
      "op": "concat",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%0#1"
      ]
    },
    "5596": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "collateralTokenId#0",
        "maybe_exists%0#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5597": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0"
      ]
    },
    "5598": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateral#0",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0",
        "32"
      ]
    },
    "5600": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%8#0"
      ]
    },
    "5601": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%8#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5603": {
      "op": "==",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%9#0"
      ]
    },
    "5604": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0"
      ]
    },
    "5605": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5608": {
      "op": "swap",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5609": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5610": {
      "op": "cover 2",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5612": {
      "op": "bnz maxWithdrawableCollateralLST_after_if_else@2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5615": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "40"
      ]
    },
    "5617": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "tmp%12#0"
      ]
    },
    "5618": {
      "op": "frame_bury 0"
    },
    "5620": {
      "retsub": true,
      "op": "retsub"
    },
    "5621": {
      "block": "maxWithdrawableCollateralLST_after_if_else@2",
      "stack_in": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ],
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5622": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5625": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5626": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5628": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "5630": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0",
        "40"
      ]
    },
    "5632": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "tmp%15#0"
      ]
    },
    "5633": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#0",
        "lstAppId#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "tmp%15#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5635": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5638": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "currCollatUSD#0"
      ]
    },
    "5639": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5641": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtBase#0"
      ]
    },
    "5643": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0"
      ]
    },
    "5646": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "5647": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0"
      ]
    },
    "5648": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0"
      ]
    },
    "5649": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "5651": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5652": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0"
      ]
    },
    "5653": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5654": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5655": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5657": {
      "op": "<=",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "tmp%16#0"
      ]
    },
    "5658": {
      "op": "bz maxWithdrawableCollateralLST_after_if_else@4",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0"
      ]
    },
    "5661": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "0"
      ]
    },
    "5662": {
      "op": "frame_bury 0"
    },
    "5664": {
      "retsub": true,
      "op": "retsub"
    },
    "5665": {
      "block": "maxWithdrawableCollateralLST_after_if_else@4",
      "stack_in": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5667": {
      "op": "frame_dig 2",
      "defined_out": [
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5669": {
      "op": "-",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5670": {
      "op": "itxn_begin"
    },
    "5671": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "5673": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5675": {
      "op": "frame_dig -1",
      "defined_out": [
        "currCollatUSD#0",
        "lstAppId#0 (copy)",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5677": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5679": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "appl"
      ]
    },
    "5681": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5683": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "1000"
      ]
    },
    "5684": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5686": {
      "op": "itxn_submit"
    },
    "5687": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0"
      ]
    },
    "5689": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5690": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "tmp%17#0"
      ]
    },
    "5693": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "awst_tmp%0#0"
      ]
    },
    "5694": {
      "op": "extract 0 4",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "5697": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "5698": {
      "op": "==",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "5699": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0"
      ]
    },
    "5700": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5701": {
      "op": "itxn_begin"
    },
    "5702": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "5704": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5706": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5708": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5710": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "appl"
      ]
    },
    "5712": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5714": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "1000"
      ]
    },
    "5715": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5717": {
      "op": "itxn_submit"
    },
    "5718": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0"
      ]
    },
    "5720": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "5721": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "tmp%21#0"
      ]
    },
    "5724": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "awst_tmp%1#0"
      ]
    },
    "5725": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "5728": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "5729": {
      "op": "==",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "5730": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0"
      ]
    },
    "5731": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0"
      ]
    },
    "5732": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\""
      ]
    },
    "5734": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5736": {
      "op": "concat",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%0#1",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%0#1"
      ]
    },
    "5737": {
      "op": "box_get",
      "defined_out": [
        "ac#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "maybe_exists%0#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0",
        "maybe_exists%0#0"
      ]
    },
    "5738": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0"
      ]
    },
    "5739": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%26#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%26#0"
      ]
    },
    "5742": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0"
      ]
    },
    "5745": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0"
      ]
    },
    "5747": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0",
        "1000000"
      ]
    },
    "5749": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "hU#0",
        "lU#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "hU#0",
        "lU#0"
      ]
    },
    "5750": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "hU#0",
        "lU#0",
        "basePrice#0"
      ]
    },
    "5752": {
      "op": "divw",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUnderlying#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "removableUnderlying#0"
      ]
    },
    "5753": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "totalDeposits#0",
        "removableUnderlying#0",
        "circulatingLST#0"
      ]
    },
    "5755": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "hL#0",
        "lL#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "totalDeposits#0",
        "hL#0",
        "lL#0"
      ]
    },
    "5756": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "hL#0",
        "lL#0",
        "totalDeposits#0"
      ]
    },
    "5758": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableLST#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableLST#0"
      ]
    },
    "5759": {
      "op": "frame_bury 0"
    },
    "5761": {
      "retsub": true,
      "op": "retsub"
    },
    "5762": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawCollateral",
      "params": {
        "amountLST#0": "uint64",
        "collateralTokenId#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "withdrawCollateral",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "5765": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1"
      ]
    },
    "5766": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ]
    },
    "5768": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5769": {
      "op": "frame_dig -3",
      "defined_out": [
        "amountLST#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "amountLST#0 (copy)"
      ]
    },
    "5771": {
      "error": "ZERO_AMOUNT",
      "op": "assert // ZERO_AMOUNT",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5772": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0"
      ]
    },
    "5773": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5775": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5776": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0"
      ]
    },
    "5777": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0"
      ]
    },
    "5778": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0",
        "1"
      ]
    },
    "5779": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%2#0"
      ]
    },
    "5780": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5781": {
      "op": "txn Sender"
    },
    "5783": {
      "op": "bytec 6 // \"loan_record\""
    },
    "5785": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "5787": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0"
      ]
    },
    "5788": {
      "op": "dupn 2",
      "defined_out": [
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5790": {
      "op": "box_len",
      "defined_out": [
        "borrower#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5791": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_exists%1#0"
      ]
    },
    "5793": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "5794": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "borrower#0",
        "tmp%3#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "{accrueMarket}"
      ]
    },
    "5797": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "5798": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5799": {
      "op": "box_get",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "loan#0",
        "maybe_exists%2#0"
      ]
    },
    "5800": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_exists%2#0",
        "loan#0"
      ]
    },
    "5801": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_exists%2#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5802": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "loan#0",
        "maybe_exists%2#0",
        "loan#0"
      ]
    },
    "5804": {
      "op": "cover 3",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0",
        "maybe_exists%2#0"
      ]
    },
    "5806": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0"
      ]
    },
    "5807": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "loan#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5808": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0"
      ]
    },
    "5811": {
      "op": "cover 2",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "loan#0"
      ]
    },
    "5813": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "loan#0",
        "32"
      ]
    },
    "5815": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "5816": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrower#0",
        "collateralTokenId#0 (copy)",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "tmp%6#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5818": {
      "op": "==",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "tmp%7#0"
      ]
    },
    "5819": {
      "error": "WRONG_COLLATERAL",
      "op": "assert // WRONG_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "5820": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5822": {
      "op": "itob",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "acKey#0"
      ]
    },
    "5823": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "acKey#0",
        "acKey#0"
      ]
    },
    "5824": {
      "op": "cover 2",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acKey#0"
      ]
    },
    "5826": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acKey#0",
        "\"accepted_collaterals\""
      ]
    },
    "5828": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "\"accepted_collaterals\"",
        "acKey#0"
      ]
    },
    "5829": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0"
      ]
    },
    "5830": {
      "op": "dup",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "5831": {
      "op": "box_len",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5832": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0",
        "maybe_exists%3#0"
      ]
    },
    "5834": {
      "error": "BAD_COLLATERAL",
      "op": "assert // BAD_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0"
      ]
    },
    "5835": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "acVal#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%4#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acVal#0",
        "maybe_exists%4#0"
      ]
    },
    "5836": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acVal#0"
      ]
    },
    "5837": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acVal#0",
        "32"
      ]
    },
    "5839": {
      "op": "extract_uint64",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%11#0"
      ]
    },
    "5840": {
      "op": "frame_dig -1",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "lstAppId#0 (copy)",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%11#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5842": {
      "op": "==",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%12#0"
      ]
    },
    "5843": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5844": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5845": {
      "op": "box_len",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "5846": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_exists%0#0"
      ]
    },
    "5848": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5849": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "0"
      ]
    },
    "5850": {
      "op": "bytec 5 // \"contract_state\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5852": {
      "op": "app_global_get_ex",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%1#0",
        "maybe_value%1#1",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "5853": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_value%1#1"
      ]
    },
    "5854": {
      "op": "btoi",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%1#0"
      ]
    },
    "5855": {
      "op": "intc_1 // 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%1#0",
        "1"
      ]
    },
    "5856": {
      "op": "==",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "5857": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5858": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "{accrueMarket}"
      ]
    },
    "5861": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5862": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5863": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0"
      ]
    },
    "5864": {
      "op": "dup",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5865": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "5868": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateralTokenId#1",
        "\"accepted_collaterals\""
      ]
    },
    "5870": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#1"
      ]
    },
    "5871": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "loan#0",
        "rec#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%0#0"
      ]
    },
    "5872": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateral#0",
        "collateralTokenId#1",
        "loan#0",
        "maybe_exists%0#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5873": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateral#0"
      ]
    },
    "5874": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateral#0",
        "32"
      ]
    },
    "5876": {
      "op": "extract_uint64",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%6#0"
      ]
    },
    "5877": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%6#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5879": {
      "op": "==",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%7#0"
      ]
    },
    "5880": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0"
      ]
    },
    "5881": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5884": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5885": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5886": {
      "op": "cover 2",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5888": {
      "op": "bnz withdrawCollateral_after_if_else@4",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5891": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "40"
      ]
    },
    "5893": {
      "op": "extract_uint64",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "maxSafe#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "5894": {
      "block": "withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "amountLST#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0",
        "amountLST#0 (copy)"
      ]
    },
    "5896": {
      "op": ">=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%13#0"
      ]
    },
    "5897": {
      "error": "EXCEEDS_MAX_SAFE",
      "op": "assert // EXCEEDS_MAX_SAFE",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5898": {
      "op": "frame_dig 5",
      "defined_out": [
        "loan#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0"
      ]
    },
    "5900": {
      "op": "dup",
      "defined_out": [
        "loan#0",
        "loan#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5901": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "loan#0",
        "loan#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "loan#0 (copy)",
        "40"
      ]
    },
    "5903": {
      "op": "extract_uint64",
      "defined_out": [
        "loan#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0"
      ]
    },
    "5904": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "amountLST#0 (copy)"
      ]
    },
    "5906": {
      "op": "dig 1",
      "defined_out": [
        "amountLST#0 (copy)",
        "loan#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "amountLST#0 (copy)",
        "tmp%15#0 (copy)"
      ]
    },
    "5908": {
      "op": "<",
      "defined_out": [
        "loan#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "5909": {
      "error": "INSUFFICIENT_COLLATERAL",
      "op": "assert // INSUFFICIENT_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0"
      ]
    },
    "5910": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "amountLST#0 (copy)"
      ]
    },
    "5912": {
      "op": "-",
      "defined_out": [
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5913": {
      "op": "itxn_begin"
    },
    "5914": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "amountLST#0 (copy)"
      ]
    },
    "5916": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5918": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5920": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5922": {
      "op": "frame_dig 3",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "borrower#0"
      ]
    },
    "5924": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "borrower#0 (copy)",
        "borrower#0 (copy)"
      ]
    },
    "5925": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "borrower#0 (copy)"
      ]
    },
    "5927": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5929": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "4"
      ]
    },
    "5931": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5933": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "1000"
      ]
    },
    "5934": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5936": {
      "op": "itxn_submit"
    },
    "5937": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0"
      ]
    },
    "5938": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "5939": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "5940": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5941": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0"
      ]
    },
    "5942": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "amountLST#0 (copy)"
      ]
    },
    "5944": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%3#0"
      ]
    },
    "5945": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%3#0",
        "to_encode%0#0"
      ]
    },
    "5947": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "5948": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "5949": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "0x03",
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "0x03"
      ]
    },
    "5952": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%4#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "5953": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%4#0"
      ]
    },
    "5954": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5955": {
      "op": "dig 4",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "loan#0 (copy)"
      ]
    },
    "5957": {
      "error": "Index access is out of bounds",
      "op": "extract 73 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0"
      ]
    },
    "5960": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "loan#0"
      ]
    },
    "5962": {
      "error": "Index access is out of bounds",
      "op": "extract 81 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "5965": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "borrower#0"
      ]
    },
    "5967": {
      "op": "frame_dig 7",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "borrower#0",
        "acKey#0"
      ]
    },
    "5969": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "5970": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%2#0"
      ]
    },
    "5972": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "5973": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5975": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "5976": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%10#0",
        "maybe_value%5#0"
      ]
    },
    "5978": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0",
        "loan#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "5979": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%20#0",
        "encoded_tuple_buffer%11#0",
        "tmp%19#0"
      ]
    },
    "5981": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%12#0",
        "loan#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%20#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "5982": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "encoded_tuple_buffer%12#0",
        "tmp%20#0"
      ]
    },
    "5983": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "newRec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "newRec#0"
      ]
    },
    "5984": {
      "op": "frame_dig 4",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "newRec#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "newRec#0",
        "tmp%3#0"
      ]
    },
    "5986": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%3#0",
        "newRec#0"
      ]
    },
    "5987": {
      "op": "box_put",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5988": {
      "op": "frame_dig 6",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%5#0"
      ]
    },
    "5990": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%5#0",
        "amountLST#0 (copy)"
      ]
    },
    "5992": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5995": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "new_state_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "new_state_value%0#0"
      ]
    },
    "5998": {
      "op": "bytec 13 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "acKey#0",
        "borrower#0",
        "loan#0",
        "new_state_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "6000": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "6001": {
      "op": "app_global_put",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "6002": {
      "retsub": true,
      "op": "retsub"
    },
    "6003": {
      "block": "withdrawCollateral_after_if_else@4",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ],
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6004": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "6007": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#1",
        "collateralTokenId#1 (copy)"
      ]
    },
    "6008": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "6010": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0"
      ]
    },
    "6012": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0",
        "40"
      ]
    },
    "6014": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#1",
        "tmp%13#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "tmp%13#1"
      ]
    },
    "6015": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#1",
        "lstAppId#0 (copy)",
        "tmp%13#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "tmp%13#1",
        "lstAppId#0 (copy)"
      ]
    },
    "6017": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "6020": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "currCollatUSD#0"
      ]
    },
    "6021": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "6023": {
      "op": "frame_dig 8",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtBase#0"
      ]
    },
    "6025": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0"
      ]
    },
    "6028": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "6029": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0"
      ]
    },
    "6030": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0"
      ]
    },
    "6031": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "6033": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "6034": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0"
      ]
    },
    "6035": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6036": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6037": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6039": {
      "op": "<=",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0",
        "tmp%14#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%14#1"
      ]
    },
    "6040": {
      "op": "bz withdrawCollateral_after_if_else@6",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "6043": {
      "op": "intc_0 // 0",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "maxSafe#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "6044": {
      "op": "b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7"
    },
    "6047": {
      "block": "withdrawCollateral_after_if_else@6",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "6049": {
      "op": "frame_dig 2",
      "defined_out": [
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6051": {
      "op": "-",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6052": {
      "op": "itxn_begin"
    },
    "6053": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6055": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6057": {
      "op": "frame_dig -1",
      "defined_out": [
        "currCollatUSD#0",
        "lstAppId#0 (copy)",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6059": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6061": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "appl"
      ]
    },
    "6063": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6065": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "1000"
      ]
    },
    "6066": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6068": {
      "op": "itxn_submit"
    },
    "6069": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0"
      ]
    },
    "6071": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6072": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "tmp%15#1"
      ]
    },
    "6075": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "awst_tmp%0#0"
      ]
    },
    "6076": {
      "op": "extract 0 4",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1",
        "tmp%16#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "tmp%16#1"
      ]
    },
    "6079": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1",
        "tmp%16#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "tmp%16#1",
        "0x151f7c75"
      ]
    },
    "6080": {
      "op": "==",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1",
        "tmp%17#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "tmp%17#1"
      ]
    },
    "6081": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1"
      ]
    },
    "6082": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6083": {
      "op": "itxn_begin"
    },
    "6084": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6086": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6088": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6090": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6092": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "appl"
      ]
    },
    "6094": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6096": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "1000"
      ]
    },
    "6097": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6099": {
      "op": "itxn_submit"
    },
    "6100": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0"
      ]
    },
    "6102": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6103": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ]
    },
    "6106": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "awst_tmp%1#0"
      ]
    },
    "6107": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "6110": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "6111": {
      "op": "==",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0",
        "tmp%21#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%21#1"
      ]
    },
    "6112": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0"
      ]
    },
    "6113": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0"
      ]
    },
    "6114": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\""
      ]
    },
    "6116": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#1"
      ]
    },
    "6118": {
      "op": "concat",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%0#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%0#0"
      ]
    },
    "6119": {
      "op": "box_get",
      "defined_out": [
        "ac#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "maybe_exists%0#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0",
        "maybe_exists%0#0"
      ]
    },
    "6120": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0"
      ]
    },
    "6121": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%24#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%24#0"
      ]
    },
    "6124": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0"
      ]
    },
    "6127": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0"
      ]
    },
    "6129": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0",
        "1000000"
      ]
    },
    "6131": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "hU#0",
        "lU#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "hU#0",
        "lU#0"
      ]
    },
    "6132": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "hU#0",
        "lU#0",
        "basePrice#0"
      ]
    },
    "6134": {
      "op": "divw",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUnderlying#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "removableUnderlying#0"
      ]
    },
    "6135": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "totalDeposits#0",
        "removableUnderlying#0",
        "circulatingLST#0"
      ]
    },
    "6137": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "hL#0",
        "lL#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "totalDeposits#0",
        "hL#0",
        "lL#0"
      ]
    },
    "6138": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "hL#0",
        "lL#0",
        "totalDeposits#0"
      ]
    },
    "6140": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "maxSafe#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "6141": {
      "op": "b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7"
    },
    "6144": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "params": {},
      "block": "getCirculatingLST",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6145": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "6147": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6148": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "6149": {
      "retsub": true,
      "op": "retsub"
    },
    "6150": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "params": {},
      "block": "getTotalDeposits",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6151": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "6152": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6153": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "6154": {
      "retsub": true,
      "op": "retsub"
    },
    "6155": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "params": {},
      "block": "getAcceptedCollateralsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6156": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "6158": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6159": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "6160": {
      "retsub": true,
      "op": "retsub"
    },
    "6161": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidatePartialAlgo",
      "params": {
        "debtor#0": "bytes",
        "repayPay#0": "uint64",
        "repayBaseAmount#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "liquidatePartialAlgo",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "6164": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "6165": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0"
      ]
    },
    "6167": {
      "op": "dupn 14",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0"
      ]
    },
    "6169": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "0"
      ]
    },
    "6170": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6171": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6172": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "maybe_value%0#0"
      ]
    },
    "6173": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%0#0"
      ]
    },
    "6174": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%1#0"
      ]
    },
    "6175": {
      "error": "BASE_NOT_ALGO",
      "op": "assert // BASE_NOT_ALGO",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0"
      ]
    },
    "6176": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "0"
      ]
    },
    "6177": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "0",
        "\"contract_state\""
      ]
    },
    "6179": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6180": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "maybe_value%1#0"
      ]
    },
    "6181": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%2#0"
      ]
    },
    "6182": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%2#0",
        "1"
      ]
    },
    "6183": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%3#0"
      ]
    },
    "6184": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0"
      ]
    },
    "6185": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "\"loan_record\""
      ]
    },
    "6187": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "6189": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0"
      ]
    },
    "6190": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "6192": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "tmp%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6193": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "tmp%4#0",
        "maybe_exists%2#0"
      ]
    },
    "6195": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "6196": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%4#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "tmp%4#0",
        "{accrueMarket}"
      ]
    },
    "6199": {
      "op": "pop",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "6200": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "rec#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "maybe_exists%3#0"
      ]
    },
    "6201": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "maybe_exists%3#0",
        "rec#0"
      ]
    },
    "6202": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "maybe_exists%3#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6203": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%3#0",
        "rec#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "rec#0",
        "maybe_exists%3#0"
      ]
    },
    "6205": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "rec#0"
      ]
    },
    "6206": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6207": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collTok#0",
        "rec#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "rec#0",
        "collTok#0"
      ]
    },
    "6210": {
      "op": "swap",
      "defined_out": [
        "collTok#0",
        "rec#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "rec#0"
      ]
    },
    "6211": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6212": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "6214": {
      "op": "extract_uint64",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "rec#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "collLSTBal#0"
      ]
    },
    "6215": {
      "op": "swap",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "rec#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#0"
      ]
    },
    "6216": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "liveDebt#0",
        "rec#1"
      ]
    },
    "6219": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6220": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6221": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6222": {
      "op": "frame_dig -2",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "repayBaseAmount#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6224": {
      "op": "bz liquidatePartialAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6227": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6229": {
      "op": "frame_dig 21",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "liveDebt#0"
      ]
    },
    "6231": {
      "op": "<=",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%9#0"
      ]
    },
    "6232": {
      "op": "bz liquidatePartialAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6235": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ]
    },
    "6236": {
      "block": "liquidatePartialAlgo_bool_merge@4",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ],
      "error": "BAD_REPAY",
      "op": "assert // BAD_REPAY",
      "defined_out": [],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6237": {
      "op": "frame_dig 18",
      "defined_out": [
        "collTok#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0"
      ]
    },
    "6239": {
      "op": "frame_dig 19",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "collLSTBal#0"
      ]
    },
    "6241": {
      "op": "frame_dig -1",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "collLSTBal#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6243": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0"
      ]
    },
    "6246": {
      "op": "frame_dig 21",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "liveDebt#0"
      ]
    },
    "6248": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "6251": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "6252": {
      "error": "BAD_DEBT_USD",
      "op": "assert // BAD_DEBT_USD",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "6253": {
      "op": "dig 1",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0 (copy)"
      ]
    },
    "6255": {
      "error": "BAD_COLLATERAL_USD",
      "op": "assert // BAD_COLLATERAL_USD",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "6256": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "6257": {
      "op": "mulw",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "hLTV#0",
        "lLTV#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "hLTV#0",
        "lLTV#0"
      ]
    },
    "6258": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLTV#0",
        "lLTV#0",
        "collateralUSD#0"
      ]
    },
    "6260": {
      "op": "divw",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "ltvBps#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "ltvBps#0"
      ]
    },
    "6261": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "ltvBps#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "ltvBps#0",
        "0"
      ]
    },
    "6262": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "ltvBps#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "ltvBps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "6264": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "ltvBps#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "ltvBps#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "6265": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "ltvBps#0",
        "maybe_value%4#0"
      ]
    },
    "6266": {
      "op": ">=",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%12#0"
      ]
    },
    "6267": {
      "error": "NOT_LIQUIDATABLE",
      "op": "assert // NOT_LIQUIDATABLE",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6268": {
      "op": "frame_dig -3",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "repayPay#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayPay#0 (copy)"
      ]
    },
    "6270": {
      "op": "gtxns Sender",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#0"
      ]
    },
    "6272": {
      "op": "txn Sender",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "6274": {
      "op": "==",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%15#0"
      ]
    },
    "6275": {
      "op": "bz liquidatePartialAlgo_bool_false@8",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6278": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayPay#0 (copy)"
      ]
    },
    "6280": {
      "op": "gtxns Receiver",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%16#0"
      ]
    },
    "6282": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "6284": {
      "op": "==",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%18#0"
      ]
    },
    "6285": {
      "op": "bz liquidatePartialAlgo_bool_false@8",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6288": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayPay#0 (copy)"
      ]
    },
    "6290": {
      "op": "gtxns Amount",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%19#0"
      ]
    },
    "6292": {
      "op": "frame_dig -2",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%19#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6294": {
      "op": "==",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%20#0"
      ]
    },
    "6295": {
      "op": "bz liquidatePartialAlgo_bool_false@8",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6298": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ]
    },
    "6299": {
      "block": "liquidatePartialAlgo_bool_merge@9",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6300": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6301": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6302": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "6303": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%5#0"
      ]
    },
    "6304": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "basePrice#0"
      ]
    },
    "6307": {
      "op": "frame_bury 1",
      "defined_out": [
        "basePrice#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6309": {
      "op": "frame_dig 21",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6311": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ]
    },
    "6312": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "basePrice#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "2"
      ]
    },
    "6314": {
      "op": "/",
      "defined_out": [
        "basePrice#0",
        "closeFactorHalf#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "closeFactorHalf#0"
      ]
    },
    "6315": {
      "op": "dup2",
      "defined_out": [
        "basePrice#0",
        "closeFactorHalf#0",
        "closeFactorHalf#0 (copy)",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "closeFactorHalf#0",
        "liveDebt#0 (copy)",
        "closeFactorHalf#0 (copy)"
      ]
    },
    "6316": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "closeFactorHalf#0 (copy)",
        "closeFactorHalf#0"
      ]
    },
    "6318": {
      "op": "select",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "6319": {
      "op": "frame_bury 5",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6321": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "0"
      ]
    },
    "6322": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "0",
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "0",
        "\"liq_bonus_bps\""
      ]
    },
    "6324": {
      "op": "app_global_get_ex",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "maybe_exists%6#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "bonusBps#0",
        "maybe_exists%6#0"
      ]
    },
    "6325": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "maybe_exists%6#0",
        "bonusBps#0"
      ]
    },
    "6326": {
      "op": "frame_bury 2",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "maybe_exists%6#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "maybe_exists%6#0"
      ]
    },
    "6328": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6329": {
      "op": "frame_dig -2",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6331": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0"
      ]
    },
    "6332": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0",
        "isFullRepayRequest#0"
      ]
    },
    "6333": {
      "op": "frame_bury 4",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0"
      ]
    },
    "6335": {
      "op": "frame_dig -2",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0",
        "repayCandidate#2"
      ]
    },
    "6337": {
      "op": "frame_bury 10",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0"
      ]
    },
    "6339": {
      "op": "bnz liquidatePartialAlgo_after_if_else@12",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6342": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6344": {
      "op": "frame_dig 5",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0"
      ]
    },
    "6346": {
      "op": ">",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayCandidate#2",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%22#0"
      ]
    },
    "6347": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%22#0",
        "repayCandidate#2"
      ]
    },
    "6349": {
      "op": "frame_bury 10",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%22#0"
      ]
    },
    "6351": {
      "op": "bz liquidatePartialAlgo_after_if_else@12",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6354": {
      "op": "frame_dig 5",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2"
      ]
    },
    "6356": {
      "op": "frame_bury 10",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6358": {
      "block": "liquidatePartialAlgo_after_if_else@12",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2"
      ]
    },
    "6360": {
      "op": "frame_dig 1",
      "defined_out": [
        "basePrice#0",
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "basePrice#0"
      ]
    },
    "6362": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "hRU#0",
        "lRU#0",
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRU#0",
        "lRU#0"
      ]
    },
    "6363": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "hRU#0",
        "lRU#0",
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRU#0",
        "lRU#0",
        "1000000"
      ]
    },
    "6365": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "repayCandidate#2",
        "repayUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0"
      ]
    },
    "6366": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "basePrice#0",
        "repayCandidate#2",
        "repayUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "10000"
      ]
    },
    "6367": {
      "op": "frame_dig 2",
      "defined_out": [
        "10000",
        "basePrice#0",
        "bonusBps#0",
        "repayCandidate#2",
        "repayUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "10000",
        "bonusBps#0"
      ]
    },
    "6369": {
      "op": "+",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "repayCandidate#2",
        "repayUSD#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "tmp%23#0"
      ]
    },
    "6370": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "tmp%23#0",
        "tmp%23#0"
      ]
    },
    "6371": {
      "op": "frame_bury 14",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "repayCandidate#2",
        "repayUSD#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "tmp%23#0"
      ]
    },
    "6373": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "hSZ#0",
        "lSZ#0",
        "repayCandidate#2",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSZ#0",
        "lSZ#0"
      ]
    },
    "6374": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSZ#0",
        "lSZ#0",
        "10000"
      ]
    },
    "6375": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0"
      ]
    },
    "6376": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "basePrice#0",
        "bonusBps#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "\"accepted_collaterals\""
      ]
    },
    "6378": {
      "op": "frame_dig 18",
      "defined_out": [
        "\"accepted_collaterals\"",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "\"accepted_collaterals\"",
        "collTok#0"
      ]
    },
    "6380": {
      "op": "concat",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3"
      ]
    },
    "6381": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%0#3"
      ]
    },
    "6382": {
      "op": "frame_bury 0",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3"
      ]
    },
    "6384": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "6385": {
      "op": "box_get",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "maybe_exists%0#0",
        "maybe_value%0#2",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "6386": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3",
        "maybe_value%0#2"
      ]
    },
    "6387": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%1#1",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%1#1"
      ]
    },
    "6390": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%23#0",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3",
        "underlyingPrice#0"
      ]
    },
    "6393": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#3",
        "underlyingPrice#0",
        "seizeUSD#0"
      ]
    },
    "6395": {
      "op": "intc 4 // 1000000",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#3",
        "underlyingPrice#0",
        "seizeUSD#0",
        "1000000"
      ]
    },
    "6397": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "hUnd#0",
        "lUnd#0",
        "repayCandidate#2",
        "tmp%0#3",
        "tmp%23#0",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#3",
        "underlyingPrice#0",
        "hUnd#0",
        "lUnd#0"
      ]
    },
    "6398": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#3",
        "hUnd#0",
        "lUnd#0",
        "underlyingPrice#0"
      ]
    },
    "6400": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#3",
        "seizeUnderlying#0"
      ]
    },
    "6401": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%0#3"
      ]
    },
    "6402": {
      "op": "box_get",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "collateral#0",
        "maybe_exists%0#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6403": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "collateral#0"
      ]
    },
    "6404": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "collateral#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "collateral#0",
        "32"
      ]
    },
    "6406": {
      "op": "extract_uint64",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%3#1"
      ]
    },
    "6407": {
      "op": "frame_dig -1",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "lstAppId#0 (copy)",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%3#1",
        "lstAppId#0 (copy)"
      ]
    },
    "6409": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%4#1"
      ]
    },
    "6410": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6411": {
      "op": "itxn_begin"
    },
    "6412": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6414": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6416": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6418": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6420": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "appl"
      ]
    },
    "6422": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6424": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "1000"
      ]
    },
    "6425": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6427": {
      "op": "itxn_submit"
    },
    "6428": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "awst_tmp%0#0"
      ]
    },
    "6430": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6431": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "awst_tmp%0#0",
        "tmp%5#1"
      ]
    },
    "6434": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "awst_tmp%0#0"
      ]
    },
    "6435": {
      "op": "extract 0 4",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%6#1"
      ]
    },
    "6438": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%6#1",
        "0x151f7c75"
      ]
    },
    "6439": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0",
        "tmp%5#1",
        "tmp%7#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%7#1"
      ]
    },
    "6440": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1"
      ]
    },
    "6441": {
      "op": "btoi",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6442": {
      "op": "itxn_begin"
    },
    "6443": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6445": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6447": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6449": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6451": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "appl"
      ]
    },
    "6453": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6455": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "1000"
      ]
    },
    "6456": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6458": {
      "op": "itxn_submit"
    },
    "6459": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0"
      ]
    },
    "6461": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6462": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0",
        "tmp%9#1"
      ]
    },
    "6465": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "awst_tmp%1#0"
      ]
    },
    "6466": {
      "op": "extract 0 4",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%10#1",
        "tmp%23#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "tmp%10#1"
      ]
    },
    "6469": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "tmp%10#1",
        "0x151f7c75"
      ]
    },
    "6470": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%11#1",
        "tmp%23#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "tmp%11#1"
      ]
    },
    "6471": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1"
      ]
    },
    "6472": {
      "op": "btoi",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%23#0",
        "total#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "total#0"
      ]
    },
    "6473": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "total#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6475": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "hL#0",
        "lL#0",
        "repayCandidate#2",
        "tmp%0#3",
        "tmp%23#0",
        "total#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "total#0",
        "hL#0",
        "lL#0"
      ]
    },
    "6476": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hL#0",
        "lL#0",
        "total#0"
      ]
    },
    "6478": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6479": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "seizeLST#1"
      ]
    },
    "6480": {
      "op": "frame_bury 13",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6482": {
      "op": "frame_dig 19",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collLSTBal#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "collLSTBal#0"
      ]
    },
    "6484": {
      "op": ">",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collLSTBal#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%13#1",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#1"
      ]
    },
    "6485": {
      "op": "bz liquidatePartialAlgo_after_if_else@36",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6488": {
      "op": "frame_dig 19",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6490": {
      "op": "frame_bury 13",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6492": {
      "block": "liquidatePartialAlgo_after_if_else@36",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 13",
      "defined_out": [
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6494": {
      "op": "dup",
      "defined_out": [
        "seizeLST#1",
        "seizeLST#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "seizeLST#1 (copy)"
      ]
    },
    "6495": {
      "error": "NOTHING_TO_SEIZE",
      "op": "assert // NOTHING_TO_SEIZE",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6496": {
      "op": "bnz liquidatePartialAlgo_after_if_else@40",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6499": {
      "op": "intc_0 // 0",
      "defined_out": [
        "repaySupported#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repaySupported#0"
      ]
    },
    "6500": {
      "op": "frame_bury 11",
      "defined_out": [
        "repaySupported#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6502": {
      "block": "liquidatePartialAlgo_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayBaseFromSeizedLST@41",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 11",
      "defined_out": [
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repaySupported#0"
      ]
    },
    "6504": {
      "op": "frame_dig 21",
      "defined_out": [
        "liveDebt#0",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repaySupported#0",
        "liveDebt#0"
      ]
    },
    "6506": {
      "op": ">",
      "defined_out": [
        "liveDebt#0",
        "repaySupported#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%25#0"
      ]
    },
    "6507": {
      "op": "bz liquidatePartialAlgo_after_if_else@14",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6510": {
      "op": "frame_dig 21",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repaySupported#0"
      ]
    },
    "6512": {
      "op": "frame_bury 11",
      "defined_out": [
        "liveDebt#0",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6514": {
      "block": "liquidatePartialAlgo_after_if_else@14",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 13",
      "defined_out": [
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6516": {
      "op": "frame_dig 19",
      "defined_out": [
        "collLSTBal#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "collLSTBal#0"
      ]
    },
    "6518": {
      "op": "==",
      "defined_out": [
        "collLSTBal#0",
        "seizeLST#1",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0"
      ]
    },
    "6519": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%26#0"
      ]
    },
    "6520": {
      "op": "frame_bury 15",
      "defined_out": [
        "collLSTBal#0",
        "seizeLST#1",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0"
      ]
    },
    "6522": {
      "op": "bz liquidatePartialAlgo_after_if_else@16",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6525": {
      "op": "frame_dig -2",
      "defined_out": [
        "collLSTBal#0",
        "repayCandidate#2",
        "seizeLST#1",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2"
      ]
    },
    "6527": {
      "op": "frame_bury 10",
      "defined_out": [
        "collLSTBal#0",
        "repayCandidate#2",
        "seizeLST#1",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6529": {
      "block": "liquidatePartialAlgo_after_if_else@16",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2"
      ]
    },
    "6531": {
      "op": "dup",
      "defined_out": [
        "repayCandidate#2",
        "repayCandidate#2 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "repayCandidate#2 (copy)"
      ]
    },
    "6532": {
      "op": "frame_dig 11",
      "defined_out": [
        "repayCandidate#2",
        "repayCandidate#2 (copy)",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "repayCandidate#2 (copy)",
        "repaySupported#0"
      ]
    },
    "6534": {
      "op": "dup",
      "defined_out": [
        "repayCandidate#2",
        "repayCandidate#2 (copy)",
        "repaySupported#0",
        "repaySupported#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "repayCandidate#2 (copy)",
        "repaySupported#0 (copy)",
        "repaySupported#0 (copy)"
      ]
    },
    "6535": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayCandidate#2 (copy)",
        "repaySupported#0 (copy)"
      ]
    },
    "6537": {
      "op": "<=",
      "defined_out": [
        "repayCandidate#2",
        "repaySupported#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "repaySupported#0",
        "tmp%27#0"
      ]
    },
    "6538": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "tmp%27#0",
        "repaySupported#0"
      ]
    },
    "6539": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repaySupported#0",
        "repayCandidate#2",
        "tmp%27#0"
      ]
    },
    "6541": {
      "op": "select",
      "defined_out": [
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0"
      ]
    },
    "6542": {
      "op": "frame_bury 7",
      "defined_out": [
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6544": {
      "op": "frame_dig 4",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0"
      ]
    },
    "6546": {
      "op": "bnz liquidatePartialAlgo_after_if_else@20",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6549": {
      "op": "frame_dig 15",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0"
      ]
    },
    "6551": {
      "op": "bz liquidatePartialAlgo_after_if_else@20",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6554": {
      "op": "frame_dig 7",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0"
      ]
    },
    "6556": {
      "op": "frame_dig 21",
      "defined_out": [
        "isFullRepayRequest#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "liveDebt#0"
      ]
    },
    "6558": {
      "op": "<",
      "defined_out": [
        "isFullRepayRequest#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0",
        "tmp%26#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%29#0"
      ]
    },
    "6559": {
      "op": "!",
      "defined_out": [
        "isFullRepayRequest#0",
        "liveDebt#0",
        "not%tmp%29#0",
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "not%tmp%29#0"
      ]
    },
    "6560": {
      "error": "FULL_REPAY_REQUIRED",
      "op": "assert // FULL_REPAY_REQUIRED",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6561": {
      "block": "liquidatePartialAlgo_after_if_else@20",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "proposedRepayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0"
      ]
    },
    "6563": {
      "op": "frame_dig -2",
      "defined_out": [
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6565": {
      "op": "frame_dig 4",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)",
        "isFullRepayRequest#0"
      ]
    },
    "6567": {
      "op": "dup",
      "defined_out": [
        "isFullRepayRequest#0",
        "isFullRepayRequest#0 (copy)",
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)",
        "isFullRepayRequest#0 (copy)",
        "isFullRepayRequest#0 (copy)"
      ]
    },
    "6568": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)",
        "isFullRepayRequest#0 (copy)"
      ]
    },
    "6570": {
      "op": "select",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0",
        "repayUsed#0"
      ]
    },
    "6571": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0",
        "repayUsed#0",
        "repayUsed#0"
      ]
    },
    "6572": {
      "op": "frame_bury 12",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0",
        "repayUsed#0"
      ]
    },
    "6574": {
      "error": "ZERO_REPAY_USED",
      "op": "assert // ZERO_REPAY_USED",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0"
      ]
    },
    "6575": {
      "op": "bz liquidatePartialAlgo_ternary_false@22",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6578": {
      "op": "intc_0 // 0",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6579": {
      "op": "frame_bury 8",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6581": {
      "block": "liquidatePartialAlgo_ternary_merge@23",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "itxn_begin"
    },
    "6582": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6584": {
      "op": "frame_dig 17",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "6586": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "32"
      ]
    },
    "6588": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6589": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6590": {
      "op": "frame_bury 3",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6592": {
      "op": "frame_dig 13",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "seizeLST#1"
      ]
    },
    "6594": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6596": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6598": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6600": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "4"
      ]
    },
    "6602": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6604": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "1000"
      ]
    },
    "6605": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6607": {
      "op": "itxn_submit"
    },
    "6608": {
      "op": "frame_dig 8",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "refundAmount#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6610": {
      "op": "bz liquidatePartialAlgo_after_if_else@27",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6613": {
      "op": "itxn_begin"
    },
    "6614": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "rec#0",
        "refundAmount#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "6616": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6618": {
      "op": "frame_dig 8",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6620": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "refundAmount#0",
        "refundAmount#0 (copy)",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "refundAmount#0 (copy)"
      ]
    },
    "6621": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6623": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "refundAmount#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "1"
      ]
    },
    "6624": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6626": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "1000"
      ]
    },
    "6627": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6629": {
      "op": "itxn_submit"
    },
    "6630": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6633": {
      "block": "liquidatePartialAlgo_after_if_else@27",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 19",
      "defined_out": [
        "collLSTBal#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collLSTBal#0"
      ]
    },
    "6635": {
      "op": "frame_dig 13",
      "defined_out": [
        "collLSTBal#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collLSTBal#0",
        "seizeLST#1"
      ]
    },
    "6637": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "seizeLST#1",
        "seizeLST#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collLSTBal#0",
        "seizeLST#1 (copy)",
        "seizeLST#1 (copy)"
      ]
    },
    "6638": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "collLSTBal#0",
        "seizeLST#1 (copy)"
      ]
    },
    "6640": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "remainingLST#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "remainingLST#0"
      ]
    },
    "6641": {
      "op": "frame_bury 9",
      "defined_out": [
        "collLSTBal#0",
        "remainingLST#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6643": {
      "op": "frame_dig 21",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "remainingLST#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "liveDebt#0"
      ]
    },
    "6645": {
      "op": "frame_dig 12",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "liveDebt#0",
        "repayUsed#0"
      ]
    },
    "6647": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "remainingLST#0",
        "repayUsed#0",
        "repayUsed#0 (copy)",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "liveDebt#0",
        "repayUsed#0 (copy)",
        "repayUsed#0 (copy)"
      ]
    },
    "6648": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "seizeLST#1",
        "liveDebt#0",
        "repayUsed#0 (copy)"
      ]
    },
    "6650": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "seizeLST#1",
        "newDebtBase#0"
      ]
    },
    "6651": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "seizeLST#1",
        "newDebtBase#0",
        "newDebtBase#0 (copy)"
      ]
    },
    "6652": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0",
        "seizeLST#1",
        "newDebtBase#0"
      ]
    },
    "6654": {
      "op": "frame_bury 6",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0",
        "seizeLST#1"
      ]
    },
    "6656": {
      "op": "frame_dig 18",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0",
        "seizeLST#1",
        "collTok#0"
      ]
    },
    "6658": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0",
        "collTok#0",
        "seizeLST#1"
      ]
    },
    "6659": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0"
      ]
    },
    "6662": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0",
        "0"
      ]
    },
    "6663": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "6665": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "6666": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0",
        "maybe_value%7#0"
      ]
    },
    "6667": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0",
        "maybe_value%7#0",
        "repayUsed#0 (copy)"
      ]
    },
    "6669": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "newDebtBase#0",
        "new_state_value%0#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0",
        "new_state_value%0#0"
      ]
    },
    "6670": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "6672": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "6673": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#0"
      ]
    },
    "6674": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0"
      ]
    },
    "6677": {
      "op": "bnz liquidatePartialAlgo_else_body@32",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6680": {
      "op": "frame_dig 9",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6682": {
      "op": "bz liquidatePartialAlgo_after_if_else@31",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6685": {
      "op": "itxn_begin"
    },
    "6686": {
      "op": "frame_dig 9",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6688": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "remainingLST#0 (copy)",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "remainingLST#0 (copy)"
      ]
    },
    "6689": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6691": {
      "op": "frame_dig 3",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6693": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6695": {
      "op": "frame_dig -4",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "debtor#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "debtor#0 (copy)"
      ]
    },
    "6697": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6699": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "4"
      ]
    },
    "6701": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6703": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "1000"
      ]
    },
    "6704": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6706": {
      "op": "itxn_submit"
    },
    "6707": {
      "op": "frame_dig 18",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "collTok#0"
      ]
    },
    "6709": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "remainingLST#0"
      ]
    },
    "6710": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6713": {
      "block": "liquidatePartialAlgo_after_if_else@31",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 16",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%4#0"
      ]
    },
    "6715": {
      "op": "box_del",
      "defined_out": [
        "tmp%4#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "{box_del}"
      ]
    },
    "6716": {
      "op": "pop",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6717": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6718": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "6720": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "6721": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0"
      ]
    },
    "6722": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%8#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "1"
      ]
    },
    "6723": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%1#0"
      ]
    },
    "6724": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "6726": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "6727": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6728": {
      "block": "liquidatePartialAlgo_after_if_else@33",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%2#0"
      ]
    },
    "6731": {
      "op": "bytec 13 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "6733": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "6734": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6735": {
      "retsub": true,
      "op": "retsub"
    },
    "6736": {
      "block": "liquidatePartialAlgo_else_body@32",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 20",
      "defined_out": [
        "rec#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1"
      ]
    },
    "6738": {
      "op": "dup",
      "defined_out": [
        "rec#1",
        "rec#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1",
        "rec#1 (copy)"
      ]
    },
    "6739": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#1",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1",
        "tmp%35#0"
      ]
    },
    "6742": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "rec#1"
      ]
    },
    "6743": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#1",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "6746": {
      "op": "frame_dig 9",
      "defined_out": [
        "rec#1",
        "remainingLST#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "remainingLST#0"
      ]
    },
    "6748": {
      "op": "itob",
      "defined_out": [
        "rec#1",
        "remainingLST#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0"
      ]
    },
    "6749": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "rec#1",
        "remainingLST#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "6750": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "rec#1",
        "remainingLST#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6751": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "rec#1",
        "remainingLST#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "6752": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0"
      ]
    },
    "6753": {
      "op": "frame_dig 6",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "newDebtBase#0"
      ]
    },
    "6755": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "6756": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "6757": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "6759": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "6760": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "maybe_value%10#0"
      ]
    },
    "6761": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "6762": {
      "op": "frame_dig 12",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "repayUsed#0"
      ]
    },
    "6764": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "6765": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%35#0",
        "tmp%36#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "to_encode%0#0"
      ]
    },
    "6767": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "6768": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "6769": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x04",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "0x04"
      ]
    },
    "6772": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "6773": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%4#0"
      ]
    },
    "6774": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%35#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "6775": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%36#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%35#0"
      ]
    },
    "6777": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "6779": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "6780": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "6782": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "6783": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "6784": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "6785": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%9#0"
      ]
    },
    "6787": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "6788": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "6790": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "6791": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%2#0"
      ]
    },
    "6792": {
      "op": "concat",
      "defined_out": [
        "newDebtBase#0",
        "newRec#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "6793": {
      "op": "frame_dig 16",
      "defined_out": [
        "newDebtBase#0",
        "newRec#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newRec#0",
        "tmp%4#0"
      ]
    },
    "6795": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%4#0",
        "newRec#0"
      ]
    },
    "6796": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6797": {
      "op": "b liquidatePartialAlgo_after_if_else@33"
    },
    "6800": {
      "block": "liquidatePartialAlgo_ternary_false@22",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6802": {
      "op": "frame_dig 12",
      "defined_out": [
        "repayBaseAmount#0 (copy)",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "repayUsed#0"
      ]
    },
    "6804": {
      "op": "-",
      "defined_out": [
        "refundAmount#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6805": {
      "op": "frame_bury 8",
      "defined_out": [
        "refundAmount#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6807": {
      "op": "b liquidatePartialAlgo_ternary_merge@23"
    },
    "6810": {
      "block": "liquidatePartialAlgo_after_if_else@40",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#3"
      ]
    },
    "6812": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6813": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0"
      ]
    },
    "6814": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "6815": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "collateral#0 (copy)",
        "32"
      ]
    },
    "6817": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#3",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "6818": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateral#0",
        "lstAppId#0 (copy)",
        "tmp%0#3",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%2#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6820": {
      "op": "==",
      "defined_out": [
        "collateral#0",
        "tmp%0#3",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%3#0"
      ]
    },
    "6821": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0"
      ]
    },
    "6822": {
      "op": "itxn_begin"
    },
    "6823": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6825": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0"
      ]
    },
    "6827": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6829": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0"
      ]
    },
    "6831": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "appl"
      ]
    },
    "6833": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0"
      ]
    },
    "6835": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "1000"
      ]
    },
    "6836": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0"
      ]
    },
    "6838": {
      "op": "itxn_submit"
    },
    "6839": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "awst_tmp%0#0"
      ]
    },
    "6841": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6842": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "collateral#0",
        "tmp%0#3",
        "tmp%4#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "awst_tmp%0#0",
        "tmp%4#2"
      ]
    },
    "6845": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%4#2",
        "awst_tmp%0#0"
      ]
    },
    "6846": {
      "op": "extract 0 4",
      "defined_out": [
        "collateral#0",
        "tmp%0#3",
        "tmp%4#2",
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%4#2",
        "tmp%5#1"
      ]
    },
    "6849": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "collateral#0",
        "tmp%0#3",
        "tmp%4#2",
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%4#2",
        "tmp%5#1",
        "0x151f7c75"
      ]
    },
    "6850": {
      "op": "==",
      "defined_out": [
        "collateral#0",
        "tmp%0#3",
        "tmp%4#2",
        "tmp%6#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%4#2",
        "tmp%6#2"
      ]
    },
    "6851": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%4#2"
      ]
    },
    "6852": {
      "op": "btoi",
      "defined_out": [
        "circ#0",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0"
      ]
    },
    "6853": {
      "op": "itxn_begin"
    },
    "6854": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circ#0",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6856": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0"
      ]
    },
    "6858": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6860": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0"
      ]
    },
    "6862": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "appl"
      ]
    },
    "6864": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0"
      ]
    },
    "6866": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "1000"
      ]
    },
    "6867": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0"
      ]
    },
    "6869": {
      "op": "itxn_submit"
    },
    "6870": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circ#0",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "awst_tmp%1#0"
      ]
    },
    "6872": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circ#0",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6873": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circ#0",
        "collateral#0",
        "tmp%0#3",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "awst_tmp%1#0",
        "tmp%8#1"
      ]
    },
    "6876": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "tmp%8#1",
        "awst_tmp%1#0"
      ]
    },
    "6877": {
      "op": "extract 0 4",
      "defined_out": [
        "circ#0",
        "collateral#0",
        "tmp%0#3",
        "tmp%8#1",
        "tmp%9#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "tmp%8#1",
        "tmp%9#1"
      ]
    },
    "6880": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "tmp%8#1",
        "tmp%9#1",
        "0x151f7c75"
      ]
    },
    "6881": {
      "op": "==",
      "defined_out": [
        "circ#0",
        "collateral#0",
        "tmp%0#3",
        "tmp%10#2",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "tmp%8#1",
        "tmp%10#2"
      ]
    },
    "6882": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "tmp%8#1"
      ]
    },
    "6883": {
      "op": "btoi",
      "defined_out": [
        "circ#0",
        "collateral#0",
        "tmp%0#3",
        "total#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "total#0"
      ]
    },
    "6884": {
      "op": "frame_dig 13",
      "defined_out": [
        "circ#0",
        "collateral#0",
        "seizeLST#1",
        "tmp%0#3",
        "total#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "total#0",
        "seizeLST#1"
      ]
    },
    "6886": {
      "op": "mulw",
      "defined_out": [
        "circ#0",
        "collateral#0",
        "hUnderlying#0",
        "lUnderlying#0",
        "seizeLST#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "hUnderlying#0",
        "lUnderlying#0"
      ]
    },
    "6887": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "hUnderlying#0",
        "lUnderlying#0",
        "circ#0"
      ]
    },
    "6889": {
      "op": "divw",
      "defined_out": [
        "collateral#0",
        "seizeLST#1",
        "seizedUnderlying#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "seizedUnderlying#0"
      ]
    },
    "6890": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizedUnderlying#0",
        "collateral#0"
      ]
    },
    "6891": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "seizeLST#1",
        "seizedUnderlying#0",
        "tmp%0#3",
        "tmp%12#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizedUnderlying#0",
        "tmp%12#1"
      ]
    },
    "6894": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "seizeLST#1",
        "seizedUnderlying#0",
        "tmp%0#3",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizedUnderlying#0",
        "underlyingPrice#0"
      ]
    },
    "6897": {
      "op": "mulw",
      "defined_out": [
        "hSeizeUSD#0",
        "lSeizeUSD#0",
        "seizeLST#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSeizeUSD#0",
        "lSeizeUSD#0"
      ]
    },
    "6898": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "hSeizeUSD#0",
        "lSeizeUSD#0",
        "seizeLST#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSeizeUSD#0",
        "lSeizeUSD#0",
        "1000000"
      ]
    },
    "6900": {
      "op": "divw",
      "defined_out": [
        "seizeLST#1",
        "seizeUSDActual#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSDActual#0"
      ]
    },
    "6901": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "seizeLST#1",
        "seizeUSDActual#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSDActual#0",
        "10000"
      ]
    },
    "6902": {
      "op": "mulw",
      "defined_out": [
        "hRepayUSD#0",
        "lRepayUSD#0",
        "seizeLST#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRepayUSD#0",
        "lRepayUSD#0"
      ]
    },
    "6903": {
      "op": "frame_dig 14",
      "defined_out": [
        "hRepayUSD#0",
        "lRepayUSD#0",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRepayUSD#0",
        "lRepayUSD#0",
        "tmp%23#0"
      ]
    },
    "6905": {
      "op": "divw",
      "defined_out": [
        "repayUSD#0",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0"
      ]
    },
    "6906": {
      "op": "intc 4 // 1000000",
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "1000000"
      ]
    },
    "6908": {
      "op": "mulw",
      "defined_out": [
        "hRepayBase#0",
        "lRepayBase#0",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRepayBase#0",
        "lRepayBase#0"
      ]
    },
    "6909": {
      "op": "frame_dig 1",
      "defined_out": [
        "basePrice#0",
        "hRepayBase#0",
        "lRepayBase#0",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRepayBase#0",
        "lRepayBase#0",
        "basePrice#0"
      ]
    },
    "6911": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "repaySupported#0",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repaySupported#0"
      ]
    },
    "6912": {
      "op": "frame_bury 11",
      "defined_out": [
        "basePrice#0",
        "repaySupported#0",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6914": {
      "op": "b liquidatePartialAlgo_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayBaseFromSeizedLST@41"
    },
    "6917": {
      "block": "liquidatePartialAlgo_bool_false@8",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ]
    },
    "6918": {
      "op": "b liquidatePartialAlgo_bool_merge@9"
    },
    "6921": {
      "block": "liquidatePartialAlgo_bool_false@3",
      "stack_in": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "basePrice#0",
        "bonusBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "seizeLST#1",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ]
    },
    "6922": {
      "op": "b liquidatePartialAlgo_bool_merge@4"
    },
    "6925": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "getLoanStatus",
      "stack_in": [],
      "op": "proto 1 7"
    },
    "6928": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "6930": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "6932": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6933": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "6934": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6935": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6937": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6938": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "6939": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0"
      ]
    },
    "6940": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "record#0",
        "record#0 (copy)"
      ]
    },
    "6941": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralTokenId#0"
      ]
    },
    "6944": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "6946": {
      "op": "swap",
      "stack_out": [
        "record#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "6947": {
      "op": "concat",
      "stack_out": [
        "record#0",
        "tmp%0#0"
      ]
    },
    "6948": {
      "op": "box_get",
      "defined_out": [
        "collateralRecord#0",
        "maybe_exists%0#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralRecord#0",
        "maybe_exists%0#0"
      ]
    },
    "6949": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0",
        "collateralRecord#0"
      ]
    },
    "6950": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "collateralRecord#0",
        "record#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "record#0",
        "collateralRecord#0",
        "{accrueMarket}"
      ]
    },
    "6953": {
      "op": "pop",
      "stack_out": [
        "record#0",
        "collateralRecord#0"
      ]
    },
    "6954": {
      "op": "swap",
      "stack_out": [
        "collateralRecord#0",
        "record#0"
      ]
    },
    "6955": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ]
    },
    "6958": {
      "op": "dup",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "6959": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "6961": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "6962": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "6963": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "6965": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "maybe_exists%2#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0",
        "maybe_exists%2#0"
      ]
    },
    "6966": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0"
      ]
    },
    "6967": {
      "op": "uncover 2",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "record#0"
      ]
    },
    "6969": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0"
      ]
    },
    "6972": {
      "op": "uncover 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralRecord#0"
      ]
    },
    "6974": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralRecord#0",
        "32"
      ]
    },
    "6976": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "6977": {
      "op": "dig 3"
    },
    "6979": {
      "op": "swap",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "debt#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralAmount#0 (copy)",
        "tmp%6#0"
      ]
    },
    "6980": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0"
      ]
    },
    "6983": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)"
      ]
    },
    "6984": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "10000"
      ]
    },
    "6985": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%7#0"
      ]
    },
    "6986": {
      "op": "dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "debt#0 (copy)",
        "liqBps#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%7#0",
        "debt#0 (copy)"
      ]
    },
    "6988": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0"
      ]
    },
    "6989": {
      "op": "dup",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)"
      ]
    },
    "6990": {
      "op": "dig 3",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "liqBps#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "6992": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0"
      ]
    },
    "6993": {
      "op": "dig 1",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)"
      ]
    },
    "6995": {
      "op": "dig 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "6997": {
      "op": ">",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForBuyout#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "6998": {
      "op": "uncover 6",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0"
      ]
    },
    "7000": {
      "op": "uncover 4",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0"
      ]
    },
    "7002": {
      "op": "uncover 6",
      "stack_out": [
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0"
      ]
    },
    "7004": {
      "op": "uncover 5",
      "stack_out": [
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0"
      ]
    },
    "7006": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0"
      ]
    },
    "7008": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0"
      ]
    },
    "7010": {
      "op": "uncover 6",
      "stack_out": [
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "7012": {
      "retsub": true,
      "op": "retsub"
    },
    "7013": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64"
      },
      "block": "calculateCollateralValueUSD",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "7016": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "7018": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "7020": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7021": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "7022": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7023": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "7025": {
      "error": "unknown collateral",
      "op": "assert // unknown collateral",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7026": {
      "op": "dup",
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "7027": {
      "op": "box_get",
      "defined_out": [
        "collateralInfo#0",
        "maybe_exists%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0",
        "maybe_exists%0#0"
      ]
    },
    "7028": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0"
      ]
    },
    "7029": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralInfo#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0",
        "32"
      ]
    },
    "7031": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "7032": {
      "op": "frame_dig -1",
      "defined_out": [
        "lstApp#0 (copy)",
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%2#0",
        "lstApp#0 (copy)"
      ]
    },
    "7034": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "7035": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7036": {
      "op": "itxn_begin"
    },
    "7037": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "7039": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7041": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "lstApp#0 (copy)"
      ]
    },
    "7043": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7045": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "appl"
      ]
    },
    "7047": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7049": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "1000"
      ]
    },
    "7050": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7052": {
      "op": "itxn_submit"
    },
    "7053": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "7055": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "7056": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "7059": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "7060": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "7063": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "7064": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "7065": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0"
      ]
    },
    "7066": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7067": {
      "op": "itxn_begin"
    },
    "7068": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "7070": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7072": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "lstApp#0 (copy)"
      ]
    },
    "7074": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7076": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "7078": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7080": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "7081": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7083": {
      "op": "itxn_submit"
    },
    "7084": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "7086": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "7087": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "7090": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "awst_tmp%1#0"
      ]
    },
    "7091": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "7094": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "7095": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "7096": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0"
      ]
    },
    "7097": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "7098": {
      "op": "frame_dig -2",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateralAmount#0 (copy)",
        "tmp%0#1",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "7100": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0"
      ]
    },
    "7101": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "hC#0",
        "lC#0",
        "circulatingExternalLST#0"
      ]
    },
    "7103": {
      "op": "divw",
      "defined_out": [
        "tmp%0#1",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "underlyingCollateral#0"
      ]
    },
    "7104": {
      "op": "swap",
      "stack_out": [
        "underlyingCollateral#0",
        "tmp%0#1"
      ]
    },
    "7105": {
      "op": "box_get",
      "defined_out": [
        "lstCollateral#0",
        "maybe_exists%0#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "7106": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0"
      ]
    },
    "7107": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "baseTokenId#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenId#0"
      ]
    },
    "7110": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenPrice#0"
      ]
    },
    "7113": {
      "op": "mulw",
      "defined_out": [
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0"
      ]
    },
    "7114": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0",
        "1000000"
      ]
    },
    "7116": {
      "op": "divw",
      "defined_out": [
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralUSD#0"
      ]
    },
    "7117": {
      "retsub": true,
      "op": "retsub"
    },
    "7118": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.pickupAlgoRewards",
      "params": {},
      "block": "pickupAlgoRewards",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "7121": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "rawReward#0"
      ]
    },
    "7123": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0"
      ]
    },
    "7125": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "0"
      ]
    },
    "7126": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "7127": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7128": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "7129": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%1#0"
      ]
    },
    "7130": {
      "error": "Only admin can pickup rewards",
      "op": "assert // Only admin can pickup rewards",
      "stack_out": [
        "rawReward#0"
      ]
    },
    "7131": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "0"
      ]
    },
    "7132": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "0",
        "\"contract_state\""
      ]
    },
    "7134": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "rawReward#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7135": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "maybe_value%1#0"
      ]
    },
    "7136": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%2#0"
      ]
    },
    "7137": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%2#0",
        "1"
      ]
    },
    "7138": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%3#0"
      ]
    },
    "7139": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "rawReward#0"
      ]
    },
    "7140": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%4#0"
      ]
    },
    "7142": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "7144": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "rawReward#0",
        "value%0#0"
      ]
    },
    "7145": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%5#0",
        "value%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "value%0#0",
        "tmp%5#0"
      ]
    },
    "7147": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%1#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "rawReward#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "7149": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "rawReward#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "7150": {
      "op": "-",
      "defined_out": [
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0"
      ]
    },
    "7151": {
      "op": "dup",
      "defined_out": [
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "spendable#0"
      ]
    },
    "7152": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "spendable#0",
        "0"
      ]
    },
    "7153": {
      "op": "bytec 14 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0",
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "spendable#0",
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7155": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "spendable#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "7156": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "spendable#0",
        "maybe_value%2#0"
      ]
    },
    "7157": {
      "op": "<=",
      "defined_out": [
        "spendable#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "tmp%6#0"
      ]
    },
    "7158": {
      "op": "bz pickupAlgoRewards_after_if_else@2",
      "stack_out": [
        "rawReward#0",
        "spendable#0"
      ]
    },
    "7161": {
      "retsub": true,
      "op": "retsub"
    },
    "7162": {
      "block": "pickupAlgoRewards_after_if_else@2",
      "stack_in": [
        "rawReward#0",
        "spendable#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "0"
      ]
    },
    "7163": {
      "op": "bytec 14 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7165": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "7166": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "maybe_value%3#0"
      ]
    },
    "7167": {
      "op": "frame_dig 1",
      "defined_out": [
        "maybe_value%3#0",
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "maybe_value%3#0",
        "spendable#0"
      ]
    },
    "7169": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "spendable#0",
        "maybe_value%3#0"
      ]
    },
    "7170": {
      "op": "-",
      "defined_out": [
        "rawReward#0",
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0"
      ]
    },
    "7171": {
      "op": "dup",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "rawReward#0"
      ]
    },
    "7172": {
      "op": "frame_bury 0",
      "defined_out": [
        "rawReward#0",
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0"
      ]
    },
    "7174": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "rawReward#0",
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "10000"
      ]
    },
    "7175": {
      "op": "<=",
      "defined_out": [
        "rawReward#0",
        "spendable#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "tmp%7#0"
      ]
    },
    "7176": {
      "op": "bz pickupAlgoRewards_after_if_else@4",
      "stack_out": [
        "rawReward#0",
        "spendable#0"
      ]
    },
    "7179": {
      "retsub": true,
      "op": "retsub"
    },
    "7180": {
      "block": "pickupAlgoRewards_after_if_else@4",
      "stack_in": [
        "rawReward#0",
        "spendable#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0"
      ]
    },
    "7182": {
      "op": "dup",
      "defined_out": [
        "rawReward#0",
        "rawReward#0 (copy)"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "rawReward#0 (copy)"
      ]
    },
    "7183": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0"
      ]
    },
    "7186": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "0"
      ]
    },
    "7187": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\"",
        "0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "0",
        "\"commission_percentage\""
      ]
    },
    "7189": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "7190": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "maybe_value%4#0"
      ]
    },
    "7191": {
      "op": "dig 1",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "maybe_value%4#0",
        "rawReward#0 (copy)"
      ]
    },
    "7193": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "lo#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "hi#0",
        "lo#0"
      ]
    },
    "7194": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "hi#0",
        "lo#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "hi#0",
        "lo#0",
        "100"
      ]
    },
    "7196": {
      "op": "divw",
      "defined_out": [
        "commission#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0"
      ]
    },
    "7197": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "0"
      ]
    },
    "7198": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "0",
        "commission#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "0",
        "\"current_accumulated_commission\""
      ]
    },
    "7200": {
      "op": "app_global_get_ex",
      "defined_out": [
        "commission#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "7201": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%5#0"
      ]
    },
    "7202": {
      "op": "dig 1",
      "defined_out": [
        "commission#0",
        "commission#0 (copy)",
        "maybe_value%5#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%5#0",
        "commission#0 (copy)"
      ]
    },
    "7204": {
      "op": "+",
      "defined_out": [
        "commission#0",
        "new_state_value%0#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%0#0"
      ]
    },
    "7205": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%0#0",
        "\"current_accumulated_commission\""
      ]
    },
    "7207": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "\"current_accumulated_commission\"",
        "new_state_value%0#0"
      ]
    },
    "7208": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0"
      ]
    },
    "7209": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "0"
      ]
    },
    "7210": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\"",
        "0",
        "commission#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "0",
        "\"total_commission_earned\""
      ]
    },
    "7212": {
      "op": "app_global_get_ex",
      "defined_out": [
        "commission#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "7213": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%6#0"
      ]
    },
    "7214": {
      "op": "dig 1",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%6#0",
        "commission#0 (copy)"
      ]
    },
    "7216": {
      "op": "+",
      "defined_out": [
        "commission#0",
        "new_state_value%1#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%1#0"
      ]
    },
    "7217": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%1#0",
        "\"total_commission_earned\""
      ]
    },
    "7219": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "\"total_commission_earned\"",
        "new_state_value%1#0"
      ]
    },
    "7220": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0"
      ]
    },
    "7221": {
      "op": "-",
      "defined_out": [
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0"
      ]
    },
    "7222": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "0"
      ]
    },
    "7223": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\"",
        "0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "0",
        "\"total_additional_rewards\""
      ]
    },
    "7225": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "7226": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "maybe_value%7#0"
      ]
    },
    "7227": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%7#0",
        "netReward#0",
        "netReward#0 (copy)",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "maybe_value%7#0",
        "netReward#0 (copy)"
      ]
    },
    "7229": {
      "op": "+",
      "defined_out": [
        "netReward#0",
        "new_state_value%2#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "new_state_value%2#0"
      ]
    },
    "7230": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "new_state_value%2#0",
        "\"total_additional_rewards\""
      ]
    },
    "7232": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "\"total_additional_rewards\"",
        "new_state_value%2#0"
      ]
    },
    "7233": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0"
      ]
    },
    "7234": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "0"
      ]
    },
    "7235": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "7236": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "7237": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "maybe_value%8#0"
      ]
    },
    "7238": {
      "op": "+",
      "defined_out": [
        "new_state_value%3#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "new_state_value%3#0"
      ]
    },
    "7239": {
      "op": "bytec_3 // \"total_deposits\"",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "new_state_value%3#0",
        "\"total_deposits\""
      ]
    },
    "7240": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "\"total_deposits\"",
        "new_state_value%3#0"
      ]
    },
    "7241": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "spendable#0"
      ]
    },
    "7242": {
      "retsub": true,
      "op": "retsub"
    },
    "7243": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.migrateCollateralTokenId",
      "params": {
        "collateralTokenId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "migrateCollateralTokenId",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "7246": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7248": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "7249": {
      "op": "bytec 12 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7251": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7252": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "7253": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7254": {
      "error": "Only migration admin can migrate collateral",
      "op": "assert // Only migration admin can migrate collateral",
      "stack_out": []
    },
    "7255": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "7257": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "7259": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "check%0#0"
      ]
    },
    "7261": {
      "op": "swap",
      "stack_out": [
        "check%0#0",
        "collateralBalance#0"
      ]
    },
    "7262": {
      "op": "dup",
      "stack_out": [
        "check%0#0",
        "collateralBalance#0",
        "collateralBalance#0 (copy)"
      ]
    },
    "7263": {
      "op": "uncover 2",
      "defined_out": [
        "check%0#0",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "collateralBalance#0",
        "check%0#0"
      ]
    },
    "7265": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "collateralBalance#0",
        "collateralBalance#0"
      ]
    },
    "7266": {
      "op": "bz migrateCollateralTokenId_after_if_else@3",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "7269": {
      "op": "itxn_begin"
    },
    "7270": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralBalance#0",
        "0"
      ]
    },
    "7271": {
      "op": "bytec 12 // \"migration_admin\"",
      "stack_out": [
        "collateralBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7273": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralBalance#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7274": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%1#0"
      ]
    },
    "7275": {
      "op": "frame_dig 0",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%1#0",
        "collateralBalance#0"
      ]
    },
    "7277": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%1#0"
      ]
    },
    "7279": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%1#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "7281": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%1#0"
      ]
    },
    "7283": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "7285": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "4"
      ]
    },
    "7287": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "7289": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "1000"
      ]
    },
    "7290": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "7292": {
      "op": "itxn_submit"
    },
    "7293": {
      "block": "migrateCollateralTokenId_after_if_else@3",
      "stack_in": [
        "collateralBalance#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "7294": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.migrateContract",
      "params": {
        "feeTxn#0": "uint64"
      },
      "block": "migrateContract",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "7297": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "algoBalance#0"
      ]
    },
    "7299": {
      "op": "dup",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7300": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%0#0"
      ]
    },
    "7302": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%0#0",
        "0"
      ]
    },
    "7303": {
      "op": "bytec 12 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%0#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7305": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7306": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "7307": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%1#0"
      ]
    },
    "7308": {
      "error": "Only migration admin can migrate",
      "op": "assert // Only migration admin can migrate",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7309": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "2"
      ]
    },
    "7311": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setContractState",
      "op": "callsub setContractState",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7314": {
      "op": "frame_dig -1",
      "defined_out": [
        "feeTxn#0 (copy)"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "feeTxn#0 (copy)"
      ]
    },
    "7316": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%2#0"
      ]
    },
    "7318": {
      "op": "pushint 500000 // 500000",
      "defined_out": [
        "500000",
        "tmp%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%2#0",
        "500000"
      ]
    },
    "7322": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%3#0"
      ]
    },
    "7323": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7324": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.goOffline",
      "op": "callsub goOffline"
    },
    "7327": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "7328": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "7330": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7331": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%1#0"
      ]
    },
    "7332": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstAsset#0"
      ]
    },
    "7333": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstAsset#0",
        "tmp%4#0"
      ]
    },
    "7335": {
      "op": "swap",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%4#0",
        "lstAsset#0"
      ]
    },
    "7336": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "lstBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "check%0#0"
      ]
    },
    "7338": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0"
      ]
    },
    "7339": {
      "op": "itxn_begin"
    },
    "7340": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "0"
      ]
    },
    "7341": {
      "op": "bytec 12 // \"migration_admin\"",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7343": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstBalance#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "7344": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0"
      ]
    },
    "7345": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "7346": {
      "op": "bytec 10 // \"lst_token_id\"",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "7348": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstBalance#0",
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "7349": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "7350": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstBalance#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "7351": {
      "op": "uncover 2",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstBalance#0"
      ]
    },
    "7353": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "7355": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%2#0"
      ]
    },
    "7357": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7359": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "4"
      ]
    },
    "7361": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7363": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "1000"
      ]
    },
    "7364": {
      "op": "itxn_field Fee",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7366": {
      "op": "itxn_submit"
    },
    "7367": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "7368": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7369": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "7370": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%4#0"
      ]
    },
    "7371": {
      "op": "btoi",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%5#0"
      ]
    },
    "7372": {
      "op": "bnz migrateContract_else_body@6",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7375": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%7#0"
      ]
    },
    "7377": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "7379": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "value%1#0"
      ]
    },
    "7380": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%8#0",
        "value%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "value%1#0",
        "tmp%8#0"
      ]
    },
    "7382": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%2#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "value%1#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "7384": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "value%1#0",
        "value%2#0"
      ]
    },
    "7385": {
      "op": "-",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%9#0"
      ]
    },
    "7386": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%9#0",
        "1000"
      ]
    },
    "7387": {
      "op": "-",
      "defined_out": [
        "algoBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "algoBalance#0"
      ]
    },
    "7388": {
      "op": "dup",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "algoBalance#0",
        "algoBalance#0"
      ]
    },
    "7389": {
      "op": "frame_bury 0",
      "defined_out": [
        "algoBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "algoBalance#0"
      ]
    },
    "7391": {
      "op": "bz migrateContract_after_if_else@10",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7394": {
      "op": "itxn_begin"
    },
    "7395": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "7396": {
      "op": "bytec 12 // \"migration_admin\"",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7398": {
      "op": "app_global_get_ex",
      "defined_out": [
        "algoBalance#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "7399": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%5#0"
      ]
    },
    "7400": {
      "op": "frame_dig 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%5#0",
        "algoBalance#0"
      ]
    },
    "7402": {
      "op": "itxn_field Amount",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%5#0"
      ]
    },
    "7404": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7406": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "algoBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "1"
      ]
    },
    "7407": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7409": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "1000"
      ]
    },
    "7410": {
      "op": "itxn_field Fee",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7412": {
      "op": "itxn_submit"
    },
    "7413": {
      "block": "migrateContract_after_if_else@10",
      "stack_in": [
        "algoBalance#0",
        "assetBalance#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "7414": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "7416": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "7417": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%9#0"
      ]
    },
    "7418": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0"
      ]
    },
    "7419": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "7420": {
      "op": "bytec 14 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7422": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "7423": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "maybe_value%10#0"
      ]
    },
    "7424": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "7425": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "7426": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "7428": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "7429": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%11#0"
      ]
    },
    "7430": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "7431": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "7432": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "7433": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%12#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "7434": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%12#0"
      ]
    },
    "7435": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "7436": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "7437": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "7439": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%13#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "7440": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%13#0"
      ]
    },
    "7441": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "7442": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0"
      ]
    },
    "7443": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0",
        "\"total_additional_rewards\""
      ]
    },
    "7445": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%14#0",
        "maybe_value%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%14#0",
        "maybe_exists%14#0"
      ]
    },
    "7446": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%14#0"
      ]
    },
    "7447": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "7448": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0"
      ]
    },
    "7449": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0",
        "\"total_commission_earned\""
      ]
    },
    "7451": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%15#0",
        "maybe_value%15#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%15#0",
        "maybe_exists%15#0"
      ]
    },
    "7452": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%15#0"
      ]
    },
    "7453": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "7454": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0"
      ]
    },
    "7455": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0",
        "\"current_accumulated_commission\""
      ]
    },
    "7457": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%16#0",
        "maybe_value%16#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%16#0",
        "maybe_exists%16#0"
      ]
    },
    "7458": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%16#0"
      ]
    },
    "7459": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "7460": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0"
      ]
    },
    "7461": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "7463": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%17#0",
        "maybe_value%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%17#0",
        "maybe_exists%17#0"
      ]
    },
    "7464": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%17#0"
      ]
    },
    "7465": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "7466": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0"
      ]
    },
    "7467": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "7469": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%18#0",
        "maybe_value%18#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%18#0",
        "maybe_exists%18#0"
      ]
    },
    "7470": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%18#0"
      ]
    },
    "7471": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "7472": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0"
      ]
    },
    "7473": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7474": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%19#0",
        "maybe_value%19#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%19#0",
        "maybe_exists%19#0"
      ]
    },
    "7475": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%19#0"
      ]
    },
    "7476": {
      "op": "btoi",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "to_encode%0#0"
      ]
    },
    "7477": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "7478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0"
      ]
    },
    "7479": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "7481": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%20#0",
        "maybe_value%20#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%20#0",
        "maybe_exists%20#0"
      ]
    },
    "7482": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%20#0"
      ]
    },
    "7483": {
      "op": "btoi",
      "defined_out": [
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "to_encode%1#0"
      ]
    },
    "7484": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "7485": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0"
      ]
    },
    "7486": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "7488": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%21#0",
        "maybe_value%21#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%21#0",
        "maybe_exists%21#0"
      ]
    },
    "7489": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%21#0"
      ]
    },
    "7490": {
      "op": "btoi",
      "defined_out": [
        "to_encode%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "to_encode%2#0"
      ]
    },
    "7491": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ]
    },
    "7492": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0"
      ]
    },
    "7493": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0",
        "\"commission_percentage\""
      ]
    },
    "7495": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%22#0",
        "maybe_value%22#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%22#0",
        "maybe_exists%22#0"
      ]
    },
    "7496": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%22#0"
      ]
    },
    "7497": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0"
      ]
    },
    "7498": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "0"
      ]
    },
    "7499": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "0",
        "\"liq_bonus_bps\""
      ]
    },
    "7501": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%23#0",
        "maybe_value%23#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "maybe_value%23#0",
        "maybe_exists%23#0"
      ]
    },
    "7502": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "maybe_value%23#0"
      ]
    },
    "7503": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ]
    },
    "7504": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0"
      ]
    },
    "7505": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "7507": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%24#0",
        "maybe_value%24#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%24#0",
        "maybe_exists%24#0"
      ]
    },
    "7508": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%24#0"
      ]
    },
    "7509": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ]
    },
    "7510": {
      "op": "uncover 12",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%3#0"
      ]
    },
    "7512": {
      "op": "uncover 12",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "7514": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "7515": {
      "op": "uncover 12",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "7517": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "7518": {
      "op": "uncover 12",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "7520": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "7521": {
      "op": "uncover 7",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%9#0"
      ]
    },
    "7523": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "7524": {
      "op": "uncover 6",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%10#0"
      ]
    },
    "7526": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "7527": {
      "op": "uncover 3",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%13#0"
      ]
    },
    "7529": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%0#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "7530": {
      "op": "uncover 4",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%11#0"
      ]
    },
    "7532": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "7533": {
      "op": "uncover 4",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%8#0"
      ]
    },
    "7535": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "7536": {
      "op": "uncover 7",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%0#0"
      ]
    },
    "7538": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "7539": {
      "op": "uncover 3",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%12#0"
      ]
    },
    "7541": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "7542": {
      "op": "uncover 2",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%14#0"
      ]
    },
    "7544": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "7545": {
      "op": "uncover 2",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%7#0"
      ]
    },
    "7547": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "7548": {
      "op": "uncover 2",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%6#0"
      ]
    },
    "7550": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "7551": {
      "op": "uncover 2",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%5#0"
      ]
    },
    "7553": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0",
        "val_as_bytes%15#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "7554": {
      "op": "swap",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "encoded_tuple_buffer%15#0",
        "val_as_bytes%15#0"
      ]
    },
    "7555": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "7556": {
      "op": "frame_bury 0"
    },
    "7558": {
      "retsub": true,
      "op": "retsub"
    },
    "7559": {
      "block": "migrateContract_else_body@6",
      "stack_in": [
        "algoBalance#0",
        "assetBalance#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "7560": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7561": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "7562": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%6#0"
      ]
    },
    "7563": {
      "op": "btoi",
      "defined_out": [
        "baseAsset#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "baseAsset#0"
      ]
    },
    "7564": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAsset#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "baseAsset#0",
        "tmp%11#0"
      ]
    },
    "7566": {
      "op": "swap",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%11#0",
        "baseAsset#0"
      ]
    },
    "7567": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "assetBalance#0",
        "check%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "assetBalance#0",
        "check%3#0"
      ]
    },
    "7569": {
      "op": "swap",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "check%3#0",
        "assetBalance#0"
      ]
    },
    "7570": {
      "op": "dup",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "check%3#0",
        "assetBalance#0",
        "assetBalance#0 (copy)"
      ]
    },
    "7571": {
      "op": "cover 2",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "assetBalance#0",
        "check%3#0",
        "assetBalance#0"
      ]
    },
    "7573": {
      "op": "frame_bury 1",
      "defined_out": [
        "assetBalance#0",
        "check%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "assetBalance#0",
        "check%3#0"
      ]
    },
    "7575": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "assetBalance#0"
      ]
    },
    "7576": {
      "op": "bz migrateContract_after_if_else@10",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7579": {
      "op": "itxn_begin"
    },
    "7580": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "7581": {
      "op": "bytec 12 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "assetBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7583": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetBalance#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "7584": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0"
      ]
    },
    "7585": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "0"
      ]
    },
    "7586": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7587": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetBalance#0",
        "maybe_exists%8#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "7588": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "7589": {
      "op": "btoi",
      "defined_out": [
        "assetBalance#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0"
      ]
    },
    "7590": {
      "op": "frame_dig 1",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0",
        "assetBalance#0"
      ]
    },
    "7592": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0"
      ]
    },
    "7594": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0"
      ]
    },
    "7596": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7598": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "assetBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "4"
      ]
    },
    "7600": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7602": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "assetBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "1000"
      ]
    },
    "7603": {
      "op": "itxn_field Fee",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7605": {
      "op": "itxn_submit"
    },
    "7606": {
      "op": "b migrateContract_after_if_else@10"
    },
    "7609": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.acceptMigrationAlgoContract",
      "params": {
        "lstTransferTxn#0": "uint64",
        "algoTxn#0": "uint64",
        "snapshot#0": "bytes",
        "migrationAdmin#0": "bytes"
      },
      "block": "acceptMigrationAlgoContract",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "7612": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7614": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "7615": {
      "op": "bytec 12 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7617": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7618": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "7619": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7620": {
      "error": "Only migration admin can accept migration",
      "op": "assert // Only migration admin can accept migration",
      "stack_out": []
    },
    "7621": {
      "op": "frame_dig -4",
      "defined_out": [
        "lstTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "lstTransferTxn#0 (copy)"
      ]
    },
    "7623": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "7625": {
      "op": "frame_dig -1",
      "defined_out": [
        "migrationAdmin#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "migrationAdmin#0 (copy)"
      ]
    },
    "7627": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "7628": {
      "op": "bz acceptMigrationAlgoContract_bool_false@4",
      "stack_out": []
    },
    "7631": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstTransferTxn#0 (copy)"
      ]
    },
    "7633": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "7635": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "7637": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "7638": {
      "op": "bz acceptMigrationAlgoContract_bool_false@4",
      "stack_out": []
    },
    "7641": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstTransferTxn#0 (copy)"
      ]
    },
    "7643": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "7645": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "7646": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "7648": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7649": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "7650": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "7651": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "7652": {
      "op": "bz acceptMigrationAlgoContract_bool_false@4",
      "stack_out": []
    },
    "7655": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "7656": {
      "block": "acceptMigrationAlgoContract_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "7657": {
      "op": "frame_dig -3",
      "defined_out": [
        "algoTxn#0 (copy)"
      ],
      "stack_out": [
        "algoTxn#0 (copy)"
      ]
    },
    "7659": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "7661": {
      "op": "frame_dig -1",
      "defined_out": [
        "migrationAdmin#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "migrationAdmin#0 (copy)"
      ]
    },
    "7663": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "7664": {
      "op": "bz acceptMigrationAlgoContract_bool_false@8",
      "stack_out": []
    },
    "7667": {
      "op": "frame_dig -3",
      "stack_out": [
        "algoTxn#0 (copy)"
      ]
    },
    "7669": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "7671": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "7673": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "7674": {
      "op": "bz acceptMigrationAlgoContract_bool_false@8",
      "stack_out": []
    },
    "7677": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "7678": {
      "block": "acceptMigrationAlgoContract_bool_merge@9",
      "stack_in": [
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "7679": {
      "op": "frame_dig -2",
      "defined_out": [
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7681": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "24"
      ]
    },
    "7683": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "7684": {
      "op": "bytec 14 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"cash_on_hand\""
      ]
    },
    "7686": {
      "op": "swap",
      "stack_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ]
    },
    "7687": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7688": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7690": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "0"
      ]
    },
    "7691": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "7692": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "7693": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "7694": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7695": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7697": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "16"
      ]
    },
    "7699": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "7700": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"circulating_lst\""
      ]
    },
    "7702": {
      "op": "swap",
      "stack_out": [
        "\"circulating_lst\"",
        "new_state_value%2#0"
      ]
    },
    "7703": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7704": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7706": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "8"
      ]
    },
    "7708": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "7709": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0",
        "\"total_borrows\""
      ]
    },
    "7711": {
      "op": "swap",
      "stack_out": [
        "\"total_borrows\"",
        "new_state_value%3#0"
      ]
    },
    "7712": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7713": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7715": {
      "op": "pushint 112 // 112",
      "defined_out": [
        "112",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "112"
      ]
    },
    "7717": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0"
      ]
    },
    "7718": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\"",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0",
        "\"total_additional_rewards\""
      ]
    },
    "7720": {
      "op": "swap",
      "stack_out": [
        "\"total_additional_rewards\"",
        "new_state_value%4#0"
      ]
    },
    "7721": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7722": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7724": {
      "op": "pushint 104 // 104",
      "defined_out": [
        "104",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "104"
      ]
    },
    "7726": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0"
      ]
    },
    "7727": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\"",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0",
        "\"total_commission_earned\""
      ]
    },
    "7729": {
      "op": "swap",
      "stack_out": [
        "\"total_commission_earned\"",
        "new_state_value%5#0"
      ]
    },
    "7730": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7731": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7733": {
      "op": "pushint 96 // 96",
      "defined_out": [
        "96",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "96"
      ]
    },
    "7735": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0"
      ]
    },
    "7736": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0",
        "\"current_accumulated_commission\""
      ]
    },
    "7738": {
      "op": "swap",
      "stack_out": [
        "\"current_accumulated_commission\"",
        "new_state_value%6#0"
      ]
    },
    "7739": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7740": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7742": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "64"
      ]
    },
    "7744": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%7#0"
      ],
      "stack_out": [
        "new_state_value%7#0"
      ]
    },
    "7745": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "new_state_value%7#0"
      ],
      "stack_out": [
        "new_state_value%7#0",
        "\"fee_pool\""
      ]
    },
    "7747": {
      "op": "swap",
      "stack_out": [
        "\"fee_pool\"",
        "new_state_value%7#0"
      ]
    },
    "7748": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7749": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7751": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "32"
      ]
    },
    "7753": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%8#0"
      ],
      "stack_out": [
        "new_state_value%8#0"
      ]
    },
    "7754": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "new_state_value%8#0"
      ],
      "stack_out": [
        "new_state_value%8#0",
        "\"borrow_index_wad\""
      ]
    },
    "7756": {
      "op": "swap",
      "stack_out": [
        "\"borrow_index_wad\"",
        "new_state_value%8#0"
      ]
    },
    "7757": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7758": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7760": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "72"
      ]
    },
    "7762": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%9#0"
      ],
      "stack_out": [
        "new_state_value%9#0"
      ]
    },
    "7763": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "new_state_value%9#0"
      ],
      "stack_out": [
        "new_state_value%9#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "7765": {
      "op": "swap",
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "new_state_value%9#0"
      ]
    },
    "7766": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7767": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7769": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "40"
      ]
    },
    "7771": {
      "op": "extract_uint64",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "7772": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "7773": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "7774": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "7775": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7776": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7778": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "56"
      ]
    },
    "7780": {
      "op": "extract_uint64",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "7781": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "7782": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "\"lst_token_id\""
      ]
    },
    "7784": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%1#0"
      ]
    },
    "7785": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7786": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7788": {
      "op": "pushint 80 // 80",
      "defined_out": [
        "80",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "80"
      ]
    },
    "7790": {
      "op": "extract_uint64",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "7791": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "7792": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "\"buyout_token_id\""
      ]
    },
    "7794": {
      "op": "swap",
      "stack_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%2#0"
      ]
    },
    "7795": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7796": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7798": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "48"
      ]
    },
    "7800": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%10#0"
      ],
      "stack_out": [
        "new_state_value%10#0"
      ]
    },
    "7801": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\"",
        "new_state_value%10#0"
      ],
      "stack_out": [
        "new_state_value%10#0",
        "\"commission_percentage\""
      ]
    },
    "7803": {
      "op": "swap",
      "stack_out": [
        "\"commission_percentage\"",
        "new_state_value%10#0"
      ]
    },
    "7804": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7805": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7807": {
      "op": "pushint 88 // 88",
      "defined_out": [
        "88",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "88"
      ]
    },
    "7809": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%11#0"
      ],
      "stack_out": [
        "new_state_value%11#0"
      ]
    },
    "7810": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "new_state_value%11#0"
      ],
      "stack_out": [
        "new_state_value%11#0",
        "\"liq_bonus_bps\""
      ]
    },
    "7812": {
      "op": "swap",
      "stack_out": [
        "\"liq_bonus_bps\"",
        "new_state_value%11#0"
      ]
    },
    "7813": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7814": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7816": {
      "op": "pushint 120 // 120",
      "defined_out": [
        "120",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "120"
      ]
    },
    "7818": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%12#0"
      ],
      "stack_out": [
        "new_state_value%12#0"
      ]
    },
    "7819": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "new_state_value%12#0"
      ],
      "stack_out": [
        "new_state_value%12#0",
        "\"active_loan_records\""
      ]
    },
    "7821": {
      "op": "swap",
      "stack_out": [
        "\"active_loan_records\"",
        "new_state_value%12#0"
      ]
    },
    "7822": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7823": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\""
      ],
      "stack_out": [
        "\"contract_state\""
      ]
    },
    "7825": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "\"contract_state\"",
        "0x0000000000000001"
      ],
      "stack_out": [
        "\"contract_state\"",
        "0x0000000000000001"
      ]
    },
    "7835": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7836": {
      "retsub": true,
      "op": "retsub"
    },
    "7837": {
      "block": "acceptMigrationAlgoContract_bool_false@8",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "7838": {
      "op": "b acceptMigrationAlgoContract_bool_merge@9"
    },
    "7841": {
      "block": "acceptMigrationAlgoContract_bool_false@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "7842": {
      "op": "b acceptMigrationAlgoContract_bool_merge@5"
    },
    "7845": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.goOnline",
      "params": {
        "feePayment#0": "uint64",
        "votePK#0": "bytes",
        "selectionPK#0": "bytes",
        "stateProofPK#0": "bytes",
        "voteFirst#0": "uint64",
        "voteLast#0": "uint64",
        "voteKeyDilution#0": "uint64"
      },
      "block": "goOnline",
      "stack_in": [],
      "op": "proto 7 0"
    },
    "7848": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7850": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "7851": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "7852": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7853": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "7854": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7855": {
      "error": "Only admin can go online",
      "op": "assert // Only admin can go online",
      "stack_out": []
    },
    "7856": {
      "op": "global PayoutsGoOnlineFee"
    },
    "7858": {
      "op": "frame_dig -7",
      "defined_out": [
        "extraFee#0",
        "feePayment#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "feePayment#0 (copy)"
      ]
    },
    "7860": {
      "op": "gtxns Receiver",
      "defined_out": [
        "extraFee#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "extraFee#0",
        "tmp%2#0"
      ]
    },
    "7862": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "extraFee#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "extraFee#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "7864": {
      "op": "==",
      "defined_out": [
        "extraFee#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "extraFee#0",
        "tmp%4#0"
      ]
    },
    "7865": {
      "op": "bz goOnline_bool_false@3",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7868": {
      "op": "frame_dig -7",
      "stack_out": [
        "extraFee#0",
        "feePayment#0 (copy)"
      ]
    },
    "7870": {
      "op": "gtxns Amount",
      "defined_out": [
        "extraFee#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "extraFee#0",
        "tmp%5#0"
      ]
    },
    "7872": {
      "op": "frame_dig 0",
      "stack_out": [
        "extraFee#0",
        "tmp%5#0",
        "extraFee#0"
      ]
    },
    "7874": {
      "op": "==",
      "defined_out": [
        "extraFee#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "extraFee#0",
        "tmp%6#0"
      ]
    },
    "7875": {
      "op": "bz goOnline_bool_false@3",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7878": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "extraFee#0"
      ],
      "stack_out": [
        "extraFee#0",
        "and_result%0#0"
      ]
    },
    "7879": {
      "block": "goOnline_bool_merge@4",
      "stack_in": [
        "extraFee#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7880": {
      "op": "itxn_begin"
    },
    "7881": {
      "op": "frame_dig -1",
      "defined_out": [
        "voteKeyDilution#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "voteKeyDilution#0 (copy)"
      ]
    },
    "7883": {
      "op": "itxn_field VoteKeyDilution",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7885": {
      "op": "frame_dig -2",
      "defined_out": [
        "voteLast#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "voteLast#0 (copy)"
      ]
    },
    "7887": {
      "op": "itxn_field VoteLast",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7889": {
      "op": "frame_dig -3",
      "defined_out": [
        "voteFirst#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "voteFirst#0 (copy)"
      ]
    },
    "7891": {
      "op": "itxn_field VoteFirst",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7893": {
      "op": "frame_dig -4",
      "defined_out": [
        "stateProofPK#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "stateProofPK#0 (copy)"
      ]
    },
    "7895": {
      "op": "itxn_field StateProofPK",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7897": {
      "op": "frame_dig -5",
      "defined_out": [
        "selectionPK#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "selectionPK#0 (copy)"
      ]
    },
    "7899": {
      "op": "itxn_field SelectionPK",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7901": {
      "op": "frame_dig -6",
      "defined_out": [
        "votePK#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "votePK#0 (copy)"
      ]
    },
    "7903": {
      "op": "itxn_field VotePK",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7905": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "extraFee#0",
        "2"
      ]
    },
    "7907": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7909": {
      "op": "frame_dig 0",
      "defined_out": [
        "extraFee#0"
      ],
      "stack_out": [
        "extraFee#0",
        "extraFee#0"
      ]
    },
    "7911": {
      "op": "itxn_field Fee",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7913": {
      "op": "itxn_submit"
    },
    "7914": {
      "retsub": true,
      "op": "retsub"
    },
    "7915": {
      "block": "goOnline_bool_false@3",
      "stack_in": [
        "extraFee#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "extraFee#0",
        "and_result%0#0"
      ]
    },
    "7916": {
      "op": "b goOnline_bool_merge@4"
    },
    "7919": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.goOffline",
      "params": {},
      "block": "goOffline",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "7920": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "7922": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "7924": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "7925": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "7927": {
      "op": "itxn_submit"
    },
    "7928": {
      "retsub": true,
      "op": "retsub"
    },
    "7929": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash",
      "params": {
        "amount#0": "uint64"
      },
      "block": "addCash",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "7932": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "7933": {
      "op": "bytec 14 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7935": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7936": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "7937": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "7939": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "7940": {
      "op": "bytec 14 // \"cash_on_hand\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"cash_on_hand\""
      ]
    },
    "7942": {
      "op": "swap",
      "stack_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ]
    },
    "7943": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7944": {
      "retsub": true,
      "op": "retsub"
    },
    "7945": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.removeCash",
      "params": {
        "amount#0": "uint64"
      },
      "block": "removeCash",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "7948": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "7949": {
      "op": "bytec 14 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7951": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7952": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "7953": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "7955": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7956": {
      "error": "INSUFFICIENT_CASH",
      "op": "assert // INSUFFICIENT_CASH",
      "stack_out": []
    },
    "7957": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "7958": {
      "op": "bytec 14 // \"cash_on_hand\"",
      "stack_out": [
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7960": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7961": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "7962": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "7964": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "7965": {
      "op": "bytec 14 // \"cash_on_hand\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"cash_on_hand\""
      ]
    },
    "7967": {
      "op": "swap",
      "stack_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ]
    },
    "7968": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7969": {
      "retsub": true,
      "op": "retsub"
    }
  }
}