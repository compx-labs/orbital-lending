{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/OrbitalLending.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAijCE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AArCC;;AAAA;AAAA;AAAA;;AAAA;AA5gCH;;;AAAA;AAAA;;AA4gCG;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AA59BH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA49BG;;;AAAA;;AApDA;;AAAA;AAAA;AAAA;;AAAA;AAx6BH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAw6BG;;;AAAA;;AAvDA;;AAAA;AAAA;AAAA;;AAAA;AAj3BH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAi3BG;;;AAAA;;AAzDA;;AAAA;AAAA;AAAA;;AAAA;AAxzBH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwzBG;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA/CA;;AAAA;AAAA;AAAA;;AAAA;AAnvBH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAmvBG;;;AAAA;;AAzDA;;AAAA;AAAA;AAAA;;AAAA;AA1rBH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AA0rBG;;;AAAA;;AAbD;;AAAA;AAAA;AAAA;;AAAA;AA7qBF;;;AAAA;AAAA;;AA6qBE;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA3EC;;AAAA;AAAA;AAAA;;AAAA;AAlmBH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAkmBG;;;AAAA;;AA9FA;;AAAA;AAAA;AAAA;;AAAA;AApgBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAogBG;;;AAAA;;AApDA;;AAAA;AAAA;AAAA;;AAAA;AAhdH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgdG;;;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AAzaH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyaG;;;AAAA;;AA3CA;;AAAA;AAAA;AAAA;;AAAA;AA9XH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8XG;;;AAAA;;AA5EA;;AAAA;AAAA;AAAA;;AAAA;AAlTH;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkTG;;;AAAA;;AA7CD;;AAAA;AAAA;AAAA;;AAAA;AArQF;;;AAqQE;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA5NF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA4NE;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AAnMF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmME;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAnKF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmKE;;;AAAA;;AAnDC;;AAAA;AAAA;AAAA;;AAAA;AAhHH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAgHG;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA/FH;;;AAAA;AAAA;;AAAA;;;AAAA;AA+FG;;;AAAA;;AAAD;;;AAjEA;AAmEE;;AAAA;AAC2B;;AAAA;AA3F7B;AA2FE;AAAA;;AAcF;;;AAWgB;;AA7FhB;AAAA;AAAA;AAAA;AA6FS;AAAP;AAEA;;AAAA;;AA/FF;AAAA;AAAA;AAAA;AA+FE;AAAA;;;AAAA;;AAAA;;AAzI2B;;;;AAyI3B;AAAA;;;;AAAA;AArFF;;AA0FE;;AAAA;AAvFF;;AAwFE;;AAAA;AArFF;;AAsFE;;AAAA;AAnFF;;AAoFE;;AAAA;AA9DF;;AA+D0C;AAAxC;AA/GF;;AAgHwB;AAAtB;AAtHF;;AAuH+B;AAA7B;AApHF;AAqH8B;AAA5B;AArEF;AAsEmC;AAAjC;AAtFF;;AAuFE;;AAAA;AAhJyB;;AAiJQ;;AAAA;AArFnC;;;;;;;;;;;;;;;;;;;;;AAqFE;AAAA;AA3GF;;AA4GE;;AAAA;AAnIF;;AAoI4B;;;;;;;;;;AAA1B;AAvIF;AAAA;AAAA;AAAA;AAyI+B;AAA7B;;;AACE;AAE0B;;AA5I9B;AAAA;AAAA;AAAA;AA6I4C;AACvB;;;;;;;AAJjB;;;AAzJ2B;;;AAyJ3B;;;;;;AAkBJ;;;AACgB;;AAtIhB;AAAA;AAAA;AAAA;AAsIS;AAAP;AACA;;AAAA;;AAvIF;AAAA;AAAA;AAAA;AAuIE;AAAA;;;AAAA;;AAAA;;AAhLyB;;;;AAgLzB;AAAA;;;;AAAA;AA9JF;AAAA;AAAA;AAAA;AAqKmD;AAClC;AAEI;;AACE;;AAAA;;AAAA;AACG;;AAAA;;AAAA;AAEJ;;AACiB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;AA7KhB;AAAA;AAAA;AAAA;AA8KiB;;;AAAA;AAAA;;;;;;;AAHI;;;;;;;;;AALJ;;;;AArLc;;;AAqLd;;;AAYW;AA/K5B;;AA+KE;AAAA;;;;;;AAUF;;;AACgB;;AAtKhB;AAAA;AAAA;AAAA;AAsKS;AAAP;AACA;;AAAA;;AAvKF;AAAA;AAAA;AAAA;AAuKE;AAAA;;;AAAA;;AAAA;;AA/M2B;;;AA+M3B;AAAA;;;;AAAA;AAI0B;;AAAA;AA/L5B;;AA+LE;AAAA;AAGA;AAE0B;;AAET;;;;;;;;;AAJjB;;;AApN6B;;;AAoN7B;;;;;;AAgBF;;;AACgB;;AA/LhB;AAAA;AAAA;AAAA;AA+LS;AAAP;AAnNF;AAAA;;AAAA;AAAA;AAoNiC;AAAoB;;AAAA;;AAA5C;AAAP;AAEA;;AAAA;;AAlMF;AAAA;AAAA;AAAA;AAkME;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;;AAAA;AA/MF;;AAmNE;;AAAA;;;;;;AAnNF;AAAA;;AAAA;AAAA;AA2NE;AAxNF;AAAA;AAAA;AAAA;AAgOE;AA7KF;AAAA;;AAAA;AAAA;AAqLE;AASF;;;AApOA;AAAA;;AAAA;AAAA;AAsOyB;AAAA;;AAAA;;AAAA;AAGR;AAAA;;;;;;;;;;;;;;AAAA;;;;AAlRc;;;AAkRd;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;AAMK;AAApB;AAaF;;;AA/NsF;;AAAA;;AAAA;AAAA;AAiOlC;AAAA;AAAA;AAAA;;AAAA;AAEnC;AAAA;;;AAAA;AAAA;AAAQ;AAA6B;;AAAA;AAAhD;AAAJ;;;AACsD;;AAAA;AAAhB;;AAAgB;AAA9C;;AAAmB;AAGC;AAAA;;;AACP;AAAA;AAHoB;;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAAA;AAAA;;AAeJ;;;AA3SA;AAAA;AAAA;AAAA;AA6SmD;AACnC;;AAvRhB;AAAA;AAAA;AAAA;AAuRS;AAAP;AACyB;;AAAA;AAAA;AAAA;;AAAlB;AAAP;AAxPoF;;AAAA;;AAAA;AAAA;AAuN9C;AAAA;;AAkC/B;AAAP;AACA;;AAAA;;AA1RF;AAAA;AAAA;AAAA;AA0RE;AAAA;;;AAAA;;AAAA;;AAjU2B;;;;AAiU3B;AAAA;;;;AAAA;AAjTF;AAAA;AAAA;AAAA;AAsToD;;AAAA;AAAA;AAG/B;;;;;;;;;;AAH+B;AAMlD;;AAAA;AAAA;;AAAA;AA5PF;AAAA;;AAAA;AAAA;AA6PkF;AAAxC;AA7P1C;;AA6PE;AAAA;AACA;AAEmB;;AACO;AAET;;;;;;;;;;;AALjB;;;AA7U6B;;;AA6U7B;AAhDsC;AAAA;;AA0DtC;;;;;;AAGF;;;AAjUA;AAAA;;AAAA;AAAA;AAtB2B;;AAwVK;AA/ThC;AAAA;AAAA;AAAA;AAiUmB;AAEa;;AAAA;AA5VL;;AA6VlB;AAAP;AAsCF;;;AAvXA;AAAA;AAAA;AAAA;AAyXmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAKA;;AAAA;;AA9Y6B;AA8Y7B;AAAA;AA/XF;AAAA;AAAA;AAAA;;AAAA;AAaA;AAAA;AAAA;AAAA;AA2XE;;;;;AAKA;AAE0B;;AA5Y5B;AAAA;;AAAA;AAAA;AA6YyC;;;;;;;;;AAHvC;;;AA5Z6B;;;AA4Z7B;AAnYF;AAAA;;AAAA;AAAA;AA4YE;AA5YF;;AA4YE;AAAA;AAzYF;AAAA;AAAA;AAAA;AA0YE;;AAAA;AA1YF;AA0YE;AAAA;;AAZE;;AAAS;;;;;;;;;;AAuBb;;;AAlaA;AAAA;AAAA;AAAA;;AAAA;AAqaE;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIA;;AAAA;;AAxb6B;AAwb7B;AAAA;AA5ZF;AAAA;AAAA;AAAA;AAiaE;;;;;AAKA;AAE0B;;AAlb5B;AAAA;;AAAA;AAAA;AAmbyC;;;;;;;;;AAHvC;;;AAlc6B;;;AAkc7B;AAzaF;AAAA;;AAAA;AAAA;AAkbE;AAlbF;;AAkbE;AAAA;AA/aF;AAAA;AAAA;AAAA;AAgbE;;AAAA;AAhbF;AAgbE;AAAA;;AAZE;;AAAS;;;;;;;;;;AAwBb;;;AAtcA;AAAA;;AAAA;AAAA;AA6ciD;AAC/C;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMA;;AAAA;;AACU;;;AADV;AAAA;AAMI;;AAAoB;;AAApB;AAAJ;;;AAndF;AAAA;;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AA8VmB;;AAAA;AACV;;AAAA;AAuHoC;;AAne7C;AAAA;AAAA;AAAA;AAmeiG;AAAxF;;AAAA;AAAA;;AAAA;AAAP;AACA;AAE0B;;AAte5B;AAAA;AAAA;AAAA;AAue0C;;;;;;;;;AAHxC;;;AAnf6B;;;AAmf7B;AA1dF;AAAA;;AAAA;AAAA;AAmeE;;AAAA;AAneF;;AAmeE;AAAA;AAheF;AAAA;AAAA;AAAA;AAieE;AAAA;AAjeF;AAieE;AAAA;;AAvJ+B;AAAA;;;;;;;;AAAA;;;;AAtWF;;;AAsWE;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;AA1WD;;;AA0WC;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAMb;;AAAA;AACV;;AAAA;;;;;;;;AA2JT;;;;;;;AAncuD;;AA6cb;;AA7ca;AA6cL;AAAA;AAAA;;AAAA;AAEhD;;;AACuD;;AAA1B;;;AAAkC;;AACxB;AAArC;;AAuiBF;;AAAA;;AAhkCgC;;;AAgkChC;AAAA;AAEA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AA7/BoF;;AAAA;;AAAA;AAuN9C;AAAA;;AA2yBtC;AAK+B;AAAA;;;;;;;;AAAA;;;;AA7kCF;;;AA6kCE;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAKD;AAAA;;;;;;;;AAAA;;;;AAllCD;;;AAklCC;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAMb;;AAAA;AACX;;AAAuB;AAGvB;;AAAwB;;;AACb;AAzlCW;;AA0lCN;AA9iCxB;AAAA;;AAAA;AAAA;AAgfgC;AA7hBL;;AA6hBI;AAAvB;AAAA;;AAvcR;;;;;;;;;;;;;;;;;AAwcE;;AAAA;AAlhBF;AAAA;AAAA;AAAA;AAmhBuC;;;AAA/B;AAAA;;AAmkBW;;AAAA;AAjmCW;;AAkmCH;AAAnB;AAAA;;AA1gCR;;;;;;;;;;;;;;;;;;;;;AA6gCE;;AAAA;AACwB;AAAA;AA3gC1B;;;;;;;;;;;;AA2gCE;AAAA;AAEO;AAAP;AAnjCF;AAAA;;AAAA;AAAA;AAyjCuB;;AAAA;AA/mCI;;AA+mCL;AACd;;AAAA;;AAAuB;AAAvB;AAAA;;AAAA;;AAplCR;AAAA;;AAAA;AAAA;AAslCE;AAtlCF;;AAslCE;AAAA;AA/hCF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgiCE;AAAA;AAhlBA;;AAAA;;;AAEW;;AA4lBL;AAAe;;;AACT;;;AAGwB;AAAV;;AAAU;AAAnB;;AAAA;AApoCW;;AAqoCT;AAKb;;AAA4B;AAC3B;;AAAA;AAAP;AAG8D;AAAjB;;AAAiB;AAAxD;;AAA0B;AAEoB;;AAAV;;AAAU;AAA9C;;AAAA;AAAA;;AAAuB;AAIjB;AAAA;AACsB;;AAAnB;AAFb;AAGc;;AAHd;AAAA;AAAA;AAMa;;AAAA;;;AAPf;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAWA;;AAAA;;AAAA;;;AA7mB0B;;AAriB5B;AAAA;AAAA;AAAA;AAqpC+B;AAA7B;;;AACE;;;;;;;AAAA;;;AArqC2B;;;AAqqC3B;;AAQA;AA9pCJ;AAAA;AAAA;AAAA;AAiqC4C;;;;;;;;;AAHxC;;;AA7qC2B;;;AA6qC3B;;AA5nB4D;;AAiB1C;;AAAA;AAER;;AAAA;AACsB;;AAAnB;AAFG;;AAGF;;AAHE;AAAA;AAAA;AApjBpB;AAAA;AAAA;AAAA;AA2jB6C;;AApkBR;;;;AAokBC;AAAZ;AAXO;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtfsB;;AAAA;;AAAA;AAmgBrD;AAAA;AAhgBF;AAAA;AAAA;AAAA;AAigBoE;AAAjC;AAjgBnC;AAigBE;AAAA;;;;;;;;;;;;;;;AAGF;;;AAUsB;;AAAA;AAEP;;AAAA;AA7kBf;AAAA;AAAA;AAAA;AA+kB6C;;AAAnB;AAPO;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9gBsB;;AAAA;;AAAA;AAuhBrD;AAAA;;;;AAUF;;;AAjiBuD;;AAAA;;AAAA;AAmiBrB;AAAA;AAAA;;AAAhC;AACmD;AAAA;AAEvC;;;AAIN;;AAAA;;;AACU;;AAAV;;AAAU;AACI;;AAAA;;;AAEiB;;AAAjB;;AAAiB;AALrC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAtlBF;AAAA;AAAA;AAAA;AA6lBiD;AAAP;AAAO;AAA/C;AA7lBF;AA6lBE;AAAA;;AAGF;;;AACqB;;AAAb;AACA;;AAAc;;AAAqB;AAAnC;AAAA;;AAEF;AAAJ;;;AAIoC;;AAAnB;AAFL;;;;;;;;;;;AAAA;AAAA;AAKU;;AAAA;;;AANb;AAAP;;AAAA;;AAAA;;AAAA;AASI;;AAAA;;AAAiB;AACjB;;AAA2B;;AAAU;AArlB7C;AAAA;;AAAA;AAAA;AAylBqB;;AAAA;AA5oBM;;AA8oBE;AAER;;AAAA;AA3pBU;;;;;AA6pBJ;AAzlB3B;AAAA;;AAAA;AAAA;AAzD2B;;AAqpBnB;AAAuB;AAGN;;AAAA;AAxpBE;;AAypBS;AAG5B;AAA2B;AAnoBnC;AAAA;AAAA;AAAA;AAuoBE;;AAAA;AAvoBF;AAuoBE;AAAA;AApoBF;AAAA;;AAAA;AAAA;AAsoBE;AAtoBF;;AAsoBE;AAAA;AAIM;AAAA;;AAAuB;AAIjB;AAAA;AACsB;;AAAnB;AAFL;AAGM;;;AAHN;AAAA;AAAA;AAKG;AAAA;AANN;AAAP;;AAAA;;AAAA;;AAAA;AAUF;;;AA5mBuD;;AAAA;;AAAA;AA6mBZ;AAAA;AAAzC;AAYF;;;;;AAnrBA;AAAA;AAAA;AAAA;AAyrBmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAM6C;;AAA1B;;;AACP;;;AAAA;AAGkB;;AAAU;AAAjC;;AAAA;;AAAA;AAAP;AACM;;AAAwB;AAAxB;AAAA;;AAEN;;;AA7oBqD;;AA+oB3B;;AA/oB2B;AA+oBnB;;AA5oBpC;AAAA;AAAA;AAAA;AA6oBsE;AAAjC;AA7oBrC;AA6oBI;AAAA;AAEA;AAE0B;;AACkB;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJ7C;;;AAAA;;;AAAA;;AAWY;;AAAA;AACsB;;AAAnB;AAFb;AAGc;;;AAHd;AAAA;AAAA;AAMW;AAAA;AAAA;;;AACJ;;AACqB;;AAAjB;;AAAiB;AAT9B;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;;;AAuBJ;;;;;AA5uBA;AAAA;AAAA;AAAA;;AAAA;AA+uBE;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAK6C;;AAA1B;;;AACP;;;AAAA;AAEkB;;AAAU;AAAjC;;AAAA;;AAAA;AAAP;AACM;;AAAwB;AAAxB;AAAA;;AAEN;;;AAhsBqD;;AAksB3B;;AAlsB2B;AAksBnB;;AA/rBpC;AAAA;AAAA;AAAA;AAgsBsE;AAAjC;AAhsBrC;AAgsBI;AAAA;AAEA;AAE0B;;AACkB;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJ7C;;;AAAA;;;AAAA;;AAWY;;AAAA;AACsB;;AAAnB;AAFb;AAGc;;;AAHd;AAAA;AAAA;AAMW;AAAA;AAAA;;;AACJ;;AACqB;;AAAjB;;AAAiB;AAT9B;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;;;AAqBY;;AAtwBhB;AAAA;AAAA;AAAA;AAswBS;AAAP;AACA;AAvwBF;AAAA;AAAA;AAAA;AAvBA;AAAA;AAAA;AAAA;AAiyB0C;AAjxB1C;AAAA;;AAAA;AAAA;;;;;;;AA8wBE;;;AAAA;;;AAAA;AA9wBF;;AAqxBwB;AAAtB;;AAYF;;;AAvvBuD;;AAAA;;AAAA;AAAA;;AAyvBrB;AAAA;;AAAhC;AACmD;AAAA;AAAA;AACnD;AAAA;;AAAA;AAEM;AAAqC;;AAAiB;AAAtD;AAAA;;AACA;AAA+B;;AAAU;AACoC;AAAlB;;AAAkB;AAAhD;AAAA;AAAA;;AAlwBiD;;AAAA;;AAAA;AA4N9C;AAAA;AAyiBZ;;AAAgB;AAAA;AAAA;;AAAnC;;AAAA;AAAP;AAG4B;;;AACX;;AAAA;AAC0B;AAAb;AACxB;AAAA;;AAAa;AA9xBrB;AAAA;;AAAA;AAAA;AA+xBS;;AAAA;AAAP;AAEkC;;AAAL;AAjyB/B;AAAA;;AAAA;AAAA;AAiyB8B;AAA8C;;AAA9C;AACmC;;AAAd;AAAJ;AAAA;AAAjB;AAE5B;;AAAA;;AAx0BF;AAAA;AAAA;AAAA;AAy0B8C;AAD5C;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AASyB;;AAAA;;AApxB3B;AAAA;AAAA;AAAA;AAqxBoE;AAAjC;AArxBnC;AAqxBE;AAAA;AAGA;AAGiC;;AAAA;AAAA;;;;;;;;;;;;;;AAHjC;;;AAAA;;;AAAA;AAQM;;AAAA;AAAmB;AACzB;;;;;;;;AAYF;;;AAhzBuD;;AAAA;;AAAA;AAAA;;AAkzBrB;AAAA;;AAAhC;AACmD;AAAA;AAAA;AACnD;AAAA;;AAAA;AAEM;AAAqC;;AAAiB;AAAtD;AAAA;;AACA;AAA+B;;AAAU;AACoC;AAAlB;;AAAkB;AAAhD;AAAA;AAAA;;AA3zBiD;;AAAA;;AAAA;AA4N9C;AAAA;AAkmBZ;;AAAgB;AAAA;AAAA;;AAAnC;;AAAA;AAAP;AAG4B;;;AACX;;AAAA;AAC0B;AAAb;AACxB;AAAA;;AAAa;AAv1BrB;AAAA;;AAAA;AAAA;AAw1BS;;AAAA;AAAP;AAEkC;;AAAL;AA11B/B;AAAA;;AAAA;AAAA;AA01B8B;AAA8C;;AAA9C;AACmC;;AAAd;AAAJ;AAAA;AAAjB;AAE5B;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAQyB;;AAAA;;AA50B3B;AAAA;AAAA;AAAA;AA60BoE;AAAjC;AA70BnC;AA60BE;AAAA;AAGA;AAGiC;;AAAA;AAAA;;;;;;;;;;;;;;AAHjC;;;AAAA;;;AAAA;AAQM;;AAAA;AAAmB;AACzB;;;;;;;;AAWF;;;AAv2BuD;;AAAA;;AAAA;AAAA;;AAy2BrB;AAAA;;AAAhC;AAEwC;AAAA;AAAA;AAAA;;AAAA;AAClC;AAA0B;;AAAiB;AAA3C;AAAA;;AACA;AAAoB;;AAAU;AAA9B;AAAA;;AAAA;;AAC2B;;;AAA3B;AAAA;;AAj3B8E;;AAAA;;AAAA;AA4N9C;AAAA;AAAA;;AAAA;AAwpBlB;;;AACL;AACkB;AAAX;AAEhB;AAAa;AA34BrB;AAAA;;AAAA;AAAA;AA44BS;AAAP;AAGA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAn7BF;AAAA;AAAA;AAAA;AAq7B8C;AAF5C;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AASyB;;AAAA;;AA/3B3B;AAAA;AAAA;AAAA;AAg4BoE;AAAjC;AAh4BnC;AAg4BE;AAAA;AAGA;AAE0B;;AACO;;AA3BA;;AA2BA;;;;;;;;;;;;AAHjC;;;AAAA;;;AAAA;AAS4D;;AAAhB;;AAAgB;AAAtD;AAAmB;AACzB;;AAAA;AAAA;;;;;;;;AAWF;;;AA35BuD;;AAAA;;AAAA;AAAA;;AA65BrB;AAAA;;AAAhC;AAEwC;AAAA;AAAA;AAAA;;AAAA;AAClC;AAA0B;;AAAiB;AAA3C;AAAA;;AACA;AAAoB;;AAAU;AAA9B;AAAA;;AAAA;;AAC2B;;;AAA3B;AAAA;;AAr6B8E;;AAAA;;AAAA;AA4N9C;AAAA;AAAA;;AAAA;AA4sBlB;;;AACL;AACkB;AAAX;AAEhB;AAAa;AA/7BrB;AAAA;;AAAA;AAAA;AAg8BS;AAAP;AAGA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMyB;;AAAA;;AAh7B3B;AAAA;AAAA;AAAA;AAi7BoE;AAAjC;AAj7BnC;AAi7BE;AAAA;AAGA;AAE0B;;AACO;;AAxBA;;AAwBA;;;;;;;;;;;;AAHjC;;;AAAA;;;AAAA;AAS4D;;AAAhB;;AAAgB;AAAtD;AAAmB;AACzB;;AAAA;AAAA;;;;;;;;AAUF;;;AA38BuD;;AAAA;;AAAA;AAq9BnB;AAAA;AAAA;;AAAlC;AAC0C;AAAA;AAC9B;;;AAEN;AAAmB;;AAAU;AAC7B;;AAAkC;;AAAiB;AAh/B3D;AAAA;;AAAA;AAAA;AAm/BiD;;AAAA;;;AAA3B;;;AACH;;AAAA;AACuB;AAAb;AAEP;AAviCK;;AAuiCL;AAAd;;AAAa;AACb;AAAA;;AAAyB;AACzB;;AAAA;;AAAoB;AAE1B;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 1000 10000 1000000"
    },
    "13": {
      "op": "bytecblock \"base_token_id\" \"total_deposits\" \"active_loan_records\" \"admin_account\" \"loan_record\" 0x151f7c75 \"circulating_lst\" \"liq_threshold_bps\" \"fee_pool\" \"lst_token_id\" \"accepted_collaterals\" 0x00 \"accepted_collaterals_count\" 0x09ef525f 0xae859f3b \"ltv_bps\" \"interest_bps\" \"origination_fee_bps\" \"protocol_share_bps\" \"oracle_app\""
    },
    "282": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "284": {
      "op": "bz main_after_if_else@31",
      "stack_out": []
    },
    "287": {
      "op": "pushbytess 0x3b01665e 0x9de42732 0x17c33662 0x5efce39a 0x5cac25a9 // method \"createApplication(account,uint64)void\", method \"initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void\", method \"generateLSTToken(pay)void\", method \"optInToLST(uint64,pay)void\", method \"configureLSTToken(axfer,uint64)void\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(optInToLST(uint64,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)"
      ]
    },
    "314": {
      "op": "bytec 13 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(optInToLST(uint64,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "316": {
      "op": "bytec 14 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(optInToLST(uint64,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "318": {
      "op": "pushbytess 0x6c6337c0 0xe596ac73 0x53b5111f 0x72c5c57b 0xbae4c238 0x3e41a49b 0x15a5b25e 0x8553cffa 0xae99f45b 0xbe1256e6 0xb95560e0 0x96da416e 0x1dffadde 0xf0eda6a8 0x836dbb73 0xf16507ce 0xdaa7f7f2 0x3172ca9d // method \"getAcceptedCollateralsCount()uint64\", method \"getOraclePrice(uint64)uint64\", method \"addNewCollateralType(uint64,pay)void\", method \"depositASA(axfer,uint64,pay)void\", method \"depositAlgo(pay,uint64,pay)void\", method \"withdrawDeposit(axfer,uint64,uint64,pay)void\", method \"borrow(axfer,uint64,uint64,uint64,uint64,pay)void\", method \"accrueLoanInterest(account,account)void\", method \"getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)\", method \"repayLoanASA(axfer,uint64,account)void\", method \"repayLoanAlgo(pay,uint64,account)void\", method \"withdrawFees()void\", method \"buyoutASA(account,account,axfer)void\", method \"buyoutAlgo(account,account,pay)void\", method \"liquidateASA(account,axfer)void\", method \"liquidateAlgo(account,pay)void\", method \"getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"gas()void\"",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addNewCollateralType(uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutASA(account,account,axfer)void)",
        "Method(buyoutAlgo(account,account,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanASA(axfer,uint64,account)void)",
        "Method(repayLoanAlgo(pay,uint64,account)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawFees()void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,pay)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64,account)void)",
        "Method(repayLoanAlgo(pay,uint64,account)void)",
        "Method(withdrawFees()void)",
        "Method(buyoutASA(account,account,axfer)void)",
        "Method(buyoutAlgo(account,account,pay)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)"
      ]
    },
    "410": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addNewCollateralType(uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutASA(account,account,axfer)void)",
        "Method(buyoutAlgo(account,account,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanASA(axfer,uint64,account)void)",
        "Method(repayLoanAlgo(pay,uint64,account)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawFees()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,pay)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64,account)void)",
        "Method(repayLoanAlgo(pay,uint64,account)void)",
        "Method(withdrawFees()void)",
        "Method(buyoutASA(account,account,axfer)void)",
        "Method(buyoutAlgo(account,account,pay)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "tmp%2#0"
      ]
    },
    "413": {
      "op": "match main_createApplication_route@3 main_initApplication_route@4 main_generateLSTToken_route@5 main_optInToLST_route@6 main_configureLSTToken_route@7 main_getCirculatingLST_route@8 main_getTotalDeposits_route@9 main_getAcceptedCollateralsCount_route@10 main_getOraclePrice_route@11 main_addNewCollateralType_route@12 main_depositASA_route@13 main_depositAlgo_route@14 main_withdrawDeposit_route@15 main_borrow_route@16 main_accrueLoanInterest_route@17 main_getLoanRecord_route@18 main_repayLoanASA_route@19 main_repayLoanAlgo_route@20 main_withdrawFees_route@21 main_buyoutASA_route@22 main_buyoutAlgo_route@23 main_liquidateASA_route@24 main_liquidateAlgo_route@25 main_getLoanStatus_route@26 main_gas_route@27",
      "stack_out": []
    },
    "465": {
      "block": "main_after_if_else@31",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "466": {
      "op": "return",
      "stack_out": []
    },
    "467": {
      "block": "main_gas_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "469": {
      "op": "!",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "470": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "471": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "473": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "474": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "475": {
      "op": "return",
      "stack_out": []
    },
    "476": {
      "block": "main_getLoanStatus_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "478": {
      "op": "!",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "479": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "480": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "482": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "483": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%13#0"
      ]
    },
    "486": {
      "op": "btoi",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "487": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "489": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "op": "callsub getLoanStatus",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "492": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%0#0"
      ]
    },
    "494": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0"
      ]
    },
    "495": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "elements_to_encode%1#0"
      ]
    },
    "497": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "498": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%2#0"
      ]
    },
    "500": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "501": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "elements_to_encode%3#0"
      ]
    },
    "503": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "504": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%4#0"
      ]
    },
    "506": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "507": {
      "op": "bytec 11 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0x00"
      ]
    },
    "509": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0x00",
        "0"
      ]
    },
    "510": {
      "op": "uncover 8",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "512": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%6#0",
        "encoded_bool%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_bool%0#0"
      ]
    },
    "513": {
      "op": "bytec 11 // 0x00",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "515": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_bool%0#0",
        "0x00",
        "0"
      ]
    },
    "516": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "elements_to_encode%6#0"
      ]
    },
    "518": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "519": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%4#0"
      ]
    },
    "521": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "523": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "524": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%6#0"
      ]
    },
    "526": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "527": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%8#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%7#0"
      ]
    },
    "529": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "530": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%8#0"
      ]
    },
    "532": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "533": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_bool%0#0"
      ]
    },
    "535": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "536": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0"
      ]
    },
    "537": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "538": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ]
    },
    "539": {
      "op": "pushint 321 // 321"
    },
    "542": {
      "op": "swap",
      "defined_out": [
        "321",
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "321",
        "is_true%0#0"
      ]
    },
    "543": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "544": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "546": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "547": {
      "op": "concat",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "548": {
      "op": "log",
      "stack_out": []
    },
    "549": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "550": {
      "op": "return",
      "stack_out": []
    },
    "551": {
      "block": "main_liquidateAlgo_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "553": {
      "op": "!",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "554": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "555": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "557": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "558": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%12#0"
      ]
    },
    "561": {
      "op": "btoi",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "562": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "564": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%161#0",
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%162#0"
      ]
    },
    "566": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%161#0",
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%162#0",
        "1"
      ]
    },
    "567": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%18#0",
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "gtxn_idx%18#0"
      ]
    },
    "568": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)",
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ]
    },
    "569": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ]
    },
    "571": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "pay",
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "pay"
      ]
    },
    "572": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0",
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ]
    },
    "573": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%161#0",
        "gtxn_idx%18#0"
      ]
    },
    "574": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateAlgo",
      "op": "callsub liquidateAlgo",
      "stack_out": []
    },
    "577": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "578": {
      "op": "return",
      "stack_out": []
    },
    "579": {
      "block": "main_liquidateASA_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "581": {
      "op": "!",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "582": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "583": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "585": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "586": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "589": {
      "op": "btoi",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "590": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "592": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%154#0",
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "tmp%155#0"
      ]
    },
    "594": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%154#0",
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "tmp%155#0",
        "1"
      ]
    },
    "595": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%17#0",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "gtxn_idx%17#0"
      ]
    },
    "596": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)"
      ]
    },
    "597": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0"
      ]
    },
    "599": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "axfer"
      ]
    },
    "600": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0"
      ]
    },
    "601": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%154#0",
        "gtxn_idx%17#0"
      ]
    },
    "602": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateASA",
      "op": "callsub liquidateASA",
      "stack_out": []
    },
    "605": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "606": {
      "op": "return",
      "stack_out": []
    },
    "607": {
      "block": "main_buyoutAlgo_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "609": {
      "op": "!",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "610": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "611": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "613": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "614": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "617": {
      "op": "btoi",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "618": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "620": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%10#0",
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "623": {
      "op": "btoi",
      "defined_out": [
        "tmp%145#0",
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "tmp%146#0"
      ]
    },
    "624": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%145#0",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "tmp%147#0"
      ]
    },
    "626": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%145#0",
        "tmp%147#0",
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "tmp%147#0",
        "tmp%148#0"
      ]
    },
    "628": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%145#0",
        "tmp%147#0",
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "tmp%147#0",
        "tmp%148#0",
        "1"
      ]
    },
    "629": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%145#0",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "tmp%147#0",
        "gtxn_idx%16#0"
      ]
    },
    "630": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)",
        "tmp%145#0",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "tmp%147#0",
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)"
      ]
    },
    "631": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "tmp%145#0",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "tmp%147#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0"
      ]
    },
    "633": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "pay",
        "tmp%145#0",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "tmp%147#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "pay"
      ]
    },
    "634": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0",
        "tmp%145#0",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "tmp%147#0",
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0"
      ]
    },
    "635": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%145#0",
        "tmp%147#0",
        "gtxn_idx%16#0"
      ]
    },
    "636": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutAlgo",
      "op": "callsub buyoutAlgo",
      "stack_out": []
    },
    "639": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "640": {
      "op": "return",
      "stack_out": []
    },
    "641": {
      "block": "main_buyoutASA_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "643": {
      "op": "!",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "644": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "645": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "647": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "648": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "651": {
      "op": "btoi",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "652": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "654": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%8#0",
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0",
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "657": {
      "op": "btoi",
      "defined_out": [
        "tmp%136#0",
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%136#0",
        "tmp%137#0"
      ]
    },
    "658": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%136#0",
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%136#0",
        "tmp%138#0"
      ]
    },
    "660": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%136#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%136#0",
        "tmp%138#0",
        "tmp%139#0"
      ]
    },
    "662": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%136#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%136#0",
        "tmp%138#0",
        "tmp%139#0",
        "1"
      ]
    },
    "663": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%15#0",
        "tmp%136#0",
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%136#0",
        "tmp%138#0",
        "gtxn_idx%15#0"
      ]
    },
    "664": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)",
        "tmp%136#0",
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%136#0",
        "tmp%138#0",
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)"
      ]
    },
    "665": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%136#0",
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%136#0",
        "tmp%138#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0"
      ]
    },
    "667": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%136#0",
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%136#0",
        "tmp%138#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "axfer"
      ]
    },
    "668": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0",
        "tmp%136#0",
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%136#0",
        "tmp%138#0",
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0"
      ]
    },
    "669": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%136#0",
        "tmp%138#0",
        "gtxn_idx%15#0"
      ]
    },
    "670": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutASA",
      "op": "callsub buyoutASA",
      "stack_out": []
    },
    "673": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "674": {
      "op": "return",
      "stack_out": []
    },
    "675": {
      "block": "main_withdrawFees_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "677": {
      "op": "!",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "678": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "679": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "681": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "682": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawFees",
      "op": "callsub withdrawFees"
    },
    "685": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "686": {
      "op": "return",
      "stack_out": []
    },
    "687": {
      "block": "main_repayLoanAlgo_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "689": {
      "op": "!",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "690": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "691": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "693": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "694": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "696": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0",
        "1"
      ]
    },
    "697": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0"
      ]
    },
    "698": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ]
    },
    "699": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ]
    },
    "701": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay"
      ]
    },
    "702": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ]
    },
    "703": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%14#0"
      ]
    },
    "704": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%19#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "707": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%14#0",
        "tmp%124#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%124#0"
      ]
    },
    "708": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[1]%6#0",
        "tmp%124#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%124#0",
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "711": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%14#0",
        "tmp%124#0",
        "tmp%125#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%124#0",
        "tmp%125#0"
      ]
    },
    "712": {
      "op": "txnas Accounts",
      "defined_out": [
        "gtxn_idx%14#0",
        "tmp%124#0",
        "tmp%126#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%124#0",
        "tmp%126#0"
      ]
    },
    "714": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "op": "callsub repayLoanAlgo",
      "stack_out": []
    },
    "717": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "718": {
      "op": "return",
      "stack_out": []
    },
    "719": {
      "block": "main_repayLoanASA_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "721": {
      "op": "!",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "722": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "723": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "725": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "726": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "728": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0",
        "1"
      ]
    },
    "729": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0"
      ]
    },
    "730": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ]
    },
    "731": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ]
    },
    "733": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "axfer"
      ]
    },
    "734": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ]
    },
    "735": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%13#0"
      ]
    },
    "736": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[8]%18#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "739": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%116#0"
      ]
    },
    "740": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[1]%5#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%116#0",
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "743": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%116#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%116#0",
        "tmp%117#0"
      ]
    },
    "744": {
      "op": "txnas Accounts",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%116#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%116#0",
        "tmp%118#0"
      ]
    },
    "746": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA",
      "op": "callsub repayLoanASA",
      "stack_out": []
    },
    "749": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "750": {
      "op": "return",
      "stack_out": []
    },
    "751": {
      "block": "main_getLoanRecord_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "753": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "754": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "755": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "757": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "758": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "761": {
      "op": "btoi",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "762": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "764": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "767": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0",
        "0x151f7c75"
      ]
    },
    "769": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%109#0"
      ]
    },
    "770": {
      "op": "concat",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "771": {
      "op": "log",
      "stack_out": []
    },
    "772": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "773": {
      "op": "return",
      "stack_out": []
    },
    "774": {
      "block": "main_accrueLoanInterest_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "776": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "777": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "778": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "780": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "781": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "784": {
      "op": "btoi",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "785": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "787": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "790": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%100#0",
        "tmp%101#0"
      ]
    },
    "791": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%100#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%100#0",
        "tmp%102#0"
      ]
    },
    "793": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "op": "callsub accrueLoanInterest",
      "stack_out": []
    },
    "796": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "797": {
      "op": "return",
      "stack_out": []
    },
    "798": {
      "block": "main_borrow_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "800": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "801": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "802": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "804": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "805": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "807": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0",
        "2"
      ]
    },
    "809": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "810": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ]
    },
    "811": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ]
    },
    "813": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0",
        "axfer"
      ]
    },
    "814": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ]
    },
    "815": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "816": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%14#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "819": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0"
      ]
    },
    "820": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%15#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "823": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0"
      ]
    },
    "824": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%91#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "827": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0"
      ]
    },
    "828": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%17#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "831": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%17#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "reinterpret_bytes[8]%17#0",
        "tmp%94#0"
      ]
    },
    "833": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%17#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "reinterpret_bytes[8]%17#0",
        "tmp%94#0",
        "1"
      ]
    },
    "834": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "reinterpret_bytes[8]%17#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "reinterpret_bytes[8]%17#0",
        "gtxn_idx%12#0"
      ]
    },
    "835": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)",
        "reinterpret_bytes[8]%17#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "reinterpret_bytes[8]%17#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)"
      ]
    },
    "836": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "reinterpret_bytes[8]%17#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "reinterpret_bytes[8]%17#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0"
      ]
    },
    "838": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay",
        "reinterpret_bytes[8]%17#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "reinterpret_bytes[8]%17#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay"
      ]
    },
    "839": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0",
        "reinterpret_bytes[8]%17#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "reinterpret_bytes[8]%17#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0"
      ]
    },
    "840": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "reinterpret_bytes[8]%17#0",
        "gtxn_idx%12#0"
      ]
    },
    "841": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "op": "callsub borrow",
      "stack_out": []
    },
    "844": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "845": {
      "op": "return",
      "stack_out": []
    },
    "846": {
      "block": "main_withdrawDeposit_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "848": {
      "op": "!",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "849": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "850": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "852": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "853": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "855": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "2"
      ]
    },
    "857": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "858": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ]
    },
    "859": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ]
    },
    "861": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0",
        "axfer"
      ]
    },
    "862": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ]
    },
    "863": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "864": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%12#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "867": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%83#0"
      ]
    },
    "868": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%13#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%83#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "871": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0"
      ]
    },
    "872": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0"
      ]
    },
    "874": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "1"
      ]
    },
    "875": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0",
        "gtxn_idx%10#0"
      ]
    },
    "876": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)",
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0",
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)"
      ]
    },
    "877": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "tmp%83#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0"
      ]
    },
    "879": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "pay",
        "tmp%83#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0",
        "pay"
      ]
    },
    "880": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type_matches%10#0",
        "tmp%83#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0",
        "gtxn_idx%10#0",
        "gtxn_type_matches%10#0"
      ]
    },
    "881": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%83#0",
        "tmp%84#0",
        "gtxn_idx%10#0"
      ]
    },
    "882": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "op": "callsub withdrawDeposit",
      "stack_out": []
    },
    "885": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "886": {
      "op": "return",
      "stack_out": []
    },
    "887": {
      "block": "main_depositAlgo_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "889": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "890": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "891": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "893": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "894": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "896": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "2"
      ]
    },
    "898": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "899": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ]
    },
    "900": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ]
    },
    "902": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "pay"
      ]
    },
    "903": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ]
    },
    "904": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "905": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "908": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%76#0"
      ]
    },
    "909": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%76#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%76#0",
        "tmp%77#0"
      ]
    },
    "911": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%7#0",
        "tmp%76#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%76#0",
        "tmp%77#0",
        "1"
      ]
    },
    "912": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%76#0",
        "gtxn_idx%8#0"
      ]
    },
    "913": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)",
        "tmp%76#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%76#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)"
      ]
    },
    "914": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%76#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0"
      ]
    },
    "916": {
      "op": "intc_1 // pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%76#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay"
      ]
    },
    "917": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%76#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0"
      ]
    },
    "918": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%76#0",
        "gtxn_idx%8#0"
      ]
    },
    "919": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "op": "callsub depositAlgo",
      "stack_out": []
    },
    "922": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "923": {
      "op": "return",
      "stack_out": []
    },
    "924": {
      "block": "main_depositASA_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "926": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "927": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "928": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "930": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "931": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "933": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "2"
      ]
    },
    "935": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "936": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "937": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "939": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "axfer"
      ]
    },
    "940": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "941": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "942": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%10#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "945": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%69#0"
      ]
    },
    "946": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%69#0",
        "tmp%70#0"
      ]
    },
    "948": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%5#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%69#0",
        "tmp%70#0",
        "1"
      ]
    },
    "949": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%69#0",
        "gtxn_idx%6#0"
      ]
    },
    "950": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)",
        "tmp%69#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%69#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)"
      ]
    },
    "951": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%69#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0"
      ]
    },
    "953": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay",
        "tmp%69#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%69#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay"
      ]
    },
    "954": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%69#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0"
      ]
    },
    "955": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%69#0",
        "gtxn_idx%6#0"
      ]
    },
    "956": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA",
      "op": "callsub depositASA",
      "stack_out": []
    },
    "959": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "960": {
      "op": "return",
      "stack_out": []
    },
    "961": {
      "block": "main_addNewCollateralType_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "963": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "964": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "965": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "967": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "968": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "971": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%63#0"
      ]
    },
    "973": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[8]%9#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%63#0",
        "1"
      ]
    },
    "974": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0",
        "gtxn_idx%4#0"
      ]
    },
    "975": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "976": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "978": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "979": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "980": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%9#0",
        "gtxn_idx%4#0"
      ]
    },
    "981": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "op": "callsub addNewCollateralType",
      "stack_out": []
    },
    "984": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "985": {
      "op": "return",
      "stack_out": []
    },
    "986": {
      "block": "main_getOraclePrice_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "988": {
      "op": "!",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "989": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "990": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "992": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "993": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "996": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "999": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "1000": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "1002": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "1003": {
      "op": "concat",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1004": {
      "op": "log",
      "stack_out": []
    },
    "1005": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1006": {
      "op": "return",
      "stack_out": []
    },
    "1007": {
      "block": "main_getAcceptedCollateralsCount_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1009": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1010": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1011": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1013": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1014": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "op": "callsub getAcceptedCollateralsCount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1017": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "1018": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "1020": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "1021": {
      "op": "concat",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1022": {
      "op": "log",
      "stack_out": []
    },
    "1023": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1024": {
      "op": "return",
      "stack_out": []
    },
    "1025": {
      "block": "main_getTotalDeposits_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1027": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1028": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1029": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1031": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1032": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "op": "callsub getTotalDeposits",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1035": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "1036": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "1038": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "1039": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1040": {
      "op": "log",
      "stack_out": []
    },
    "1041": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1042": {
      "op": "return",
      "stack_out": []
    },
    "1043": {
      "block": "main_getCirculatingLST_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1045": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1046": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1047": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1049": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1050": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "op": "callsub getCirculatingLST",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1053": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1054": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1056": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1057": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1058": {
      "op": "log",
      "stack_out": []
    },
    "1059": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1060": {
      "op": "return",
      "stack_out": []
    },
    "1061": {
      "block": "main_configureLSTToken_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1063": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1064": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1065": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1067": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1068": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1070": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "1"
      ]
    },
    "1071": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1072": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "1073": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "1075": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "1076": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "1077": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1078": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1081": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%38#0"
      ]
    },
    "1082": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "op": "callsub configureLSTToken",
      "stack_out": []
    },
    "1085": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1086": {
      "op": "return",
      "stack_out": []
    },
    "1087": {
      "block": "main_optInToLST_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1089": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1090": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1091": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1093": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1094": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1097": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1098": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "1100": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "1"
      ]
    },
    "1101": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "gtxn_idx%2#0"
      ]
    },
    "1102": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "1103": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "1105": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "1106": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "1107": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%31#0",
        "gtxn_idx%2#0"
      ]
    },
    "1108": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "op": "callsub optInToLST",
      "stack_out": []
    },
    "1111": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1112": {
      "op": "return",
      "stack_out": []
    },
    "1113": {
      "block": "main_generateLSTToken_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1115": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1116": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1117": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1119": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1120": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1122": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "1"
      ]
    },
    "1123": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1124": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "1125": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "1127": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "1128": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "1129": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1130": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "op": "callsub generateLSTToken",
      "stack_out": []
    },
    "1133": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1134": {
      "op": "return",
      "stack_out": []
    },
    "1135": {
      "block": "main_initApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1137": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1138": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1139": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1141": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1142": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1144": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "1145": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1146": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "1147": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "1149": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1150": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1151": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1152": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1155": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ]
    },
    "1156": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1159": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1160": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1163": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1164": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1167": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1168": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1171": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1172": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[1]%1#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "1175": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1176": {
      "op": "txnas Applications",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1178": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "op": "callsub initApplication",
      "stack_out": []
    },
    "1181": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1182": {
      "op": "return",
      "stack_out": []
    },
    "1183": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1185": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1186": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1187": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1189": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1190": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1191": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "1194": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1195": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1197": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1200": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1201": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "1204": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1205": {
      "op": "return",
      "stack_out": []
    },
    "1206": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "params": {
        "admin#0": "bytes",
        "baseTokenId#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1209": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "1210": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "1212": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1213": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseTokenId#0 (copy)"
      ]
    },
    "1215": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1216": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "1217": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "1218": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1219": {
      "retsub": true,
      "op": "retsub"
    },
    "1220": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "params": {
        "mbrTxn#0": "uint64",
        "ltv_bps#0": "uint64",
        "liq_threshold_bps#0": "uint64",
        "interest_bps#0": "uint64",
        "origination_fee_bps#0": "uint64",
        "protocol_share_bps#0": "uint64",
        "oracle_app_id#0": "uint64"
      },
      "block": "initApplication",
      "stack_in": [],
      "op": "proto 7 0"
    },
    "1223": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1225": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1226": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1227": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1228": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1229": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1230": {
      "op": "assert",
      "stack_out": []
    },
    "1231": {
      "op": "frame_dig -7",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1233": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1235": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1236": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1237": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1238": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "1239": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1240": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "1243": {
      "op": "frame_dig -7",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1245": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1247": {
      "op": "pushint 400000 // 400000",
      "defined_out": [
        "400000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "400000"
      ]
    },
    "1251": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1252": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "1255": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1256": {
      "block": "initApplication_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "1257": {
      "op": "bytec 15 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\""
      ],
      "stack_out": [
        "\"ltv_bps\""
      ]
    },
    "1259": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ]
    },
    "1261": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1262": {
      "op": "bytec 7 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\""
      ],
      "stack_out": [
        "\"liq_threshold_bps\""
      ]
    },
    "1264": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ]
    },
    "1266": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1267": {
      "op": "bytec 16 // \"interest_bps\"",
      "defined_out": [
        "\"interest_bps\""
      ],
      "stack_out": [
        "\"interest_bps\""
      ]
    },
    "1269": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"interest_bps\"",
        "interest_bps#0 (copy)"
      ],
      "stack_out": [
        "\"interest_bps\"",
        "interest_bps#0 (copy)"
      ]
    },
    "1271": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1272": {
      "op": "bytec 17 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\""
      ],
      "stack_out": [
        "\"origination_fee_bps\""
      ]
    },
    "1274": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ],
      "stack_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ]
    },
    "1276": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1277": {
      "op": "bytec 12 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\""
      ],
      "stack_out": [
        "\"accepted_collaterals_count\""
      ]
    },
    "1279": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ]
    },
    "1280": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1281": {
      "op": "bytec 8 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\""
      ],
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "1283": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "1284": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1285": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "1287": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circulating_lst\"",
        "0"
      ]
    },
    "1288": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1289": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\""
      ],
      "stack_out": [
        "\"total_deposits\""
      ]
    },
    "1290": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_deposits\"",
        "0"
      ]
    },
    "1291": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1292": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\""
      ],
      "stack_out": [
        "\"active_loan_records\""
      ]
    },
    "1293": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"active_loan_records\"",
        "0"
      ]
    },
    "1294": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1295": {
      "op": "bytec 18 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\""
      ],
      "stack_out": [
        "\"protocol_share_bps\""
      ]
    },
    "1297": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ],
      "stack_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ]
    },
    "1299": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1300": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000"
      ],
      "stack_out": [
        "10000"
      ]
    },
    "1302": {
      "op": "frame_dig -2",
      "stack_out": [
        "10000",
        "protocol_share_bps#0 (copy)"
      ]
    },
    "1304": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1305": {
      "op": "pushbytes \"depositor_share_bps\"",
      "defined_out": [
        "\"depositor_share_bps\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"depositor_share_bps\""
      ]
    },
    "1326": {
      "op": "swap",
      "stack_out": [
        "\"depositor_share_bps\"",
        "new_state_value%0#0"
      ]
    },
    "1327": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1328": {
      "op": "bytec 19 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\""
      ],
      "stack_out": [
        "\"oracle_app\""
      ]
    },
    "1330": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ],
      "stack_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ]
    },
    "1332": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1333": {
      "op": "bytec 9 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\""
      ],
      "stack_out": [
        "\"lst_token_id\""
      ]
    },
    "1335": {
      "op": "pushbytes 0x0000000000000063",
      "defined_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ],
      "stack_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ]
    },
    "1345": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1346": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1347": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "1348": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1349": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1350": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1351": {
      "op": "bz initApplication_after_if_else@7",
      "stack_out": []
    },
    "1354": {
      "op": "itxn_begin"
    },
    "1355": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1357": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1358": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1359": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1360": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "1361": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1362": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "1363": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1365": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1367": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1369": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1370": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1372": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "1373": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1375": {
      "op": "itxn_submit"
    },
    "1376": {
      "block": "initApplication_after_if_else@7",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "1377": {
      "block": "initApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1378": {
      "op": "b initApplication_bool_merge@4"
    },
    "1381": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "params": {
        "mbrTxn#0": "uint64"
      },
      "block": "generateLSTToken",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1384": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1386": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1387": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1388": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1389": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1390": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1391": {
      "op": "assert",
      "stack_out": []
    },
    "1392": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1394": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1396": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1397": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1398": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1399": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "1400": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1401": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "1404": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1406": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1408": {
      "op": "pushint 102000 // 102000",
      "defined_out": [
        "102000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "102000"
      ]
    },
    "1412": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1413": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "1416": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1417": {
      "block": "generateLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "1418": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1419": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "1420": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1421": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1422": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1423": {
      "op": "itxn_begin"
    },
    "1424": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1426": {
      "op": "dig 1",
      "defined_out": [
        "baseToken#0",
        "baseToken#0 (copy)",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "1428": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "baseToken#0",
        "check%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1430": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "1431": {
      "op": "dig 2",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "baseToken#0 (copy)"
      ]
    },
    "1433": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "baseToken#0",
        "check%1#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "1435": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "1436": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1438": {
      "op": "uncover 4",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "baseToken#0"
      ]
    },
    "1440": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%2#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "1442": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0"
      ]
    },
    "1443": {
      "op": "pushbytes \"c\"",
      "defined_out": [
        "\"c\"",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "\"c\""
      ]
    },
    "1446": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "\"c\"",
        "value%2#0"
      ]
    },
    "1447": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "1448": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "0"
      ]
    },
    "1449": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1450": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1451": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "1452": {
      "op": "pushbytes \"c\"",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "maybe_value%3#0",
        "\"c\""
      ]
    },
    "1455": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "\"c\"",
        "maybe_value%3#0"
      ]
    },
    "1456": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "1457": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "1459": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1461": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "1463": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "0"
      ]
    },
    "1464": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "1466": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "1468": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1470": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "1472": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "1474": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1476": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "1477": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1479": {
      "op": "itxn_submit"
    },
    "1480": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "result.CreatedAssetID#0"
      ],
      "stack_out": [
        "result.CreatedAssetID#0"
      ]
    },
    "1482": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1483": {
      "op": "bytec 9 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "1485": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "1486": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1487": {
      "retsub": true,
      "op": "retsub"
    },
    "1488": {
      "block": "generateLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1489": {
      "op": "b generateLSTToken_bool_merge@4"
    },
    "1492": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "params": {
        "lstAssetId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "optInToLST",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1495": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1497": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1498": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1499": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1500": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1501": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1502": {
      "op": "assert",
      "stack_out": []
    },
    "1503": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1505": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1507": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1508": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1509": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1510": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "1511": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1512": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "1515": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1517": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1519": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "2000"
      ]
    },
    "1522": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1523": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "1526": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1527": {
      "block": "optInToLST_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "1528": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAssetId#0 (copy)"
      ],
      "stack_out": [
        "lstAssetId#0 (copy)"
      ]
    },
    "1530": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1531": {
      "op": "bytec 9 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "1533": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "1534": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1535": {
      "op": "itxn_begin"
    },
    "1536": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1538": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1539": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1541": {
      "op": "frame_dig -2",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "lstAssetId#0 (copy)"
      ]
    },
    "1543": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1545": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1547": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1548": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1550": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "1551": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1553": {
      "op": "itxn_submit"
    },
    "1554": {
      "retsub": true,
      "op": "retsub"
    },
    "1555": {
      "block": "optInToLST_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1556": {
      "op": "b optInToLST_bool_merge@4"
    },
    "1559": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "params": {
        "axferTxn#0": "uint64",
        "circulating_lst#0": "uint64"
      },
      "block": "configureLSTToken",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1562": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1564": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1565": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1566": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1567": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1568": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1569": {
      "op": "assert",
      "stack_out": []
    },
    "1570": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1571": {
      "op": "bytec 9 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "1573": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1574": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1575": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1576": {
      "op": "frame_dig -2",
      "defined_out": [
        "axferTxn#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "axferTxn#0 (copy)"
      ]
    },
    "1578": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1580": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1581": {
      "error": "LST token not set",
      "op": "assert // LST token not set",
      "stack_out": []
    },
    "1582": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "1584": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1586": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1587": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1588": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1589": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "1590": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1591": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "1594": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "1596": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1598": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1600": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1601": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "1604": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1605": {
      "block": "configureLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "1606": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "1608": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ],
      "stack_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ]
    },
    "1610": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1611": {
      "retsub": true,
      "op": "retsub"
    },
    "1612": {
      "block": "configureLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1613": {
      "op": "b configureLSTToken_bool_merge@4"
    },
    "1616": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "params": {},
      "block": "getCirculatingLST",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1617": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "1619": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1620": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1621": {
      "retsub": true,
      "op": "retsub"
    },
    "1622": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "params": {},
      "block": "getTotalDeposits",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1623": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "1624": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1625": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1626": {
      "retsub": true,
      "op": "retsub"
    },
    "1627": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "params": {},
      "block": "getAcceptedCollateralsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1628": {
      "op": "bytec 12 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1630": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1631": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1632": {
      "retsub": true,
      "op": "retsub"
    },
    "1633": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "params": {
        "tokenId#0": "bytes"
      },
      "block": "getOraclePrice",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1636": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1637": {
      "op": "bytec 19 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_app\""
      ]
    },
    "1639": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "maybe_exists%0#0"
      ]
    },
    "1640": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "1641": {
      "op": "dup",
      "defined_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "1642": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "address#0",
        "check%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "check%0#0"
      ]
    },
    "1644": {
      "op": "bury 1",
      "stack_out": [
        "oracle#0",
        "check%0#0"
      ]
    },
    "1646": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "1647": {
      "op": "itxn_begin"
    },
    "1648": {
      "op": "pushbytes 0xac13e004 // method \"getTokenPrice(uint64)(uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))"
      ]
    },
    "1654": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "1656": {
      "op": "frame_dig -1",
      "defined_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ]
    },
    "1658": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "1660": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1662": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1664": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1666": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "1667": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1669": {
      "op": "itxn_submit"
    },
    "1670": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1672": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1673": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1676": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "1678": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1679": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1680": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "12"
      ]
    },
    "1682": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1683": {
      "retsub": true,
      "op": "retsub"
    },
    "1684": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "updateCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1687": {
      "op": "bytec 10 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "1689": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1691": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1692": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1693": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "1694": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0",
        "collateral#0"
      ]
    },
    "1695": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "1696": {
      "op": "uncover 2",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "1698": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0"
      ]
    },
    "1699": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "1700": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0",
        "tmp%1#0"
      ]
    },
    "1703": {
      "op": "swap",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0"
      ]
    },
    "1704": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "0"
      ]
    },
    "1705": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1706": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%2#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1708": {
      "op": "btoi",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1709": {
      "op": "==",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "1710": {
      "op": "bz updateCollateralTotal_after_if_else@2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0"
      ]
    },
    "1713": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0"
      ]
    },
    "1715": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "1716": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "collateral#0 (copy)",
        "16"
      ]
    },
    "1718": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "tmp%6#0"
      ]
    },
    "1719": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "tmp%6#0",
        "amount#0 (copy)"
      ]
    },
    "1721": {
      "op": "+",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "1722": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "newTotal#0",
        "collateral#0"
      ]
    },
    "1723": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "newTotal#0",
        "tmp%8#0"
      ]
    },
    "1726": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%8#0",
        "newTotal#0"
      ]
    },
    "1727": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ]
    },
    "1728": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "1730": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ]
    },
    "1732": {
      "op": "concat",
      "defined_out": [
        "collateral#0",
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1733": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "1734": {
      "op": "concat",
      "defined_out": [
        "collateral#0",
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1735": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0",
        "tmp%0#0"
      ]
    },
    "1737": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1738": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0"
      ]
    },
    "1739": {
      "block": "updateCollateralTotal_after_if_else@2",
      "stack_in": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1740": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "params": {
        "collateralTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "addNewCollateralType",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1743": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1744": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "1745": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1746": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1747": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1748": {
      "op": "txn Sender",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "1750": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1751": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1752": {
      "op": "app_global_get_ex",
      "defined_out": [
        "baseToken#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1753": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1754": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%1#0"
      ]
    },
    "1755": {
      "op": "assert",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1756": {
      "op": "frame_dig -2",
      "defined_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1758": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "1759": {
      "op": "dup"
    },
    "1760": {
      "op": "uncover 2",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0",
        "baseToken#0"
      ]
    },
    "1762": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1763": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1764": {
      "op": "bytec 10 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\""
      ]
    },
    "1766": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1768": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "1769": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "1770": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1771": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "1773": {
      "op": "!",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%5#0"
      ]
    },
    "1774": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "1775": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "1777": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "1779": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0"
      ]
    },
    "1780": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1781": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1782": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "1783": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%7#0"
      ]
    },
    "1784": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "1787": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "1789": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0"
      ]
    },
    "1791": {
      "op": "pushint 101000 // 101000",
      "defined_out": [
        "101000",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0",
        "101000"
      ]
    },
    "1795": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%9#0"
      ]
    },
    "1796": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "1799": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "1800": {
      "block": "addNewCollateralType_bool_merge@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "1801": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0"
      ]
    },
    "1802": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0",
        "\"base_token_id\""
      ]
    },
    "1803": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1804": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0"
      ]
    },
    "1805": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1807": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ]
    },
    "1808": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1809": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "1819": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0"
      ]
    },
    "1820": {
      "op": "frame_dig 1",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ]
    },
    "1822": {
      "op": "dup"
    },
    "1823": {
      "op": "uncover 2",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "newAcceptedCollateral#0"
      ]
    },
    "1825": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "1826": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0"
      ]
    },
    "1827": {
      "op": "bytec 12 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1829": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1830": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0"
      ]
    },
    "1831": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "1"
      ]
    },
    "1832": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0"
      ]
    },
    "1833": {
      "op": "bytec 12 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1835": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "\"accepted_collaterals_count\"",
        "new_state_value%0#0"
      ]
    },
    "1836": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "1837": {
      "op": "itxn_begin"
    },
    "1838": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1840": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1841": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1842": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1844": {
      "op": "frame_dig 0",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%2#0"
      ]
    },
    "1846": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1848": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1850": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "1852": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "4"
      ]
    },
    "1853": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "1855": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "1000"
      ]
    },
    "1856": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "1858": {
      "op": "itxn_submit"
    },
    "1859": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1860": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "1862": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "1863": {
      "retsub": true,
      "op": "retsub"
    },
    "1864": {
      "block": "addNewCollateralType_bool_false@3",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "1865": {
      "op": "b addNewCollateralType_bool_merge@4"
    },
    "1868": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "params": {
        "amount#0": "uint64"
      },
      "block": "calculateLSTDue",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1871": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1872": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "1874": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1875": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1876": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "10000"
      ]
    },
    "1878": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "1879": {
      "op": "intc_0 // 0",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "1880": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "1881": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1882": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0"
      ]
    },
    "1883": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0"
      ]
    },
    "1884": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "1886": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "1887": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "1889": {
      "op": "divw",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1890": {
      "retsub": true,
      "op": "retsub"
    },
    "1891": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1894": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1895": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "1896": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1897": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1898": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1899": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1901": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "1903": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1905": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "1906": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1909": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1911": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "1913": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "1915": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "1916": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1919": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1921": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "1923": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "1925": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "1926": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1929": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "1930": {
      "block": "depositASA_bool_merge@5",
      "stack_in": [
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1931": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "1933": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "1935": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "1936": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%8#0"
      ]
    },
    "1937": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1938": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "1939": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1940": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1941": {
      "op": "bury 1",
      "stack_out": [
        "baseToken#0",
        "maybe_exists%1#0"
      ]
    },
    "1943": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1944": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "1945": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "1946": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1947": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%2#0"
      ]
    },
    "1948": {
      "op": "bnz depositASA_else_body@7",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1951": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "1953": {
      "block": "depositASA_after_if_else@8",
      "stack_in": [
        "baseToken#0",
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "1954": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1956": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1957": {
      "op": "bytec 9 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "1959": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1960": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "1961": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1962": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "1964": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1966": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1968": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "1970": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "4"
      ]
    },
    "1971": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "1973": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "1000"
      ]
    },
    "1974": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "1976": {
      "op": "itxn_submit"
    },
    "1977": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0"
      ]
    },
    "1978": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "1980": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1981": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%4#0"
      ]
    },
    "1982": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0"
      ]
    },
    "1983": {
      "op": "bytec 6 // \"circulating_lst\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "1985": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "1986": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1987": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "1988": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "1989": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1990": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0"
      ]
    },
    "1991": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "1993": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0"
      ]
    },
    "1994": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "1995": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "1996": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1997": {
      "retsub": true,
      "op": "retsub"
    },
    "1998": {
      "block": "depositASA_else_body@7",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "amount#0 (copy)"
      ]
    },
    "2000": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "op": "callsub calculateLSTDue",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2003": {
      "op": "b depositASA_after_if_else@8"
    },
    "2006": {
      "block": "depositASA_bool_false@4",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "2007": {
      "op": "b depositASA_bool_merge@5"
    },
    "2010": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "params": {
        "depositTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2013": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2014": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2015": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2016": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2018": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": []
    },
    "2019": {
      "op": "frame_dig -3",
      "defined_out": [
        "depositTxn#0 (copy)"
      ],
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "2021": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2023": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2025": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2026": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "2029": {
      "op": "frame_dig -3",
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "2031": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2033": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "amount#0 (copy)"
      ]
    },
    "2035": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2036": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "2039": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2040": {
      "block": "depositAlgo_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2041": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2043": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2045": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "1000"
      ]
    },
    "2046": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2047": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "2048": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2049": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2050": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2051": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2052": {
      "op": "bnz depositAlgo_else_body@6",
      "stack_out": []
    },
    "2055": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2057": {
      "block": "depositAlgo_after_if_else@7",
      "stack_in": [
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "2058": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2060": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2061": {
      "op": "bytec 9 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "2063": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2064": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "2065": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2066": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "2068": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2070": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2072": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2074": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "4"
      ]
    },
    "2075": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2077": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "1000"
      ]
    },
    "2078": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2080": {
      "op": "itxn_submit"
    },
    "2081": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstDue#2",
        "0"
      ]
    },
    "2082": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "2084": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstDue#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2085": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "maybe_value%3#0"
      ]
    },
    "2086": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2087": {
      "op": "bytec 6 // \"circulating_lst\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "2089": {
      "op": "swap",
      "stack_out": [
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "2090": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2091": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2092": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2093": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2094": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "2095": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "2097": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "2098": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "2099": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "2100": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2101": {
      "retsub": true,
      "op": "retsub"
    },
    "2102": {
      "block": "depositAlgo_else_body@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2104": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "op": "callsub calculateLSTDue",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2107": {
      "op": "b depositAlgo_after_if_else@7"
    },
    "2110": {
      "block": "depositAlgo_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2111": {
      "op": "b depositAlgo_bool_merge@4"
    },
    "2114": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "lstAppId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "withdrawDeposit",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "2117": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2118": {
      "op": "bytec 9 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "2120": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2121": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2122": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2123": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2125": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0"
      ]
    },
    "2127": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2129": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%2#0"
      ]
    },
    "2130": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2133": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2135": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "lstAsset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%3#0"
      ]
    },
    "2137": {
      "op": "frame_dig 0",
      "stack_out": [
        "lstAsset#0",
        "tmp%3#0",
        "lstAsset#0"
      ]
    },
    "2139": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%4#0"
      ]
    },
    "2140": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2143": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2145": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0"
      ]
    },
    "2147": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "2149": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%6#0"
      ]
    },
    "2150": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2153": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "2154": {
      "block": "withdrawDeposit_bool_merge@5",
      "stack_in": [
        "lstAsset#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2155": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "2157": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0"
      ]
    },
    "2159": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "3000",
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0",
        "3000"
      ]
    },
    "2162": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%8#0"
      ]
    },
    "2163": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2164": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "2166": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "lstAppId#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)",
        "tmp%9#0"
      ]
    },
    "2168": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%10#0"
      ]
    },
    "2169": {
      "op": "bz withdrawDeposit_else_body@7",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2172": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0"
      ]
    },
    "2173": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "2175": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ]
    },
    "2176": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "2177": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0"
      ]
    },
    "2178": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2179": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%1#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "maybe_exists%1#0"
      ]
    },
    "2180": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "2181": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "2183": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "2184": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "2186": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2187": {
      "block": "withdrawDeposit_after_if_else@8",
      "stack_in": [
        "lstAsset#0",
        "asaDue#1"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0"
      ]
    },
    "2189": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "0"
      ]
    },
    "2190": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2191": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2192": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "maybe_value%1#0"
      ]
    },
    "2193": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "2194": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "2196": {
      "op": "pop",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0"
      ]
    },
    "2197": {
      "op": "dig 1",
      "defined_out": [
        "asaDue#1",
        "asaDue#1 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "asaDue#1 (copy)"
      ]
    },
    "2199": {
      "op": ">=",
      "defined_out": [
        "asaDue#1",
        "tmp%15#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0"
      ]
    },
    "2200": {
      "op": "assert",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2201": {
      "op": "itxn_begin"
    },
    "2202": {
      "op": "txn Sender",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2204": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2205": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2206": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2207": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "2208": {
      "op": "btoi",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2209": {
      "op": "dig 2",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "asaDue#1 (copy)"
      ]
    },
    "2211": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2213": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2215": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2217": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "4"
      ]
    },
    "2218": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2220": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "1000"
      ]
    },
    "2221": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2223": {
      "op": "itxn_submit"
    },
    "2224": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "2225": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"circulating_lst\""
      ]
    },
    "2227": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2228": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0"
      ]
    },
    "2229": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "asaDue#1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "2231": {
      "op": "-",
      "defined_out": [
        "asaDue#1",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0"
      ]
    },
    "2232": {
      "op": "bytec 6 // \"circulating_lst\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "2234": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "2235": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2236": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "2237": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"total_deposits\""
      ]
    },
    "2238": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2239": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0"
      ]
    },
    "2240": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "maybe_value%4#0",
        "asaDue#1"
      ]
    },
    "2241": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0"
      ]
    },
    "2242": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "2243": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "2244": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2245": {
      "retsub": true,
      "op": "retsub"
    },
    "2246": {
      "block": "withdrawDeposit_else_body@7",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "itxn_begin"
    },
    "2247": {
      "op": "bytec 13 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "lstAsset#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "2249": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2251": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "2253": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2255": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "lstAsset#0",
        "appl"
      ]
    },
    "2257": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2259": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "lstAsset#0",
        "1000"
      ]
    },
    "2260": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2262": {
      "op": "itxn_submit"
    },
    "2263": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "2265": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2266": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "tmp%0#1"
      ]
    },
    "2269": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "2270": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "2273": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "2275": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "2276": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1"
      ]
    },
    "2277": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "2278": {
      "op": "itxn_begin"
    },
    "2279": {
      "op": "bytec 14 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "2281": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "2283": {
      "op": "frame_dig -2",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "2285": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "2287": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "2289": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "2291": {
      "op": "intc_3 // 1000",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "2292": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "2294": {
      "op": "itxn_submit"
    },
    "2295": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "2297": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2298": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%4#1"
      ]
    },
    "2301": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "awst_tmp%1#0"
      ]
    },
    "2302": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "2305": {
      "op": "bytec 5 // 0x151f7c75",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1",
        "0x151f7c75"
      ]
    },
    "2307": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ]
    },
    "2308": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ]
    },
    "2309": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "2310": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "2312": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "2313": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "2315": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2316": {
      "op": "b withdrawDeposit_after_if_else@8"
    },
    "2319": {
      "block": "withdrawDeposit_bool_false@4",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "2320": {
      "op": "b withdrawDeposit_bool_merge@5"
    },
    "2323": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "params": {
        "assetTransferTxn#0": "uint64",
        "requestedLoanAmount#0": "uint64",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64",
        "collateralTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "borrow",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "2326": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "baseTokenOraclePrice#0"
      ]
    },
    "2328": {
      "op": "dupn 4",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "2330": {
      "op": "bytec 4 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"loan_record\""
      ]
    },
    "2332": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"loan_record\"",
        "tmp%0#0"
      ]
    },
    "2334": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%1#0"
      ]
    },
    "2335": {
      "op": "box_len",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "maybe_value%0#0",
        "hasLoan#0"
      ]
    },
    "2336": {
      "op": "dup",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "maybe_value%0#0",
        "hasLoan#0",
        "hasLoan#0 (copy)"
      ]
    },
    "2337": {
      "op": "uncover 2",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "hasLoan#0",
        "maybe_value%0#0"
      ]
    },
    "2339": {
      "op": "pop",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "2340": {
      "op": "bz borrow_else_body@2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2343": {
      "op": "txn Sender",
      "defined_out": [
        "hasLoan#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "2345": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%3#0"
      ]
    },
    "2348": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%3#0",
        "40"
      ]
    },
    "2350": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "2351": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2353": {
      "block": "borrow_after_if_else@3",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "2355": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "2357": {
      "op": "pushint 4000 // 4000",
      "defined_out": [
        "4000",
        "tmp%0#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#1",
        "4000"
      ]
    },
    "2360": {
      "op": "==",
      "defined_out": [
        "tmp%1#4"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%1#4"
      ]
    },
    "2361": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2362": {
      "op": "frame_dig -6",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2364": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "2366": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%2#0",
        "tmp%3#2"
      ]
    },
    "2368": {
      "op": "==",
      "defined_out": [
        "tmp%4#2"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%4#2"
      ]
    },
    "2369": {
      "op": "bz borrow_bool_false@21",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2372": {
      "op": "frame_dig -6",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2374": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%5#2"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%5#2"
      ]
    },
    "2376": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "tmp%5#2"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%5#2",
        "collateralAmount#0 (copy)"
      ]
    },
    "2378": {
      "op": "==",
      "defined_out": [
        "tmp%6#2"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%6#2"
      ]
    },
    "2379": {
      "op": "bz borrow_bool_false@21",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2382": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "2383": {
      "block": "borrow_bool_merge@22",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2384": {
      "op": "bytec 10 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "\"accepted_collaterals\""
      ]
    },
    "2386": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2388": {
      "op": "concat",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#5"
      ]
    },
    "2389": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "2390": {
      "op": "bury 1",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_exists%0#1"
      ]
    },
    "2392": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2393": {
      "op": "itxn_begin"
    },
    "2394": {
      "op": "bytec 13 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "2396": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2398": {
      "op": "frame_dig -3",
      "defined_out": [
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "lstApp#0 (copy)"
      ]
    },
    "2400": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2402": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "appl"
      ]
    },
    "2404": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2406": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "1000"
      ]
    },
    "2407": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2409": {
      "op": "itxn_submit"
    },
    "2410": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "awst_tmp%0#1"
      ]
    },
    "2412": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#1",
        "awst_tmp%0#1 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "awst_tmp%0#1",
        "awst_tmp%0#1 (copy)"
      ]
    },
    "2413": {
      "op": "extract 4 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "awst_tmp%0#1",
        "tmp%0#5"
      ]
    },
    "2416": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#5",
        "awst_tmp%0#1"
      ]
    },
    "2417": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#5",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#5",
        "tmp%1#0"
      ]
    },
    "2420": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#5",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#5",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2422": {
      "op": "==",
      "defined_out": [
        "tmp%0#5",
        "tmp%2#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#5",
        "tmp%2#1"
      ]
    },
    "2423": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#5"
      ]
    },
    "2424": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0"
      ]
    },
    "2425": {
      "op": "itxn_begin"
    },
    "2426": {
      "op": "bytec 14 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "2428": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0"
      ]
    },
    "2430": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "lstApp#0 (copy)"
      ]
    },
    "2432": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0"
      ]
    },
    "2434": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "2436": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0"
      ]
    },
    "2438": {
      "op": "intc_3 // 1000",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "2439": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0"
      ]
    },
    "2441": {
      "op": "itxn_submit"
    },
    "2442": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#1",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#1"
      ]
    },
    "2444": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#1",
        "awst_tmp%1#1 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#1",
        "awst_tmp%1#1 (copy)"
      ]
    },
    "2445": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#1",
        "circulatingExternalLST#0",
        "tmp%4#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#1",
        "tmp%4#3"
      ]
    },
    "2448": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "tmp%4#3",
        "awst_tmp%1#1"
      ]
    },
    "2449": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#3",
        "tmp%5#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "tmp%4#3",
        "tmp%5#3"
      ]
    },
    "2452": {
      "op": "bytec 5 // 0x151f7c75",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "tmp%4#3",
        "tmp%5#3",
        "0x151f7c75"
      ]
    },
    "2454": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#3",
        "tmp%6#2"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "tmp%4#3",
        "tmp%6#2"
      ]
    },
    "2455": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "tmp%4#3"
      ]
    },
    "2456": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "2457": {
      "op": "frame_dig 1",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateralToUse#1",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralToUse#1"
      ]
    },
    "2459": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateralToUse#1",
        "hC#0",
        "lC#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0"
      ]
    },
    "2460": {
      "op": "uncover 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "hC#0",
        "lC#0",
        "circulatingExternalLST#0"
      ]
    },
    "2462": {
      "op": "divw",
      "defined_out": [
        "collateralToUse#1",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "underlyingCollateral#0"
      ]
    },
    "2463": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "underlyingCollateral#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2465": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralOraclePrice#0",
        "collateralToUse#1",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "underlyingCollateral#0",
        "collateralOraclePrice#0"
      ]
    },
    "2468": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "hU#0",
        "lU#0"
      ]
    },
    "2469": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "collateralToUse#1",
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "hU#0",
        "lU#0",
        "1000000"
      ]
    },
    "2471": {
      "op": "divw",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralUSD#1"
      ]
    },
    "2472": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralToUse#1",
        "collateralUSD#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralUSD#1",
        "0"
      ]
    },
    "2473": {
      "op": "bytec 15 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralToUse#1",
        "collateralUSD#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralUSD#1",
        "0",
        "\"ltv_bps\""
      ]
    },
    "2475": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#1",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralUSD#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2476": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralUSD#1",
        "maybe_value%1#0"
      ]
    },
    "2477": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%4#0"
      ]
    },
    "2478": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralToUse#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%4#0",
        "10000"
      ]
    },
    "2480": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "2481": {
      "op": "dup",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maxBorrowUSD#0"
      ]
    },
    "2482": {
      "op": "frame_bury 3",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "2484": {
      "op": "pushbytes \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\""
      ]
    },
    "2501": {
      "op": "dig 1",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maxBorrowUSD#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\"",
        "maxBorrowUSD#0 (copy)"
      ]
    },
    "2503": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "2504": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0"
      ]
    },
    "2505": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2506": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2507": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%2#0"
      ]
    },
    "2508": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "2511": {
      "op": "dup",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "2512": {
      "op": "frame_bury 0",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "2514": {
      "op": "frame_dig -5",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "2516": {
      "op": "mulw",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ]
    },
    "2517": {
      "op": "intc 5 // 1000000",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0",
        "1000000"
      ]
    },
    "2519": {
      "op": "divw",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "2520": {
      "op": "dup",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "2521": {
      "op": "frame_bury 4",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "2523": {
      "op": "pushbytes \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\"",
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\""
      ]
    },
    "2544": {
      "op": "dig 1",
      "defined_out": [
        "\"last_requested_loan\"",
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "requestedLoanUSD#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\"",
        "requestedLoanUSD#0 (copy)"
      ]
    },
    "2546": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "2547": {
      "op": "dup2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "maxBorrowUSD#0 (copy)",
        "requestedLoanUSD#0 (copy)"
      ]
    },
    "2548": {
      "op": "-",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "new_state_value%0#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "new_state_value%0#0"
      ]
    },
    "2549": {
      "op": "pushbytes \"debug_diff\"",
      "defined_out": [
        "\"debug_diff\"",
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "new_state_value%0#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "new_state_value%0#0",
        "\"debug_diff\""
      ]
    },
    "2561": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"debug_diff\"",
        "new_state_value%0#0"
      ]
    },
    "2562": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "2563": {
      "op": ">=",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%0#6"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#6"
      ]
    },
    "2564": {
      "error": "exceeds LTV limit",
      "op": "assert // exceeds LTV limit",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2565": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "0"
      ]
    },
    "2566": {
      "op": "bytec 17 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\"",
        "0",
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "0",
        "\"origination_fee_bps\""
      ]
    },
    "2568": {
      "op": "app_global_get_ex",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "2569": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%0#0"
      ]
    },
    "2570": {
      "op": "frame_dig -5",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "2572": {
      "op": "*",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "2573": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#1",
        "10000"
      ]
    },
    "2575": {
      "op": "/",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "fee#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "fee#1"
      ]
    },
    "2576": {
      "op": "frame_dig -5",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "2578": {
      "op": "dig 1",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "fee#1",
        "fee#1 (copy)",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)",
        "fee#1 (copy)"
      ]
    },
    "2580": {
      "op": "-",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "fee#1",
        "disbursement#3"
      ]
    },
    "2581": {
      "op": "dup",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "fee#1",
        "disbursement#3",
        "disbursement#3 (copy)"
      ]
    },
    "2582": {
      "op": "cover 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "disbursement#3"
      ]
    },
    "2584": {
      "op": "frame_bury 2",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "fee#1"
      ]
    },
    "2586": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "0"
      ]
    },
    "2587": {
      "op": "bytec 8 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "0",
        "\"fee_pool\""
      ]
    },
    "2589": {
      "op": "app_global_get_ex",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2590": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "maybe_value%1#0"
      ]
    },
    "2591": {
      "op": "+",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "new_state_value%0#0"
      ]
    },
    "2592": {
      "op": "bytec 8 // \"fee_pool\"",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "new_state_value%0#0",
        "\"fee_pool\""
      ]
    },
    "2594": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "\"fee_pool\"",
        "new_state_value%0#0"
      ]
    },
    "2595": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3"
      ]
    },
    "2596": {
      "op": "pushbytes \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\"",
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "\"last_scaled_down_disbursement\""
      ]
    },
    "2627": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "\"last_scaled_down_disbursement\"",
        "disbursement#3"
      ]
    },
    "2628": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2629": {
      "op": "frame_dig 5",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "2631": {
      "op": "bz borrow_else_body@5",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2634": {
      "op": "txn Sender",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "2636": {
      "op": "dup",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "borrower#0 (copy)",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "borrower#0 (copy)"
      ]
    },
    "2637": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0"
      ]
    },
    "2640": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest",
      "op": "callsub accrueInterest",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "iar#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "iar#0",
        "existingLoan#0"
      ]
    },
    "2643": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "iar#0"
      ]
    },
    "2644": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "iar#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "iar#0",
        "17"
      ]
    },
    "2646": {
      "op": "extract_uint64",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%1#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "tmp%1#3"
      ]
    },
    "2647": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "tmp%1#3",
        "baseTokenOraclePrice#0"
      ]
    },
    "2649": {
      "op": "mulw",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "h1#0",
        "hasLoan#0",
        "l1#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "h1#0",
        "l1#0"
      ]
    },
    "2650": {
      "op": "intc 5 // 1000000",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "h1#0",
        "l1#0",
        "1000000"
      ]
    },
    "2652": {
      "op": "divw",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "oldLoanUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "oldLoanUSD#0"
      ]
    },
    "2653": {
      "op": "frame_dig 4",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "oldLoanUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "2655": {
      "op": "+",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "totalRequestedUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalRequestedUSD#0"
      ]
    },
    "2656": {
      "op": "frame_dig 3",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalRequestedUSD#0",
        "maxBorrowUSD#0"
      ]
    },
    "2658": {
      "op": "<=",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "tmp%2#1"
      ]
    },
    "2659": {
      "error": "exceeds LTV limit with existing debt",
      "op": "assert // exceeds LTV limit with existing debt",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0"
      ]
    },
    "2660": {
      "op": "dup",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "existingLoan#0 (copy)"
      ]
    },
    "2661": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "40"
      ]
    },
    "2663": {
      "op": "extract_uint64",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "tmp%4#0"
      ]
    },
    "2664": {
      "op": "frame_dig -4",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralAmount#0 (copy)",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "tmp%4#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "2666": {
      "op": "+",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0"
      ]
    },
    "2667": {
      "op": "dig 1",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "existingLoan#0 (copy)"
      ]
    },
    "2669": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "existingLoan#0 (copy)",
        "65"
      ]
    },
    "2671": {
      "op": "extract_uint64",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%8#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "tmp%8#0"
      ]
    },
    "2672": {
      "op": "frame_dig 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "tmp%8#0",
        "disbursement#3"
      ]
    },
    "2674": {
      "op": "dup",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "disbursement#3 (copy)",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%8#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "tmp%8#0",
        "disbursement#3 (copy)",
        "disbursement#3 (copy)"
      ]
    },
    "2675": {
      "op": "cover 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "tmp%8#0",
        "disbursement#3 (copy)"
      ]
    },
    "2677": {
      "op": "+",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "newTotalDisb#0"
      ]
    },
    "2678": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "disbursement#3"
      ]
    },
    "2679": {
      "op": "itob",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "val_as_bytes%0#0"
      ]
    },
    "2680": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "to_encode%0#0",
        "totalCollateral#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "2682": {
      "op": "itob",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2683": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "2684": {
      "op": "bytec 11 // 0x00",
      "defined_out": [
        "0x00",
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x00"
      ]
    },
    "2686": {
      "op": "concat",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%2#0",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2687": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "2688": {
      "op": "concat",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2689": {
      "op": "uncover 3",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "encoded_tuple_buffer%3#0",
        "existingLoan#0"
      ]
    },
    "2691": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "tmp%9#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "encoded_tuple_buffer%3#0",
        "tmp%9#0"
      ]
    },
    "2694": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "tmp%9#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2695": {
      "op": "cover 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "totalCollateral#0",
        "encoded_tuple_buffer%3#0",
        "newTotalDisb#0",
        "tmp%9#0"
      ]
    },
    "2697": {
      "op": "uncover 4",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "totalCollateral#0",
        "encoded_tuple_buffer%3#0",
        "newTotalDisb#0",
        "tmp%9#0",
        "borrower#0"
      ]
    },
    "2699": {
      "op": "uncover 4",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "encoded_tuple_buffer%3#0",
        "newTotalDisb#0",
        "tmp%9#0",
        "borrower#0",
        "totalCollateral#0"
      ]
    },
    "2701": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord",
      "op": "callsub updateLoanRecord",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "updateLoanRecord%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "updateLoanRecord%0#0"
      ]
    },
    "2704": {
      "op": "pop",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2705": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2707": {
      "op": "frame_dig -4",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "2709": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2712": {
      "block": "borrow_after_if_else@6",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ],
      "op": "txn Sender"
    },
    "2714": {
      "op": "intc_0 // 0"
    },
    "2715": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2716": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "maybe_exists%0#1",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "2717": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1"
      ]
    },
    "2718": {
      "op": "btoi",
      "defined_out": [
        "borrower#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1"
      ]
    },
    "2719": {
      "op": "bnz borrow_else_body@10",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "2722": {
      "op": "itxn_begin"
    },
    "2723": {
      "op": "frame_dig 2",
      "defined_out": [
        "borrower#0",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3"
      ]
    },
    "2725": {
      "op": "itxn_field Amount",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "2727": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2729": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "1"
      ]
    },
    "2730": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2732": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "1000"
      ]
    },
    "2733": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2735": {
      "op": "itxn_submit"
    },
    "2736": {
      "retsub": true,
      "op": "retsub"
    },
    "2737": {
      "block": "borrow_else_body@10",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0"
      ],
      "op": "itxn_begin"
    },
    "2738": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "0"
      ]
    },
    "2739": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2740": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "2741": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%1#1"
      ]
    },
    "2742": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "2743": {
      "op": "frame_dig 2",
      "defined_out": [
        "disbursement#3",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "disbursement#3"
      ]
    },
    "2745": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "2747": {
      "op": "itxn_field XferAsset",
      "defined_out": [
        "borrower#0",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "2749": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2751": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "4"
      ]
    },
    "2752": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2754": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "1000"
      ]
    },
    "2755": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2757": {
      "op": "itxn_submit"
    },
    "2758": {
      "retsub": true,
      "op": "retsub"
    },
    "2759": {
      "block": "borrow_else_body@5",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "borrowerAddress#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0"
      ]
    },
    "2761": {
      "op": "frame_dig -4",
      "defined_out": [
        "borrowerAddress#0",
        "collateralAmount#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "2763": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ]
    },
    "2764": {
      "op": "frame_dig 2",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "disbursement#3"
      ]
    },
    "2766": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2767": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "to_encode%0#0"
      ]
    },
    "2769": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "2770": {
      "op": "dig 1",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "2772": {
      "op": "bytec 11 // 0x00",
      "defined_out": [
        "0x00",
        "borrowerAddress#0",
        "disbursement#3",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)",
        "0x00"
      ]
    },
    "2774": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2775": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "2776": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2777": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0"
      ]
    },
    "2778": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2779": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_exists%0#1",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "2780": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1"
      ]
    },
    "2781": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ]
    },
    "2783": {
      "op": "pushint 1728000 // 1728000",
      "defined_out": [
        "1728000",
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "tmp%0#1",
        "1728000"
      ]
    },
    "2787": {
      "op": "-",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "to_encode%1#0"
      ]
    },
    "2788": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0"
      ]
    },
    "2789": {
      "op": "dig 5",
      "defined_out": [
        "borrowerAddress#0",
        "borrowerAddress#0 (copy)",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "2791": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2793": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2794": {
      "op": "uncover 5",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "2796": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2797": {
      "op": "uncover 3",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2799": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2800": {
      "op": "uncover 3",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%1#0"
      ]
    },
    "2802": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2803": {
      "op": "uncover 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#1"
      ]
    },
    "2805": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2806": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "2807": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "loanRecord#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "loanRecord#0"
      ]
    },
    "2808": {
      "op": "bytec 4 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0",
        "disbursement#3",
        "loanRecord#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "loanRecord#0",
        "\"loan_record\""
      ]
    },
    "2810": {
      "op": "uncover 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "loanRecord#0",
        "\"loan_record\"",
        "borrowerAddress#0"
      ]
    },
    "2812": {
      "op": "concat",
      "defined_out": [
        "disbursement#3",
        "loanRecord#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "loanRecord#0",
        "tmp%1#0"
      ]
    },
    "2813": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%1#0",
        "loanRecord#0"
      ]
    },
    "2814": {
      "op": "box_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2815": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "0"
      ]
    },
    "2816": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "2817": {
      "op": "app_global_get_ex",
      "defined_out": [
        "disbursement#3",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2818": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%1#0"
      ]
    },
    "2819": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "disbursement#3",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "2820": {
      "op": "+",
      "defined_out": [
        "disbursement#3",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "2821": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "2822": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "2823": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2824": {
      "op": "b borrow_after_if_else@6"
    },
    "2827": {
      "block": "borrow_bool_false@21",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "2828": {
      "op": "b borrow_bool_merge@22"
    },
    "2831": {
      "block": "borrow_else_body@2",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "2833": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "2835": {
      "op": "b borrow_after_if_else@3"
    },
    "2838": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord",
      "params": {
        "debtChange#0": "bytes",
        "totalDebt#0": "uint64",
        "collateralTokenId#0": "bytes",
        "borrowerAddress#0": "bytes",
        "collateralAmount#0": "uint64"
      },
      "block": "updateLoanRecord",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "2841": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralAmount#0 (copy)"
      ]
    },
    "2843": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2844": {
      "op": "frame_dig -4",
      "defined_out": [
        "totalDebt#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "totalDebt#0 (copy)"
      ]
    },
    "2846": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2847": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "2848": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2849": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2850": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0"
      ]
    },
    "2851": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%0#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ]
    },
    "2853": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "2854": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "2856": {
      "op": "frame_dig -3",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2858": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2859": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "2861": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2862": {
      "op": "frame_dig -5",
      "defined_out": [
        "debtChange#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "debtChange#0 (copy)"
      ]
    },
    "2864": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2865": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%1#0"
      ]
    },
    "2867": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2868": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%5#0",
        "maybe_value%0#0"
      ]
    },
    "2870": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2871": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%2#0"
      ]
    },
    "2872": {
      "op": "concat",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "loanRecord#0"
      ]
    },
    "2873": {
      "op": "bytec 4 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "loanRecord#0"
      ],
      "stack_out": [
        "loanRecord#0",
        "\"loan_record\""
      ]
    },
    "2875": {
      "op": "frame_dig -2",
      "stack_out": [
        "loanRecord#0",
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "2877": {
      "op": "concat",
      "defined_out": [
        "loanRecord#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "loanRecord#0",
        "tmp%0#0"
      ]
    },
    "2878": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "loanRecord#0"
      ]
    },
    "2879": {
      "op": "box_put",
      "stack_out": []
    },
    "2880": {
      "op": "frame_dig -5",
      "stack_out": [
        "debtChange#0 (copy)"
      ]
    },
    "2882": {
      "retsub": true,
      "op": "retsub"
    },
    "2883": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "params": {
        "debtor#0": "bytes",
        "templateReserveAddress#0": "bytes"
      },
      "block": "accrueLoanInterest",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2886": {
      "op": "bytec 4 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "2888": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "2890": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2891": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2892": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2893": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2895": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2896": {
      "op": "box_get",
      "defined_out": [
        "currentLoanRecord#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "currentLoanRecord#0",
        "maybe_exists%1#0"
      ]
    },
    "2897": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "currentLoanRecord#0"
      ]
    },
    "2898": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest",
      "op": "callsub accrueInterest",
      "defined_out": [
        "currentLoanRecord#0",
        "iar#0"
      ],
      "stack_out": [
        "iar#0",
        "currentLoanRecord#0"
      ]
    },
    "2901": {
      "op": "dig 1",
      "defined_out": [
        "currentLoanRecord#0",
        "iar#0",
        "iar#0 (copy)"
      ],
      "stack_out": [
        "iar#0",
        "currentLoanRecord#0",
        "iar#0 (copy)"
      ]
    },
    "2903": {
      "error": "Index access is out of bounds",
      "op": "extract 0 17 // on error: Index access is out of bounds",
      "defined_out": [
        "currentLoanRecord#0",
        "iar#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "iar#0",
        "currentLoanRecord#0",
        "tmp%2#0"
      ]
    },
    "2906": {
      "op": "uncover 2",
      "stack_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "iar#0"
      ]
    },
    "2908": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "currentLoanRecord#0",
        "iar#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "iar#0",
        "17"
      ]
    },
    "2910": {
      "op": "extract_uint64",
      "defined_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "2911": {
      "op": "dig 2",
      "defined_out": [
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "tmp%4#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "2913": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2916": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "currentLoanRecord#0"
      ]
    },
    "2918": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "currentLoanRecord#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "currentLoanRecord#0",
        "40"
      ]
    },
    "2920": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2921": {
      "op": "dig 3",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2923": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%2#0 (copy)",
        "tmp%4#0"
      ]
    },
    "2925": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%2#0 (copy)",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2927": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%2#0 (copy)",
        "tmp%4#0",
        "tmp%5#0",
        "debtor#0 (copy)"
      ]
    },
    "2929": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%4#0",
        "tmp%5#0",
        "debtor#0 (copy)",
        "tmp%7#0"
      ]
    },
    "2931": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord",
      "op": "callsub updateLoanRecord",
      "defined_out": [
        "tmp%2#0",
        "updateLoanRecord%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "updateLoanRecord%0#0"
      ]
    },
    "2934": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2935": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2936": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2937": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2938": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0"
      ]
    },
    "2939": {
      "op": "swap",
      "stack_out": [
        "maybe_value%2#0",
        "tmp%2#0"
      ]
    },
    "2940": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "tmp%2#0",
        "0"
      ]
    },
    "2941": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%10#0"
      ]
    },
    "2942": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2943": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_deposits\""
      ]
    },
    "2944": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%0#0"
      ]
    },
    "2945": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2946": {
      "retsub": true,
      "op": "retsub"
    },
    "2947": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest",
      "params": {
        "record#0": "bytes"
      },
      "block": "accrueInterest",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "2950": {
      "op": "global LatestTimestamp"
    },
    "2952": {
      "op": "dup"
    },
    "2953": {
      "op": "frame_dig -1"
    },
    "2955": {
      "op": "pushint 81 // 81",
      "defined_out": [
        "81",
        "now#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "now#0",
        "now#0",
        "record#0 (copy)",
        "81"
      ]
    },
    "2957": {
      "op": "extract_uint64",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "now#0",
        "last#0"
      ]
    },
    "2958": {
      "op": "dup",
      "stack_out": [
        "now#0",
        "now#0",
        "last#0",
        "last#0"
      ]
    },
    "2959": {
      "op": "cover 2",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "2961": {
      "op": "<=",
      "defined_out": [
        "last#0",
        "now#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "tmp%1#0"
      ]
    },
    "2962": {
      "op": "bz accrueInterest_after_if_else@2",
      "stack_out": [
        "now#0",
        "last#0"
      ]
    },
    "2965": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "last#0",
        "now#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "to_encode%0#0"
      ]
    },
    "2967": {
      "op": "itob",
      "defined_out": [
        "last#0",
        "now#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "val_as_bytes%0#0"
      ]
    },
    "2968": {
      "op": "pushbytes 0x000000000000000001",
      "defined_out": [
        "0x000000000000000001",
        "last#0",
        "now#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "val_as_bytes%0#0",
        "0x000000000000000001"
      ]
    },
    "2979": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "0x000000000000000001",
        "val_as_bytes%0#0"
      ]
    },
    "2980": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2981": {
      "op": "frame_dig -1",
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%3#0",
        "record#0 (copy)"
      ]
    },
    "2983": {
      "error": "Index access is out of bounds",
      "op": "extract 65 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "last#0",
        "now#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%3#0",
        "tmp%2#0"
      ]
    },
    "2986": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2987": {
      "op": "frame_dig -1",
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%6#0",
        "record#0 (copy)"
      ]
    },
    "2989": {
      "op": "uncover 3"
    },
    "2991": {
      "op": "uncover 3"
    },
    "2993": {
      "retsub": true,
      "op": "retsub"
    },
    "2994": {
      "block": "accrueInterest_after_if_else@2",
      "stack_in": [
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "now#0"
      ]
    },
    "2996": {
      "op": "frame_dig 1",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "2998": {
      "op": "-",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "2999": {
      "op": "frame_dig -1",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "record#0 (copy)"
      ]
    },
    "3001": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "deltaT#0",
        "last#0",
        "now#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "record#0 (copy)",
        "65"
      ]
    },
    "3003": {
      "op": "extract_uint64",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0"
      ]
    },
    "3004": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "deltaT#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "0"
      ]
    },
    "3005": {
      "op": "bytec 16 // \"interest_bps\"",
      "defined_out": [
        "\"interest_bps\"",
        "0",
        "deltaT#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "0",
        "\"interest_bps\""
      ]
    },
    "3007": {
      "op": "app_global_get_ex",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "maybe_exists%0#0",
        "now#0",
        "principal#0",
        "rateBps#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "rateBps#0",
        "maybe_exists%0#0"
      ]
    },
    "3008": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "rateBps#0"
      ]
    },
    "3009": {
      "op": "dig 1",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "principal#0",
        "principal#0 (copy)",
        "rateBps#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "rateBps#0",
        "principal#0 (copy)"
      ]
    },
    "3011": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "hi1#0",
        "last#0",
        "lo1#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "hi1#0",
        "lo1#0"
      ]
    },
    "3012": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "deltaT#0",
        "hi1#0",
        "last#0",
        "lo1#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "hi1#0",
        "lo1#0",
        "10000"
      ]
    },
    "3014": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "principal#0",
        "rateScaled#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "rateScaled#0"
      ]
    },
    "3015": {
      "op": "uncover 2",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "rateScaled#0",
        "deltaT#0"
      ]
    },
    "3017": {
      "op": "mulw",
      "defined_out": [
        "hi2#0",
        "last#0",
        "lo2#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "3018": {
      "op": "pushint 31536000 // 31536000",
      "defined_out": [
        "31536000",
        "hi2#0",
        "last#0",
        "lo2#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "hi2#0",
        "lo2#0",
        "31536000"
      ]
    },
    "3023": {
      "op": "divw",
      "defined_out": [
        "interest#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0"
      ]
    },
    "3024": {
      "op": "intc_0 // 0",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "0"
      ]
    },
    "3025": {
      "op": "bytec 18 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\"",
        "0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "0",
        "\"protocol_share_bps\""
      ]
    },
    "3027": {
      "op": "app_global_get_ex",
      "defined_out": [
        "interest#0",
        "last#0",
        "maybe_exists%1#0",
        "now#0",
        "principal#0",
        "protoBps#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protoBps#0",
        "maybe_exists%1#0"
      ]
    },
    "3028": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protoBps#0"
      ]
    },
    "3029": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protoBps#0",
        "10000"
      ]
    },
    "3031": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "10000",
        "protoBps#0"
      ]
    },
    "3032": {
      "op": "-",
      "defined_out": [
        "depositorBps#0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorBps#0"
      ]
    },
    "3033": {
      "op": "dig 1",
      "defined_out": [
        "depositorBps#0",
        "interest#0",
        "interest#0 (copy)",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorBps#0",
        "interest#0 (copy)"
      ]
    },
    "3035": {
      "op": "mulw",
      "defined_out": [
        "hiDep#0",
        "interest#0",
        "last#0",
        "loDep#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "hiDep#0",
        "loDep#0"
      ]
    },
    "3036": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "hiDep#0",
        "loDep#0",
        "10000"
      ]
    },
    "3038": {
      "op": "divw",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0"
      ]
    },
    "3039": {
      "op": "dup2",
      "defined_out": [
        "depositorInterest#0",
        "depositorInterest#0 (copy)",
        "interest#0",
        "interest#0 (copy)",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0",
        "interest#0 (copy)",
        "depositorInterest#0 (copy)"
      ]
    },
    "3040": {
      "op": "-",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "3041": {
      "op": "intc_0 // 0",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "3042": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "depositorInterest#0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3043": {
      "op": "app_global_get_ex",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "last#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "now#0",
        "principal#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3044": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%2#0"
      ]
    },
    "3045": {
      "op": "uncover 2",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%2#0",
        "depositorInterest#0"
      ]
    },
    "3047": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "last#0",
        "new_state_value%0#0",
        "now#0",
        "principal#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%0#0"
      ]
    },
    "3048": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%0#0",
        "\"total_deposits\""
      ]
    },
    "3049": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "\"total_deposits\"",
        "new_state_value%0#0"
      ]
    },
    "3050": {
      "op": "app_global_put",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0"
      ]
    },
    "3051": {
      "op": "intc_0 // 0",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "3052": {
      "op": "bytec 8 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "3054": {
      "op": "app_global_get_ex",
      "defined_out": [
        "interest#0",
        "last#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "now#0",
        "principal#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3055": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%3#0"
      ]
    },
    "3056": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "last#0",
        "new_state_value%1#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "new_state_value%1#0"
      ]
    },
    "3057": {
      "op": "bytec 8 // \"fee_pool\"",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "new_state_value%1#0",
        "\"fee_pool\""
      ]
    },
    "3059": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "\"fee_pool\"",
        "new_state_value%1#0"
      ]
    },
    "3060": {
      "op": "app_global_put",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0"
      ]
    },
    "3061": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "interest#0",
        "principal#0"
      ]
    },
    "3062": {
      "op": "dig 1",
      "stack_out": [
        "now#0",
        "last#0",
        "interest#0",
        "principal#0",
        "interest#0 (copy)"
      ]
    },
    "3064": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "last#0",
        "newPrincipal#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "interest#0",
        "newPrincipal#0"
      ]
    },
    "3065": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "interest#0"
      ]
    },
    "3066": {
      "op": "itob",
      "defined_out": [
        "last#0",
        "newPrincipal#0",
        "now#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "val_as_bytes%1#0"
      ]
    },
    "3067": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "last#0",
        "newPrincipal#0",
        "now#0",
        "to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "val_as_bytes%1#0",
        "to_encode%1#0"
      ]
    },
    "3069": {
      "op": "itob",
      "defined_out": [
        "last#0",
        "newPrincipal#0",
        "now#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3070": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "3071": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "last#0",
        "newPrincipal#0",
        "now#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0",
        "0x01"
      ]
    },
    "3074": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "last#0",
        "newPrincipal#0",
        "now#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3075": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%2#0"
      ]
    },
    "3076": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "last#0",
        "newPrincipal#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3077": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%10#0",
        "newPrincipal#0"
      ]
    },
    "3078": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "last#0",
        "now#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%3#0"
      ]
    },
    "3079": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "3080": {
      "op": "frame_dig -1",
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%13#0",
        "record#0 (copy)"
      ]
    },
    "3082": {
      "op": "uncover 3"
    },
    "3084": {
      "op": "uncover 3"
    },
    "3086": {
      "retsub": true,
      "op": "retsub"
    },
    "3087": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "params": {
        "borrowerAddress#0": "bytes"
      },
      "block": "getLoanRecord",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3090": {
      "op": "bytec 4 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "3092": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "3094": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3095": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3096": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3097": {
      "retsub": true,
      "op": "retsub"
    },
    "3098": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "repaymentAmount#0": "uint64",
        "templateReserveAddress#0": "bytes"
      },
      "block": "repayLoanASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3101": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "3103": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "3104": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3105": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3106": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0"
      ]
    },
    "3107": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "3108": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3110": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "3112": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3114": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "3115": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "3118": {
      "op": "frame_dig -3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3120": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "3122": {
      "op": "frame_dig 1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "3124": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "3125": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "3128": {
      "op": "frame_dig -3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3130": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "3132": {
      "op": "frame_dig -2",
      "defined_out": [
        "baseToken#0",
        "repaymentAmount#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "3134": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "3135": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "3138": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "3139": {
      "block": "repayLoanASA_bool_merge@5",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "3140": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "3142": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "3145": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest",
      "op": "callsub accrueInterest",
      "defined_out": [
        "iar#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "iar#0",
        "loanRecord#0"
      ]
    },
    "3148": {
      "op": "swap",
      "defined_out": [
        "iar#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "iar#0"
      ]
    },
    "3149": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "iar#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "iar#0",
        "17"
      ]
    },
    "3151": {
      "op": "extract_uint64",
      "defined_out": [
        "loanRecord#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%9#0"
      ]
    },
    "3152": {
      "op": "frame_dig -2",
      "defined_out": [
        "loanRecord#0",
        "repaymentAmount#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%9#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "3154": {
      "op": "dig 1",
      "defined_out": [
        "loanRecord#0",
        "repaymentAmount#0 (copy)",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%9#0",
        "repaymentAmount#0 (copy)",
        "tmp%9#0 (copy)"
      ]
    },
    "3156": {
      "op": "<=",
      "defined_out": [
        "loanRecord#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "3157": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%9#0"
      ]
    },
    "3158": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%9#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "3160": {
      "op": "-",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0"
      ]
    },
    "3161": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "3162": {
      "op": "frame_bury 0",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0"
      ]
    },
    "3164": {
      "op": "bnz repayLoanASA_else_body@8",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "3167": {
      "op": "bytec 4 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "\"loan_record\""
      ]
    },
    "3169": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "loanRecord#0",
        "remainingDebt#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "\"loan_record\"",
        "tmp%14#0"
      ]
    },
    "3171": {
      "op": "concat",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%15#0"
      ]
    },
    "3172": {
      "op": "box_del",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "{box_del}"
      ]
    },
    "3173": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "3174": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "0"
      ]
    },
    "3175": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "3176": {
      "op": "app_global_get_ex",
      "defined_out": [
        "loanRecord#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3177": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "maybe_value%1#0"
      ]
    },
    "3178": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "loanRecord#0",
        "maybe_value%1#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "3179": {
      "op": "-",
      "defined_out": [
        "loanRecord#0",
        "new_state_value%0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "new_state_value%0#0"
      ]
    },
    "3180": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "3181": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "3182": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "3183": {
      "op": "itxn_begin"
    },
    "3184": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3186": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0"
      ]
    },
    "3187": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)"
      ]
    },
    "3188": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)",
        "32"
      ]
    },
    "3190": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3191": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0"
      ]
    },
    "3192": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0",
        "40"
      ]
    },
    "3194": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "3195": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3197": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3199": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "3201": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "4"
      ]
    },
    "3202": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "3204": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "0"
      ]
    },
    "3205": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "3207": {
      "op": "itxn_submit"
    },
    "3208": {
      "retsub": true,
      "op": "retsub"
    },
    "3209": {
      "block": "repayLoanASA_else_body@8",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "3211": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "val_as_bytes%0#0"
      ]
    },
    "3212": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "3214": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3215": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "3216": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "3219": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3220": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "3221": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3222": {
      "op": "swap",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0"
      ]
    },
    "3223": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "loanRecord#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "loanRecord#0 (copy)"
      ]
    },
    "3224": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%18#0"
      ]
    },
    "3227": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "3229": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "tmp%18#0",
        "tmp%19#0",
        "loanRecord#0"
      ]
    },
    "3231": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "tmp%18#0",
        "tmp%19#0",
        "loanRecord#0",
        "40"
      ]
    },
    "3233": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "3234": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3236": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "3238": {
      "op": "cover 4"
    },
    "3240": {
      "op": "cover 4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "3242": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord",
      "op": "callsub updateLoanRecord",
      "defined_out": [
        "remainingDebt#0",
        "updateLoanRecord%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "updateLoanRecord%0#0"
      ]
    },
    "3245": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "3246": {
      "retsub": true,
      "op": "retsub"
    },
    "3247": {
      "block": "repayLoanASA_bool_false@4",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "3248": {
      "op": "b repayLoanASA_bool_merge@5"
    },
    "3251": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "params": {
        "paymentTxn#0": "uint64",
        "repaymentAmount#0": "uint64",
        "templateReserveAddress#0": "bytes"
      },
      "block": "repayLoanAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3254": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "3256": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "3257": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3258": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3259": {
      "op": "bury 1",
      "stack_out": [
        "remainingDebt#0",
        "maybe_exists%0#0"
      ]
    },
    "3261": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "3262": {
      "op": "frame_dig -3",
      "defined_out": [
        "paymentTxn#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "3264": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0"
      ]
    },
    "3266": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3268": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%2#0"
      ]
    },
    "3269": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "3272": {
      "op": "frame_dig -3",
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "3274": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%3#0"
      ]
    },
    "3276": {
      "op": "frame_dig -2",
      "defined_out": [
        "repaymentAmount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%3#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "3278": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%4#0"
      ]
    },
    "3279": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "3282": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "3283": {
      "block": "repayLoanAlgo_bool_merge@4",
      "stack_in": [
        "remainingDebt#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "3284": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%5#0"
      ]
    },
    "3286": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "3289": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest",
      "op": "callsub accrueInterest",
      "defined_out": [
        "iar#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "iar#0",
        "loanRecord#0"
      ]
    },
    "3292": {
      "op": "swap",
      "defined_out": [
        "iar#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "iar#0"
      ]
    },
    "3293": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "iar#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "iar#0",
        "17"
      ]
    },
    "3295": {
      "op": "extract_uint64",
      "defined_out": [
        "loanRecord#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%7#0"
      ]
    },
    "3296": {
      "op": "frame_dig -2",
      "defined_out": [
        "loanRecord#0",
        "repaymentAmount#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%7#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "3298": {
      "op": "dig 1",
      "defined_out": [
        "loanRecord#0",
        "repaymentAmount#0 (copy)",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%7#0",
        "repaymentAmount#0 (copy)",
        "tmp%7#0 (copy)"
      ]
    },
    "3300": {
      "op": "<=",
      "defined_out": [
        "loanRecord#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "3301": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%7#0"
      ]
    },
    "3302": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%7#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "3304": {
      "op": "-",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0"
      ]
    },
    "3305": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "3306": {
      "op": "frame_bury 0",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0"
      ]
    },
    "3308": {
      "op": "bnz repayLoanAlgo_else_body@7",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "3311": {
      "op": "bytec 4 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "\"loan_record\""
      ]
    },
    "3313": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "loanRecord#0",
        "remainingDebt#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "\"loan_record\"",
        "tmp%12#0"
      ]
    },
    "3315": {
      "op": "concat",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%13#0"
      ]
    },
    "3316": {
      "op": "box_del",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "{box_del}"
      ]
    },
    "3317": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "3318": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "0"
      ]
    },
    "3319": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "3320": {
      "op": "app_global_get_ex",
      "defined_out": [
        "loanRecord#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3321": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "maybe_value%1#0"
      ]
    },
    "3322": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "loanRecord#0",
        "maybe_value%1#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "3323": {
      "op": "-",
      "defined_out": [
        "loanRecord#0",
        "new_state_value%0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "new_state_value%0#0"
      ]
    },
    "3324": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "3325": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "3326": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "3327": {
      "op": "itxn_begin"
    },
    "3328": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3330": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0"
      ]
    },
    "3331": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)"
      ]
    },
    "3332": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)",
        "32"
      ]
    },
    "3334": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3335": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0"
      ]
    },
    "3336": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0",
        "40"
      ]
    },
    "3338": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "3339": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3341": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3343": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "3345": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "4"
      ]
    },
    "3346": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "3348": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "3349": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "3351": {
      "op": "itxn_submit"
    },
    "3352": {
      "retsub": true,
      "op": "retsub"
    },
    "3353": {
      "block": "repayLoanAlgo_else_body@7",
      "stack_in": [
        "remainingDebt#0",
        "loanRecord#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "3355": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "val_as_bytes%0#0"
      ]
    },
    "3356": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "3358": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3359": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "3360": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "3363": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3364": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "3365": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3366": {
      "op": "swap",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0"
      ]
    },
    "3367": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "loanRecord#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "loanRecord#0 (copy)"
      ]
    },
    "3368": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%16#0"
      ]
    },
    "3371": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "3373": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "tmp%16#0",
        "tmp%17#0",
        "loanRecord#0"
      ]
    },
    "3375": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "tmp%16#0",
        "tmp%17#0",
        "loanRecord#0",
        "40"
      ]
    },
    "3377": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "3378": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%19#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3380": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%19#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "3382": {
      "op": "cover 4"
    },
    "3384": {
      "op": "cover 4",
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "3386": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord",
      "op": "callsub updateLoanRecord",
      "defined_out": [
        "remainingDebt#0",
        "updateLoanRecord%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "updateLoanRecord%0#0"
      ]
    },
    "3389": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "3390": {
      "retsub": true,
      "op": "retsub"
    },
    "3391": {
      "block": "repayLoanAlgo_bool_false@3",
      "stack_in": [
        "remainingDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "3392": {
      "op": "b repayLoanAlgo_bool_merge@4"
    },
    "3395": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawFees",
      "params": {},
      "block": "withdrawFees",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3397": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3398": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "3399": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3400": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3401": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3402": {
      "op": "assert",
      "stack_out": []
    },
    "3403": {
      "op": "itxn_begin"
    },
    "3404": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3405": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "0",
        "\"admin_account\""
      ]
    },
    "3406": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3407": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3408": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "3409": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3410": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3411": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "3412": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3413": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "3414": {
      "op": "bytec 8 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "3416": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3417": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "3418": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3420": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3422": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "3424": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "3425": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3427": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3428": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3430": {
      "op": "itxn_submit"
    },
    "3431": {
      "op": "bytec 8 // \"fee_pool\"",
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "3433": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "3434": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3435": {
      "retsub": true,
      "op": "retsub"
    },
    "3436": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutASA",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "axferTxn#0": "uint64"
      },
      "block": "buyoutASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3439": {
      "op": "bytec 4 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "3441": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "3443": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3444": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3446": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3447": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3449": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3450": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3451": {
      "op": "box_get",
      "defined_out": [
        "currentLoanRecord#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0",
        "maybe_exists%1#0"
      ]
    },
    "3452": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0"
      ]
    },
    "3453": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ]
    },
    "3454": {
      "op": "dig 1",
      "defined_out": [
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "tmp%0#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "3456": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0"
      ]
    },
    "3457": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "3458": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "40"
      ]
    },
    "3460": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "collateralAmount#0"
      ]
    },
    "3461": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3462": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0"
      ]
    },
    "3464": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "3465": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "65"
      ]
    },
    "3467": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0"
      ]
    },
    "3468": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "currentLoanRecord#0"
      ]
    },
    "3469": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "currentLoanRecord#0",
        "32"
      ]
    },
    "3471": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "tmp%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "to_encode%0#0"
      ]
    },
    "3472": {
      "op": "itob",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "3473": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "3474": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "3476": {
      "op": "bytec 10 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "3478": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3480": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "3481": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "3482": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "3483": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "16"
      ]
    },
    "3485": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "3486": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "3487": {
      "op": "cover 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "3489": {
      "op": "dig 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3491": {
      "op": ">=",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%8#0"
      ]
    },
    "3492": {
      "error": "Collateral amount exceeds current total",
      "op": "assert // Collateral amount exceeds current total",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "3493": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "oraclePrice#0"
      ]
    },
    "3496": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "oraclePrice#0",
        "collateralAmount#0"
      ]
    },
    "3498": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "hU#0",
        "lU#0"
      ]
    },
    "3499": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "1"
      ]
    },
    "3500": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "3501": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)"
      ]
    },
    "3502": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtAmount#0"
      ]
    },
    "3504": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0"
      ]
    },
    "3505": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "0"
      ]
    },
    "3506": {
      "op": "bytec 7 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "3508": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3509": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "3510": {
      "op": "dig 1",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0",
        "CR#0 (copy)"
      ]
    },
    "3512": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "tmp%9#0"
      ]
    },
    "3513": {
      "error": "loan is not eligible for buyout",
      "op": "assert // loan is not eligible for buyout",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0"
      ]
    },
    "3514": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "10000"
      ]
    },
    "3516": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0"
      ]
    },
    "3517": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "0"
      ]
    },
    "3518": {
      "op": "bytec 7 // \"liq_threshold_bps\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "3520": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3521": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "maybe_value%3#0"
      ]
    },
    "3522": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%11#0"
      ]
    },
    "3523": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%11#0",
        "10000"
      ]
    },
    "3525": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "premiumRate#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "premiumRate#0"
      ]
    },
    "3526": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "premiumRate#0",
        "10000"
      ]
    },
    "3528": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%12#0"
      ]
    },
    "3529": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%12#0",
        "1"
      ]
    },
    "3530": {
      "op": "+",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%13#0"
      ]
    },
    "3531": {
      "op": "*",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3532": {
      "op": "frame_dig -1",
      "defined_out": [
        "axferTxn#0 (copy)",
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "axferTxn#0 (copy)"
      ]
    },
    "3534": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0"
      ]
    },
    "3536": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "0"
      ]
    },
    "3537": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3538": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3539": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "maybe_value%4#0"
      ]
    },
    "3540": {
      "op": "btoi",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "3541": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%16#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%16#0"
      ]
    },
    "3542": {
      "op": "bz buyoutASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3545": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "axferTxn#0 (copy)"
      ]
    },
    "3547": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%17#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%17#0"
      ]
    },
    "3549": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "3551": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%19#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%19#0"
      ]
    },
    "3552": {
      "op": "bz buyoutASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3555": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "axferTxn#0 (copy)"
      ]
    },
    "3557": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%20#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%20#0"
      ]
    },
    "3559": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%20#0",
        "buyoutPrice#0"
      ]
    },
    "3561": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%21#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%21#0"
      ]
    },
    "3562": {
      "op": "bz buyoutASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3565": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ]
    },
    "3566": {
      "block": "buyoutASA_bool_merge@5",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3567": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%0#0"
      ]
    },
    "3569": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "{box_del}"
      ]
    },
    "3570": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3571": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "0"
      ]
    },
    "3572": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "3573": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3574": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%5#0"
      ]
    },
    "3575": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%5#0",
        "1"
      ]
    },
    "3576": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "new_state_value%0#0"
      ]
    },
    "3577": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "3578": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "3579": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3580": {
      "op": "itxn_begin"
    },
    "3581": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0"
      ]
    },
    "3583": {
      "op": "dup",
      "defined_out": [
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3584": {
      "op": "btoi",
      "defined_out": [
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3585": {
      "op": "frame_dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "3587": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3588": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3590": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3592": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "3594": {
      "op": "frame_dig -3",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "3596": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "3598": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "3599": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "3601": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "3602": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "3604": {
      "op": "itxn_submit"
    },
    "3605": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "tmp%7#0"
      ]
    },
    "3607": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0"
      ]
    },
    "3608": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "newTotal#0"
      ]
    },
    "3609": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3612": {
      "retsub": true,
      "op": "retsub"
    },
    "3613": {
      "block": "buyoutASA_bool_false@4",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ]
    },
    "3614": {
      "op": "b buyoutASA_bool_merge@5"
    },
    "3617": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutAlgo",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "paymentTxn#0": "uint64"
      },
      "block": "buyoutAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3620": {
      "op": "bytec 4 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "3622": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "3624": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3625": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3627": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3628": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3630": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3631": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3632": {
      "op": "box_get",
      "defined_out": [
        "currentLoanRecord#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0",
        "maybe_exists%1#0"
      ]
    },
    "3633": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0"
      ]
    },
    "3634": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ]
    },
    "3635": {
      "op": "dig 1",
      "defined_out": [
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "tmp%0#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "3637": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0"
      ]
    },
    "3638": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "3639": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "40"
      ]
    },
    "3641": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "collateralAmount#0"
      ]
    },
    "3642": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3643": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0"
      ]
    },
    "3645": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "3646": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "65"
      ]
    },
    "3648": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0"
      ]
    },
    "3649": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "currentLoanRecord#0"
      ]
    },
    "3650": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "currentLoanRecord#0",
        "32"
      ]
    },
    "3652": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "tmp%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "to_encode%0#0"
      ]
    },
    "3653": {
      "op": "itob",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "3654": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "3655": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "3657": {
      "op": "bytec 10 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "3659": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3661": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "3662": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "3663": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "3664": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "16"
      ]
    },
    "3666": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "3667": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "3668": {
      "op": "cover 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "3670": {
      "op": "dig 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3672": {
      "op": ">=",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%8#0"
      ]
    },
    "3673": {
      "error": "Collateral amount exceeds current total",
      "op": "assert // Collateral amount exceeds current total",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "3674": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "oraclePrice#0"
      ]
    },
    "3677": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "oraclePrice#0",
        "collateralAmount#0"
      ]
    },
    "3679": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "hU#0",
        "lU#0"
      ]
    },
    "3680": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "1"
      ]
    },
    "3681": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "3682": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)"
      ]
    },
    "3683": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtAmount#0"
      ]
    },
    "3685": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0"
      ]
    },
    "3686": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "0"
      ]
    },
    "3687": {
      "op": "bytec 7 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "3689": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3690": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "3691": {
      "op": "dig 1",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0",
        "CR#0 (copy)"
      ]
    },
    "3693": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "tmp%9#0"
      ]
    },
    "3694": {
      "error": "loan is not eligible for buyout",
      "op": "assert // loan is not eligible for buyout",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0"
      ]
    },
    "3695": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "10000"
      ]
    },
    "3697": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0"
      ]
    },
    "3698": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "0"
      ]
    },
    "3699": {
      "op": "bytec 7 // \"liq_threshold_bps\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "3701": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3702": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "maybe_value%3#0"
      ]
    },
    "3703": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%11#0"
      ]
    },
    "3704": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%11#0",
        "10000"
      ]
    },
    "3706": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "premiumRate#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "premiumRate#0"
      ]
    },
    "3707": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "premiumRate#0",
        "10000"
      ]
    },
    "3709": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%12#0"
      ]
    },
    "3710": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%12#0",
        "1"
      ]
    },
    "3711": {
      "op": "+",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%13#0"
      ]
    },
    "3712": {
      "op": "*",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3713": {
      "op": "frame_dig -1",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "paymentTxn#0 (copy)",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "3715": {
      "op": "gtxns Receiver",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0"
      ]
    },
    "3717": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "3719": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%16#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%16#0"
      ]
    },
    "3720": {
      "op": "bz buyoutAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3723": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "3725": {
      "op": "gtxns Amount",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%17#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%17#0"
      ]
    },
    "3727": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%17#0",
        "buyoutPrice#0"
      ]
    },
    "3729": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%18#0"
      ]
    },
    "3730": {
      "op": "bz buyoutAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3733": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ]
    },
    "3734": {
      "block": "buyoutAlgo_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3735": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%0#0"
      ]
    },
    "3737": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "{box_del}"
      ]
    },
    "3738": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3739": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "0"
      ]
    },
    "3740": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "3741": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3742": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%4#0"
      ]
    },
    "3743": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%4#0",
        "1"
      ]
    },
    "3744": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "new_state_value%0#0"
      ]
    },
    "3745": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "3746": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "3747": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3748": {
      "op": "itxn_begin"
    },
    "3749": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0"
      ]
    },
    "3751": {
      "op": "dup",
      "defined_out": [
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3752": {
      "op": "btoi",
      "defined_out": [
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3753": {
      "op": "frame_dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "3755": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3756": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3758": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3760": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "3762": {
      "op": "frame_dig -3",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "3764": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "3766": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "3767": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "3769": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "3770": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "3772": {
      "op": "itxn_submit"
    },
    "3773": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "tmp%7#0"
      ]
    },
    "3775": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0"
      ]
    },
    "3776": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "newTotal#0"
      ]
    },
    "3777": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "3780": {
      "retsub": true,
      "op": "retsub"
    },
    "3781": {
      "block": "buyoutAlgo_bool_false@3",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ]
    },
    "3782": {
      "op": "b buyoutAlgo_bool_merge@4"
    },
    "3785": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateASA",
      "params": {
        "debtor#0": "bytes",
        "axferTxn#0": "uint64"
      },
      "block": "liquidateASA",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3788": {
      "op": "bytec 4 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "3790": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "3792": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3793": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3795": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3796": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3798": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3799": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "3800": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "record#0"
      ]
    },
    "3801": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "3802": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "3804": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0"
      ]
    },
    "3805": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "3806": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "3808": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "3809": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3810": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "3812": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "3813": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "collateralAmount#0",
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "record#0 (copy)",
        "65"
      ]
    },
    "3815": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "3816": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0 (copy)"
      ]
    },
    "3817": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "3819": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "3821": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "3824": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "3825": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "3827": {
      "op": "bytec 10 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "3829": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3831": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "3832": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "3833": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0",
        "acceptedCollateral#0"
      ]
    },
    "3834": {
      "op": "cover 4",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0"
      ]
    },
    "3836": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "3837": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "oraclePrice#0"
      ]
    },
    "3840": {
      "op": "mulw",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "h#0",
        "l#0"
      ]
    },
    "3841": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "1"
      ]
    },
    "3842": {
      "op": "divw",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "3843": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralUSD#0",
        "debtAmount#0"
      ]
    },
    "3844": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0"
      ]
    },
    "3845": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "0"
      ]
    },
    "3846": {
      "op": "bytec 7 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "3848": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3849": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "3850": {
      "op": "<=",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%4#0"
      ]
    },
    "3851": {
      "error": "loan is not liquidatable",
      "op": "assert // loan is not liquidatable",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "3852": {
      "op": "frame_dig -1",
      "defined_out": [
        "acceptedCollateral#0",
        "axferTxn#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "axferTxn#0 (copy)"
      ]
    },
    "3854": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%5#0"
      ]
    },
    "3856": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "3858": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%7#0"
      ]
    },
    "3859": {
      "op": "bz liquidateASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "3862": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "axferTxn#0 (copy)"
      ]
    },
    "3864": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0"
      ]
    },
    "3866": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0",
        "0"
      ]
    },
    "3867": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3868": {
      "op": "app_global_get_ex",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "record#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3869": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0",
        "maybe_value%3#0"
      ]
    },
    "3870": {
      "op": "btoi",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "3871": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%10#0"
      ]
    },
    "3872": {
      "op": "bz liquidateASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "3875": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "axferTxn#0 (copy)"
      ]
    },
    "3877": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%11#0"
      ]
    },
    "3879": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%11#0",
        "debtAmount#0"
      ]
    },
    "3881": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%12#0"
      ]
    },
    "3882": {
      "op": "bz liquidateASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "3885": {
      "op": "intc_1 // 1",
      "defined_out": [
        "acceptedCollateral#0",
        "and_result%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ]
    },
    "3886": {
      "block": "liquidateASA_bool_merge@5",
      "stack_in": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "3887": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%0#0"
      ]
    },
    "3889": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "{box_del}"
      ]
    },
    "3890": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "3891": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "0"
      ]
    },
    "3892": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "3893": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3894": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%4#0"
      ]
    },
    "3895": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%4#0",
        "1"
      ]
    },
    "3896": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%0#0"
      ]
    },
    "3897": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "3898": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "3899": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "3900": {
      "op": "itxn_begin"
    },
    "3901": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3903": {
      "op": "frame_dig 1",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0"
      ]
    },
    "3905": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "32"
      ]
    },
    "3907": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3908": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "3910": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3911": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3913": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3915": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3917": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "3919": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "3920": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "3922": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "3923": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "3925": {
      "op": "itxn_submit"
    },
    "3926": {
      "op": "frame_dig 5",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "acceptedCollateral#0"
      ]
    },
    "3928": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "acceptedCollateral#0",
        "16"
      ]
    },
    "3930": {
      "op": "extract_uint64",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "tmp%15#0"
      ]
    },
    "3931": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%15#0",
        "collateralAmount#0"
      ]
    },
    "3932": {
      "op": "-",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "newTotal#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "newTotal#0"
      ]
    },
    "3933": {
      "op": "frame_dig 4",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "newTotal#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "newTotal#0",
        "collateralTokenId#0"
      ]
    },
    "3935": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralTokenId#0",
        "newTotal#0"
      ]
    },
    "3936": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "3939": {
      "retsub": true,
      "op": "retsub"
    },
    "3940": {
      "block": "liquidateASA_bool_false@4",
      "stack_in": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ]
    },
    "3941": {
      "op": "b liquidateASA_bool_merge@5"
    },
    "3944": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateAlgo",
      "params": {
        "debtor#0": "bytes",
        "paymentTxn#0": "uint64"
      },
      "block": "liquidateAlgo",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3947": {
      "op": "bytec 4 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "3949": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "3951": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3952": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3954": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3955": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3957": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3958": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "3959": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "record#0"
      ]
    },
    "3960": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "3961": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "3963": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0"
      ]
    },
    "3964": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "3965": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "3967": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "3968": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3969": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "3971": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "3972": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "collateralAmount#0",
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "record#0 (copy)",
        "65"
      ]
    },
    "3974": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "3975": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0 (copy)"
      ]
    },
    "3976": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "3978": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "3980": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "3983": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "3984": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "3986": {
      "op": "bytec 10 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "3988": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3990": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "3991": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "3992": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0",
        "acceptedCollateral#0"
      ]
    },
    "3993": {
      "op": "cover 4",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0"
      ]
    },
    "3995": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "3996": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "oraclePrice#0"
      ]
    },
    "3999": {
      "op": "mulw",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "h#0",
        "l#0"
      ]
    },
    "4000": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "1"
      ]
    },
    "4001": {
      "op": "divw",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "4002": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralUSD#0",
        "debtAmount#0"
      ]
    },
    "4003": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0"
      ]
    },
    "4004": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "0"
      ]
    },
    "4005": {
      "op": "bytec 7 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4007": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4008": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "4009": {
      "op": "<=",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%4#0"
      ]
    },
    "4010": {
      "error": "loan is not liquidatable",
      "op": "assert // loan is not liquidatable",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4011": {
      "op": "frame_dig -1",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "paymentTxn#0 (copy)",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4013": {
      "op": "gtxns Receiver",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%5#0"
      ]
    },
    "4015": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "4017": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%7#0"
      ]
    },
    "4018": {
      "op": "bz liquidateAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4021": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4023": {
      "op": "gtxns Amount",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0"
      ]
    },
    "4025": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0",
        "debtAmount#0"
      ]
    },
    "4027": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%9#0"
      ]
    },
    "4028": {
      "op": "bz liquidateAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4031": {
      "op": "intc_1 // 1",
      "defined_out": [
        "acceptedCollateral#0",
        "and_result%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ]
    },
    "4032": {
      "block": "liquidateAlgo_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4033": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%0#0"
      ]
    },
    "4035": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "{box_del}"
      ]
    },
    "4036": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4037": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "0"
      ]
    },
    "4038": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4039": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4040": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%3#0"
      ]
    },
    "4041": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "4042": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%0#0"
      ]
    },
    "4043": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "4044": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "4045": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4046": {
      "op": "itxn_begin"
    },
    "4047": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4049": {
      "op": "frame_dig 1",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0"
      ]
    },
    "4051": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "32"
      ]
    },
    "4053": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4054": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "4056": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "4057": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4059": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4061": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4063": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "4065": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "4066": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "4068": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "4069": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "4071": {
      "op": "itxn_submit"
    },
    "4072": {
      "op": "frame_dig 5",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "acceptedCollateral#0"
      ]
    },
    "4074": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "acceptedCollateral#0",
        "16"
      ]
    },
    "4076": {
      "op": "extract_uint64",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "tmp%12#0"
      ]
    },
    "4077": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%12#0",
        "collateralAmount#0"
      ]
    },
    "4078": {
      "op": "-",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "newTotal#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "newTotal#0"
      ]
    },
    "4079": {
      "op": "frame_dig 4",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "newTotal#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "newTotal#0",
        "collateralTokenId#0"
      ]
    },
    "4081": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralTokenId#0",
        "newTotal#0"
      ]
    },
    "4082": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4085": {
      "retsub": true,
      "op": "retsub"
    },
    "4086": {
      "block": "liquidateAlgo_bool_false@3",
      "stack_in": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ]
    },
    "4087": {
      "op": "b liquidateAlgo_bool_merge@4"
    },
    "4090": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "getLoanStatus",
      "stack_in": [],
      "op": "proto 1 7"
    },
    "4093": {
      "op": "bytec 4 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4095": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "4097": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4098": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4099": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4100": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4102": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4103": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "4104": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0"
      ]
    },
    "4105": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest",
      "op": "callsub accrueInterest",
      "defined_out": [
        "iar#0",
        "record#0"
      ],
      "stack_out": [
        "iar#0",
        "record#0"
      ]
    },
    "4108": {
      "op": "swap",
      "stack_out": [
        "record#0",
        "iar#0"
      ]
    },
    "4109": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "iar#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "iar#0",
        "17"
      ]
    },
    "4111": {
      "op": "extract_uint64",
      "defined_out": [
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "debt#0"
      ]
    },
    "4112": {
      "op": "dig 1",
      "defined_out": [
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "record#0",
        "debt#0",
        "record#0 (copy)"
      ]
    },
    "4114": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "record#0",
        "debt#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "4116": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "debt#0",
        "collateralAmount#0"
      ]
    },
    "4117": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralAmount#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "debt#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "4118": {
      "op": "bytec 7 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "collateralAmount#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "debt#0",
        "collateralAmount#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4120": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "maybe_exists%2#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "maybe_exists%2#0"
      ]
    },
    "4121": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "record#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0"
      ]
    },
    "4122": {
      "op": "uncover 3",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "record#0"
      ]
    },
    "4124": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0"
      ]
    },
    "4127": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "oraclePrice#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "oraclePrice#0"
      ]
    },
    "4130": {
      "op": "dig 2",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "debt#0",
        "liqBps#0",
        "oraclePrice#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "oraclePrice#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4132": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "hi#0",
        "liqBps#0",
        "lo#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "hi#0",
        "lo#0"
      ]
    },
    "4133": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateralAmount#0",
        "debt#0",
        "hi#0",
        "liqBps#0",
        "lo#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "hi#0",
        "lo#0",
        "1"
      ]
    },
    "4134": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0"
      ]
    },
    "4135": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)"
      ]
    },
    "4136": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "10000"
      ]
    },
    "4138": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%5#0"
      ]
    },
    "4139": {
      "op": "dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "debt#0 (copy)",
        "liqBps#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%5#0",
        "debt#0 (copy)"
      ]
    },
    "4141": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0"
      ]
    },
    "4142": {
      "op": "dup",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)"
      ]
    },
    "4143": {
      "op": "dig 3",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "liqBps#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "4145": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0"
      ]
    },
    "4146": {
      "op": "dig 1",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)"
      ]
    },
    "4148": {
      "op": "dig 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "4150": {
      "op": ">",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForBuyout#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "4151": {
      "op": "uncover 6",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0"
      ]
    },
    "4153": {
      "op": "uncover 4",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0"
      ]
    },
    "4155": {
      "op": "uncover 6",
      "stack_out": [
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0"
      ]
    },
    "4157": {
      "op": "uncover 5",
      "stack_out": [
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0"
      ]
    },
    "4159": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0"
      ]
    },
    "4161": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0"
      ]
    },
    "4163": {
      "op": "uncover 6",
      "stack_out": [
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "4165": {
      "retsub": true,
      "op": "retsub"
    }
  }
}