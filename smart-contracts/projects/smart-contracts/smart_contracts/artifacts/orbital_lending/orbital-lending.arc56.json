{
    "name": "orbital-lending",
    "structs": {
        "AcceptedCollateral": [
            {
                "name": "assetId",
                "type": "uint64"
            },
            {
                "name": "baseAssetId",
                "type": "uint64"
            },
            {
                "name": "marketBaseAssetId",
                "type": "uint64"
            },
            {
                "name": "totalCollateral",
                "type": "uint64"
            },
            {
                "name": "originatingAppId",
                "type": "uint64"
            }
        ],
        "AcceptedCollateralKey": [
            {
                "name": "assetId",
                "type": "uint64"
            }
        ],
        "DebtChange": [
            {
                "name": "amount",
                "type": "uint64"
            },
            {
                "name": "changeType",
                "type": "uint8"
            },
            {
                "name": "timestamp",
                "type": "uint64"
            }
        ],
        "LoanRecord": [
            {
                "name": "borrowerAddress",
                "type": "address"
            },
            {
                "name": "collateralTokenId",
                "type": "uint64"
            },
            {
                "name": "collateralAmount",
                "type": "uint64"
            },
            {
                "name": "lastDebtChange",
                "type": "DebtChange"
            },
            {
                "name": "borrowedTokenId",
                "type": "uint64"
            },
            {
                "name": "principal",
                "type": "uint64"
            },
            {
                "name": "userIndexWad",
                "type": "uint64"
            }
        ],
        "MigrationSnapshot": [
            {
                "name": "totalDeposits",
                "type": "uint64"
            },
            {
                "name": "totalBorrows",
                "type": "uint64"
            },
            {
                "name": "circulatingLst",
                "type": "uint64"
            },
            {
                "name": "cashOnHand",
                "type": "uint64"
            },
            {
                "name": "feePool",
                "type": "uint64"
            },
            {
                "name": "totalAdditionalRewards",
                "type": "uint64"
            },
            {
                "name": "currentAccumulatedCommission",
                "type": "uint64"
            },
            {
                "name": "totalCommissionEarned",
                "type": "uint64"
            }
        ],
        "getLoanStatusResult": [
            {
                "name": "outstandingDebt",
                "type": "uint64"
            },
            {
                "name": "collateralValueUSD",
                "type": "uint64"
            },
            {
                "name": "collateralAmount",
                "type": "uint64"
            },
            {
                "name": "collateralRatioBps",
                "type": "uint64"
            },
            {
                "name": "liquidationThresholdBps",
                "type": "uint64"
            },
            {
                "name": "eligibleForLiquidation",
                "type": "bool"
            },
            {
                "name": "eligibleForBuyout",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "account",
                    "name": "admin",
                    "desc": "- The administrative account that will have privileged access"
                },
                {
                    "type": "uint64",
                    "name": "baseTokenId",
                    "desc": "- The asset ID of the base lending token (0 for ALGO)"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Creates the lending application contract with initial configuration",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "initApplication",
            "args": [
                {
                    "type": "pay",
                    "name": "mbrTxn",
                    "desc": "- Payment transaction covering minimum balance requirements"
                },
                {
                    "type": "uint64",
                    "name": "ltv_bps",
                    "desc": "- Loan-to-Value ratio in basis points (e.g., 7500 = 75%)"
                },
                {
                    "type": "uint64",
                    "name": "liq_threshold_bps",
                    "desc": "- Liquidation threshold in basis points (e.g., 8500 = 85%)"
                },
                {
                    "type": "uint64",
                    "name": "liq_bonus_bps",
                    "desc": "- Liquidation bonus in basis points (e.g., 500 = 5% bonus to liquidators)"
                },
                {
                    "type": "uint64",
                    "name": "origination_fee_bps",
                    "desc": "- One-time loan origination fee in basis points"
                },
                {
                    "type": "uint64",
                    "name": "protocol_share_bps",
                    "desc": "- Protocol's share of interest income in basis points"
                },
                {
                    "type": "application",
                    "name": "oracle_app_id",
                    "desc": "- Application ID of the price oracle contract"
                },
                {
                    "type": "uint64",
                    "name": "buyout_token_id"
                },
                {
                    "type": "uint64",
                    "name": "additional_rewards_commission_percentage"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initializes the lending protocol with core parameters and configurations",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setRateParams",
            "args": [
                {
                    "type": "uint64",
                    "name": "base_bps",
                    "desc": "- Base APR in basis points (e.g., 500 = 5%)"
                },
                {
                    "type": "uint64",
                    "name": "util_cap_bps",
                    "desc": "- Utilization cap in basis points (e.g., 8000 = 80%)"
                },
                {
                    "type": "uint64",
                    "name": "kink_norm_bps",
                    "desc": "- Kink normalization point in basis points (e.g., 5000 = 50%)"
                },
                {
                    "type": "uint64",
                    "name": "slope1_bps",
                    "desc": "- Slope to kink in basis points (e.g., 1000 = 10%)"
                },
                {
                    "type": "uint64",
                    "name": "slope2_bps",
                    "desc": "- Slope after kink in basis points (e.g., 2000 = 20%)"
                },
                {
                    "type": "uint64",
                    "name": "max_apr_bps",
                    "desc": "- Maximum APR cap in basis points (0 = no cap)"
                },
                {
                    "type": "uint64",
                    "name": "max_apr_step_bps",
                    "desc": "- Maximum APR step in basis points (0 = no limit)"
                },
                {
                    "type": "uint64",
                    "name": "ema_alpha_bps",
                    "desc": "- EMA smoothing factor in basis points (0 = no smoothing)"
                },
                {
                    "type": "uint64",
                    "name": "power_gamma_q16",
                    "desc": "- Power curve exponent in Q16.16 fixed-point (0 = no power curve)"
                },
                {
                    "type": "uint64",
                    "name": "scarcity_K_bps",
                    "desc": "- Scarcity parameter in basis points (0 = no scarcity)"
                },
                {
                    "type": "uint64",
                    "name": "rate_model_type",
                    "desc": "- Rate model type (0 = kinked, 1 = linear, 2 = power, 3 = asymptote)"
                },
                {
                    "type": "uint64",
                    "name": "liq_bonus_bps"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the core lending parameters for the protocol",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setContractState",
            "args": [
                {
                    "type": "uint64",
                    "name": "state"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setMigrationAdmin",
            "args": [
                {
                    "type": "account",
                    "name": "migrationAdmin",
                    "desc": "Account that will temporarily custody balances while migrating."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets or updates the migration administrator account used during contract upgrades.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "generateLSTToken",
            "args": [
                {
                    "type": "pay",
                    "name": "mbrTxn",
                    "desc": "Payment transaction covering asset-creation minimum balance."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Generates a new LST (Liquidity Staking Token) for the base lending token.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optInToLST",
            "args": [
                {
                    "type": "uint64",
                    "name": "lstAssetId",
                    "desc": "Asset ID of the pre-existing LST contract."
                },
                {
                    "type": "pay",
                    "name": "mbrTxn",
                    "desc": "Payment covering the opt-in minimum balance requirement."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Opts into an externally created LST token instead of minting a new one.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "configureLSTToken",
            "args": [
                {
                    "type": "axfer",
                    "name": "axferTxn",
                    "desc": "Asset transfer from the admin delivering LST units to the app."
                },
                {
                    "type": "uint64",
                    "name": "circulating_lst",
                    "desc": "Initial circulating amount to record on-chain."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Configures the LST token by seeding the initial circulating supply.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getOraclePrice",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId",
                    "desc": "- Asset ID of the token to get price for"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "Current price of the token from oracle (in USD micro-units)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Retrieves current price for a token from the configured oracle",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addNewCollateralType",
            "args": [
                {
                    "type": "uint64",
                    "name": "collateralTokenId",
                    "desc": "- Asset ID of the new collateral type to accept"
                },
                {
                    "type": "uint64",
                    "name": "collateralBaseTokenId"
                },
                {
                    "type": "pay",
                    "name": "mbrTxn",
                    "desc": "- Payment transaction covering storage minimum balance requirements"
                },
                {
                    "type": "uint64",
                    "name": "originatingAppId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Adds a new asset type as accepted collateral for borrowing",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "depositAlgo",
            "args": [
                {
                    "type": "pay",
                    "name": "depositTxn",
                    "desc": "- Payment transaction depositing ALGO to the contract"
                },
                {
                    "type": "uint64",
                    "name": "amount",
                    "desc": "- Amount of ALGO being deposited (in microALGOs)"
                },
                {
                    "type": "pay",
                    "name": "mbrTxn",
                    "desc": "- Payment transaction covering transaction fees"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deposits ALGO into the lending pool and receives LST tokens in return",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdrawDeposit",
            "args": [
                {
                    "type": "axfer",
                    "name": "assetTransferTxn",
                    "desc": "- Asset transfer transaction sending LST tokens to the contract"
                },
                {
                    "type": "uint64",
                    "name": "amount",
                    "desc": "- Amount of LST tokens to burn for withdrawal"
                },
                {
                    "type": "uint64",
                    "name": "lstAppId",
                    "desc": "- Application ID to determine exchange rate (use current app ID for local rate)"
                },
                {
                    "type": "pay",
                    "name": "mbrTxn",
                    "desc": "- Payment transaction covering transaction fees"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraws deposited assets by burning LST tokens",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "borrow",
            "args": [
                {
                    "type": "axfer",
                    "name": "assetTransferTxn",
                    "desc": "- Asset transfer transaction depositing collateral to the contract"
                },
                {
                    "type": "uint64",
                    "name": "requestedLoanAmount",
                    "desc": "- Amount of base tokens requested for borrowing"
                },
                {
                    "type": "uint64",
                    "name": "collateralAmount",
                    "desc": "- Amount of collateral being deposited"
                },
                {
                    "type": "uint64",
                    "name": "lstApp",
                    "desc": "- Application ID for LST exchange rate calculation"
                },
                {
                    "type": "uint64",
                    "name": "collateralTokenId",
                    "desc": "- Asset ID of the collateral being deposited"
                },
                {
                    "type": "pay",
                    "name": "mbrTxn",
                    "desc": "- Payment transaction covering transaction fees"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Borrows base assets against collateral with interest and fees",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "accrueLoanInterest",
            "args": [
                {
                    "type": "account",
                    "name": "debtor"
                },
                {
                    "type": "account",
                    "name": "templateReserveAddress"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "current_apr_bps",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "APR value used for subsequent accrual slices."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Computes the current borrow APR in basis points, applying smoothing and clamps.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getLoanRecord",
            "args": [
                {
                    "type": "account",
                    "name": "borrowerAddress",
                    "desc": "Borrower whose record should be returned."
                }
            ],
            "returns": {
                "type": "(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)",
                "struct": "LoanRecord",
                "desc": "Loan record snapshot stored in the box map."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Fetches the stored loan record for a borrower (without accrual).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "repayLoanAlgo",
            "args": [
                {
                    "type": "pay",
                    "name": "paymentTxn",
                    "desc": "- Payment transaction sending ALGO repayment to contract"
                },
                {
                    "type": "uint64",
                    "name": "repaymentAmount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Repays a loan using ALGO and optionally releases collateral",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdrawPlatformFees",
            "args": [
                {
                    "type": "account",
                    "name": "paymentReceiver",
                    "desc": "Address receiving the payout."
                },
                {
                    "type": "pay",
                    "name": "feeTxn",
                    "desc": "Separate payment covering inner-transaction fees."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraws accumulated protocol fees and commission to the admin-controlled account.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buyoutSplitAlgo",
            "args": [
                {
                    "type": "account",
                    "name": "buyer",
                    "desc": "- Account that will receive the collateral"
                },
                {
                    "type": "account",
                    "name": "debtor",
                    "desc": "- Account whose loan is being bought out"
                },
                {
                    "type": "axfer",
                    "name": "premiumAxferTxn",
                    "desc": "- Asset transfer transaction with buyout token payment (xUSD)"
                },
                {
                    "type": "pay",
                    "name": "repayPayTxn",
                    "desc": "- ALGO payment transaction with base token repayment"
                },
                {
                    "type": "uint64",
                    "name": "lstAppId",
                    "desc": "- The LST app backing the collateral"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Purchases a borrower's collateral at a premium using ALGO payment",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maxWithdrawableCollateralLST",
            "args": [
                {
                    "type": "uint64",
                    "name": "lstAppId",
                    "desc": "External LST app backing the collateral."
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "Maximum withdrawable LST balance for the borrower."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Computes how much LST collateral the caller can withdraw using live market data.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdrawCollateral",
            "args": [
                {
                    "type": "uint64",
                    "name": "amountLST",
                    "desc": "Amount of LST being withdrawn."
                },
                {
                    "type": "uint64",
                    "name": "collateralTokenId",
                    "desc": "Asset ID of the collateral LST."
                },
                {
                    "type": "uint64",
                    "name": "lstAppId",
                    "desc": "LST application ID used for exchange-rate validation."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Allows borrowers to withdraw a portion of their collateral within safety limits.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getCirculatingLST",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Total LST tokens representing all depositor claims"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Returns the current amount of LST tokens in circulation",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTotalDeposits",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Total underlying assets available for lending"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Returns the total amount of base assets deposited in the protocol",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getAcceptedCollateralsCount",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Count of registered collateral asset types"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Returns the number of different collateral types accepted by the protocol",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "liquidatePartialAlgo",
            "args": [
                {
                    "type": "account",
                    "name": "debtor",
                    "desc": "- Account whose loan is being liquidated"
                },
                {
                    "type": "pay",
                    "name": "repayPay"
                },
                {
                    "type": "uint64",
                    "name": "repayBaseAmount"
                },
                {
                    "type": "uint64",
                    "name": "lstAppId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Liquidates an undercollateralized loan using ALGO payment",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getLoanStatus",
            "args": [
                {
                    "type": "account",
                    "name": "borrower",
                    "desc": "- Account address to get loan status for"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64,bool,bool)",
                "struct": "getLoanStatusResult",
                "desc": "Object containing debt amount, collateral value, ratios, and liquidation eligibility"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Retrieves comprehensive status information for a borrower's loan",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "gas",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "No-op method kept for compatibility with interfaces that expect a gas entry point.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateCollateralValueUSD",
            "args": [
                {
                    "type": "uint64",
                    "name": "collateralTokenId",
                    "desc": "LST asset representing the collateral."
                },
                {
                    "type": "uint64",
                    "name": "collateralAmount",
                    "desc": "Amount of LST units held."
                },
                {
                    "type": "uint64",
                    "name": "lstApp",
                    "desc": "LST application ID supplying exchange-rate data."
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "Collateral value denominated in USD micro-units."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Calculates the USD value of a collateral position using the LST exchange rate and oracle price.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pickupAlgoRewards",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Harvests newly accrued consensus rewards for ALGO-based markets.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "migrateContract",
            "args": [
                {
                    "type": "pay",
                    "name": "feeTxn",
                    "desc": "Payment covering all inner-transaction fees required for the sweep."
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                "struct": "MigrationSnapshot"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initiates migration by sweeping balances from this contract to the migration administrator.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "acceptMigrationAlgoContract",
            "args": [
                {
                    "type": "axfer",
                    "name": "lstTransferTxn",
                    "desc": "LST asset transfer from the migration admin to this contract."
                },
                {
                    "type": "pay",
                    "name": "algoTxn"
                },
                {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                    "struct": "MigrationSnapshot",
                    "name": "snapshot",
                    "desc": "Snapshot of accounting fields that should be set on the new deployment."
                },
                {
                    "type": "account",
                    "name": "migrationAdmin",
                    "desc": "Account expected to have initiated the migration."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Finalises migration by importing balances and restoring accounting on the new contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "goOnline",
            "args": [
                {
                    "type": "pay",
                    "name": "feePayment",
                    "desc": "Payment covering the go-online fee that accompanies the keyreg."
                },
                {
                    "type": "byte[]",
                    "name": "votePK",
                    "desc": "Voting public key for participation."
                },
                {
                    "type": "byte[]",
                    "name": "selectionPK",
                    "desc": "VRF selection key."
                },
                {
                    "type": "byte[]",
                    "name": "stateProofPK",
                    "desc": "State proof key for light-client support."
                },
                {
                    "type": "uint64",
                    "name": "voteFirst",
                    "desc": "First round for which the key is valid."
                },
                {
                    "type": "uint64",
                    "name": "voteLast",
                    "desc": "Last round for which the key is valid."
                },
                {
                    "type": "uint64",
                    "name": "voteKeyDilution",
                    "desc": "Dilution factor for the participation key."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Registers the application account as an Algorand consensus participant.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "goOffline",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Unregisters the application account from consensus participation.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 43,
                "bytes": 6
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "base_token_id": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "YmFzZV90b2tlbl9pZA==",
                    "desc": "The main lending token used for deposits and borrowing (0 for ALGO)"
                },
                "lst_token_id": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "bHN0X3Rva2VuX2lk",
                    "desc": "LST (Liquidity Staking Token) representing depositor shares in the pool"
                },
                "circulating_lst": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2lyY3VsYXRpbmdfbHN0",
                    "desc": "Total LST tokens currently in circulation (represents depositor claims)"
                },
                "total_deposits": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfZGVwb3NpdHM=",
                    "desc": "Total underlying assets deposited in the protocol"
                },
                "fee_pool": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZmVlX3Bvb2w=",
                    "desc": "Protocol fee accumulation pool (admin withdrawable)"
                },
                "admin_account": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW5fYWNjb3VudA==",
                    "desc": "Administrative account with privileged access to protocol functions"
                },
                "oracle_app": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "b3JhY2xlX2FwcA==",
                    "desc": "External oracle application for asset price feeds"
                },
                "ltv_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bHR2X2Jwcw==",
                    "desc": "Loan-to-Value ratio (e.g., 7500 = 75% max borrowing against collateral)"
                },
                "liq_threshold_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGlxX3RocmVzaG9sZF9icHM=",
                    "desc": "Liquidation threshold (e.g., 8500 = 85% - liquidate when CR falls below)"
                },
                "origination_fee_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "b3JpZ2luYXRpb25fZmVlX2Jwcw==",
                    "desc": "One-time fee charged on loan origination (e.g., 100 = 1%)"
                },
                "protocol_share_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cHJvdG9jb2xfc2hhcmVfYnBz",
                    "desc": "Protocol's share of interest income (e.g., 2000 = 20%)"
                },
                "base_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YmFzZV9icHM=",
                    "desc": "Minimum APR at 0% utilization (basis points per year)."
                },
                "util_cap_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dXRpbF9jYXBfYnBz",
                    "desc": "Hard utilization cap in bps (e.g., 8000 = 80% of deposits may be borrowed)."
                },
                "kink_norm_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "a2lua19ub3JtX2Jwcw==",
                    "desc": "Kink point on normalized utilization (0..10_000 across [0..util_cap])."
                },
                "slope1_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c2xvcGUxX2Jwcw==",
                    "desc": "APR increase from 0 \u2192 kink (added to base) over the normalized range."
                },
                "slope2_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c2xvcGUyX2Jwcw==",
                    "desc": "APR increase from kink \u2192 cap (added after kink) over the normalized range."
                },
                "max_apr_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF4X2Fwcl9icHM=",
                    "desc": "(Optional) Absolute APR ceiling in bps (0 = no cap)."
                },
                "ema_alpha_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZW1hX2FscGhhX2Jwcw==",
                    "desc": "(Optional) Utilization EMA weight in bps (0..10_000; 0 disables smoothing)."
                },
                "max_apr_step_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF4X2Fwcl9zdGVwX2Jwcw==",
                    "desc": "(Optional) Max APR change per accrual step in bps (0 = no limit)."
                },
                "prev_apr_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cHJldl9hcHJfYnBz",
                    "desc": "(Optional, mutable) Last applied APR in bps (for step limiting)."
                },
                "util_ema_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dXRpbF9lbWFfYnBz",
                    "desc": "(Optional, mutable) Stored EMA of normalized utilization in bps."
                },
                "rate_model_type": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmF0ZV9tb2RlbF90eXBl",
                    "desc": "(Optional) Rate model selector (e.g., 0=kinked, 1=linear, 2=power, 3=asymptote)."
                },
                "power_gamma_q16": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cG93ZXJfZ2FtbWFfcTE2",
                    "desc": "(Optional) Power-curve exponent \u03b3 in Q16.16 fixed-point."
                },
                "scarcity_K_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c2NhcmNpdHlfS19icHM=",
                    "desc": "(Optional) Strength parameter for asymptotic/scarcity escalator (bps-scaled)."
                },
                "total_borrows": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfYm9ycm93cw==",
                    "desc": "Total outstanding borrower principal + accrued interest (debt)"
                },
                "borrow_index_wad": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Ym9ycm93X2luZGV4X3dhZA==",
                    "desc": "Multiplicative borrow index (scaled by INDEX_SCALE). Starts at INDEX_SCALE"
                },
                "last_accrual_ts": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdF9hY2NydWFsX3Rz",
                    "desc": "Timestamp (ledger seconds) at which borrow_index_wad was last advanced"
                },
                "last_apr_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdF9hcHJfYnBz",
                    "desc": "APR (in bps) that applied during [last_accrual_ts, now) before recompute"
                },
                "total_borrows_principal": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfYm9ycm93c19wcmluY2lwYWw=",
                    "desc": "Sum of borrower principals (no interest). We\u2019ll migrate total_borrows usage."
                },
                "active_loan_records": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWN0aXZlX2xvYW5fcmVjb3Jkcw==",
                    "desc": "Total number of active loans in the system"
                },
                "accepted_collaterals_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWNjZXB0ZWRfY29sbGF0ZXJhbHNfY291bnQ=",
                    "desc": "Count of different collateral types accepted by the protocol"
                },
                "buyout_token_id": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "YnV5b3V0X3Rva2VuX2lk",
                    "desc": "Total number of active loans in the system"
                },
                "liq_bonus_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGlxX2JvbnVzX2Jwcw==",
                    "desc": "Liquidation bonus in bps (e.g., 500 = 5% bonus to liquidators)"
                },
                "commission_percentage": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y29tbWlzc2lvbl9wZXJjZW50YWdl"
                },
                "current_accumulated_commission": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3VycmVudF9hY2N1bXVsYXRlZF9jb21taXNzaW9u"
                },
                "total_commission_earned": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfY29tbWlzc2lvbl9lYXJuZWQ="
                },
                "total_additional_rewards": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfYWRkaXRpb25hbF9yZXdhcmRz"
                },
                "cash_on_hand": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2FzaF9vbl9oYW5k"
                },
                "migration_admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "bWlncmF0aW9uX2FkbWlu",
                    "desc": "Dedicated account that temporarily receives balances during migration"
                },
                "last_scaled_down_disbursement": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdF9zY2FsZWRfZG93bl9kaXNidXJzZW1lbnQ=",
                    "desc": "Last calculated disbursement amount (for debugging/monitoring)"
                },
                "last_max_borrow": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdF9tYXhfYm9ycm93",
                    "desc": "Last calculated maximum borrowable amount in USD (for debugging)"
                },
                "last_requested_loan": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdF9yZXF1ZXN0ZWRfbG9hbg==",
                    "desc": "Last requested loan amount in USD (for debugging)"
                },
                "debug_diff": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVidWdfZGlmZg==",
                    "desc": "Difference between max borrow and requested (for debugging)"
                },
                "params_updated_at": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGFyYW1zX3VwZGF0ZWRfYXQ="
                },
                "params_update_nonce": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGFyYW1zX3VwZGF0ZV9ub25jZQ=="
                },
                "last_interest_applied": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdF9pbnRlcmVzdF9hcHBsaWVk"
                },
                "delta_debug": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVsdGFfZGVidWc="
                },
                "calculateledSimpleWad": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2FsY3VsYXRlbGVkU2ltcGxlV2Fk"
                },
                "contract_state": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Y29udHJhY3Rfc3RhdGU="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "accepted_collaterals": {
                    "keyType": "AcceptedCollateralKey",
                    "valueType": "AcceptedCollateral",
                    "desc": "Registry of accepted collateral assets with their metadata",
                    "prefix": "YWNjZXB0ZWRfY29sbGF0ZXJhbHM="
                },
                "loan_record": {
                    "keyType": "address",
                    "valueType": "LoanRecord",
                    "desc": "Individual borrower loan records with collateral and debt details",
                    "prefix": "bG9hbl9yZWNvcmQ="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        5582
                    ],
                    "errorMessage": "BAD_COLLATERAL"
                },
                {
                    "pc": [
                        4943,
                        5999
                    ],
                    "errorMessage": "BAD_DEBT_USD"
                },
                {
                    "pc": [
                        2425
                    ],
                    "errorMessage": "BAD_EMA_ALPHA"
                },
                {
                    "pc": [
                        2409
                    ],
                    "errorMessage": "BAD_KINK"
                },
                {
                    "pc": [
                        2420
                    ],
                    "errorMessage": "BAD_MAX_APR"
                },
                {
                    "pc": [
                        5983
                    ],
                    "errorMessage": "BAD_REPAY"
                },
                {
                    "pc": [
                        2395
                    ],
                    "errorMessage": "BAD_UTIL_CAP"
                },
                {
                    "pc": [
                        5922
                    ],
                    "errorMessage": "BASE_NOT_ALGO"
                },
                {
                    "pc": [
                        2936,
                        2992,
                        4268,
                        4565,
                        4902,
                        5139,
                        5335,
                        5345,
                        5486,
                        5554,
                        5584,
                        5611,
                        5621,
                        5868,
                        5952,
                        6119,
                        6136,
                        6470,
                        6480,
                        6559,
                        6637
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        2921,
                        3490,
                        3521,
                        5447,
                        5478,
                        5829,
                        5860,
                        6173,
                        6204,
                        6596,
                        6627
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        3066
                    ],
                    "errorMessage": "CANNOT_USE_BASE_AS_COLLATERAL"
                },
                {
                    "pc": [
                        3077
                    ],
                    "errorMessage": "COLLATERAL_ALREADY_EXISTS"
                },
                {
                    "pc": [
                        2056
                    ],
                    "errorMessage": "COMMISSION_TOO_HIGH"
                },
                {
                    "pc": [
                        3187,
                        3329,
                        3550,
                        3971,
                        4586,
                        4794,
                        4892,
                        5324,
                        5528,
                        5605,
                        5931,
                        6670
                    ],
                    "errorMessage": "CONTRACT_NOT_ACTIVE"
                },
                {
                    "pc": [
                        5645
                    ],
                    "errorMessage": "EXCEEDS_MAX_SAFE"
                },
                {
                    "pc": [
                        7300
                    ],
                    "errorMessage": "INSUFFICIENT_CASH"
                },
                {
                    "pc": [
                        3001,
                        5657
                    ],
                    "errorMessage": "INSUFFICIENT_COLLATERAL"
                },
                {
                    "pc": [
                        3103
                    ],
                    "errorMessage": "INSUFFICIENT_MBR"
                },
                {
                    "pc": [
                        2609
                    ],
                    "errorMessage": "INVALID_STATE"
                },
                {
                    "pc": [
                        2946,
                        2951,
                        2956,
                        2964,
                        3007,
                        3012,
                        3017,
                        3025,
                        3754,
                        4273,
                        4278,
                        4287,
                        4709,
                        4713,
                        4911,
                        5149,
                        5154,
                        5162,
                        5167,
                        5337,
                        5370,
                        5487,
                        5556,
                        5613,
                        5705,
                        5710,
                        5752,
                        5869,
                        5954,
                        6120,
                        6387,
                        6391,
                        6472,
                        6500,
                        6638
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        2841
                    ],
                    "errorMessage": "LST token not set"
                },
                {
                    "pc": [
                        3962,
                        6468
                    ],
                    "errorMessage": "Loan record does not exist"
                },
                {
                    "pc": [
                        6228
                    ],
                    "errorMessage": "NOTHING_TO_SEIZE"
                },
                {
                    "pc": [
                        6012
                    ],
                    "errorMessage": "NOT_LIQUIDATABLE"
                },
                {
                    "pc": [
                        4927,
                        5968
                    ],
                    "errorMessage": "NO_DEBT"
                },
                {
                    "pc": [
                        5315,
                        5541,
                        5596,
                        5942
                    ],
                    "errorMessage": "NO_LOAN"
                },
                {
                    "pc": [
                        4883
                    ],
                    "errorMessage": "NO_LOAN_RECORD"
                },
                {
                    "pc": [
                        1011,
                        1023,
                        1075,
                        1118,
                        1144,
                        1156,
                        1184,
                        1193,
                        1267,
                        1303,
                        1320,
                        1337,
                        1354,
                        1378,
                        1399,
                        1449,
                        1477,
                        1503,
                        1525,
                        1542,
                        1566,
                        1615,
                        1657,
                        1694,
                        1725,
                        1745,
                        1772,
                        1798,
                        1820,
                        1838,
                        1854,
                        1914,
                        1970
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        7258
                    ],
                    "errorMessage": "Only admin can go offline"
                },
                {
                    "pc": [
                        7172
                    ],
                    "errorMessage": "Only admin can go online"
                },
                {
                    "pc": [
                        6661
                    ],
                    "errorMessage": "Only admin can pickup rewards"
                },
                {
                    "pc": [
                        7024
                    ],
                    "errorMessage": "Only migration admin can accept migration"
                },
                {
                    "pc": [
                        6788
                    ],
                    "errorMessage": "Only migration admin can migrate"
                },
                {
                    "pc": [
                        2381,
                        2603,
                        2632,
                        3058,
                        4785
                    ],
                    "errorMessage": "UNAUTHORIZED"
                },
                {
                    "pc": [
                        2441
                    ],
                    "errorMessage": "UNSUPPORTED_MODEL"
                },
                {
                    "pc": [
                        3695
                    ],
                    "errorMessage": "UTIL_CAP_EXCEEDED"
                },
                {
                    "pc": [
                        5567
                    ],
                    "errorMessage": "WRONG_COLLATERAL"
                },
                {
                    "pc": [
                        5519
                    ],
                    "errorMessage": "ZERO_AMOUNT"
                },
                {
                    "pc": [
                        6675,
                        6680,
                        6859,
                        6864
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        6818,
                        6979
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        2889
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        2050,
                        2675,
                        2786,
                        2865,
                        3209,
                        3216,
                        3361,
                        3370,
                        3589,
                        3622,
                        4608,
                        4815,
                        5057,
                        5089,
                        6044,
                        6803,
                        7060,
                        7082,
                        7196
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        2688,
                        2693,
                        2700,
                        2710
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        1974
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        1014,
                        1026,
                        1078,
                        1121,
                        1147,
                        1159,
                        1187,
                        1196,
                        1270,
                        1306,
                        1323,
                        1340,
                        1357,
                        1381,
                        1402,
                        1452,
                        1480,
                        1506,
                        1528,
                        1545,
                        1569,
                        1618,
                        1660,
                        1697,
                        1728,
                        1748,
                        1775,
                        1801,
                        1823,
                        1841,
                        1857,
                        1917
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        2022,
                        2032,
                        2237,
                        2305,
                        2316,
                        2337,
                        2349,
                        2379,
                        2507,
                        2538,
                        2546,
                        2551,
                        2560,
                        2586,
                        2597,
                        2630,
                        2647,
                        2657,
                        2679,
                        2759,
                        2769,
                        2827,
                        2834,
                        2849,
                        2883,
                        3049,
                        3056,
                        3085,
                        3107,
                        3131,
                        3178,
                        3183,
                        3229,
                        3242,
                        3264,
                        3273,
                        3292,
                        3298,
                        3319,
                        3325,
                        3387,
                        3391,
                        3407,
                        3436,
                        3447,
                        3546,
                        3645,
                        3657,
                        3677,
                        3682,
                        3690,
                        3700,
                        3720,
                        3769,
                        3789,
                        3851,
                        3873,
                        3891,
                        3923,
                        3967,
                        4004,
                        4012,
                        4020,
                        4031,
                        4039,
                        4050,
                        4058,
                        4066,
                        4094,
                        4170,
                        4243,
                        4284,
                        4297,
                        4343,
                        4411,
                        4434,
                        4455,
                        4507,
                        4518,
                        4536,
                        4577,
                        4582,
                        4644,
                        4671,
                        4719,
                        4740,
                        4783,
                        4790,
                        4820,
                        4825,
                        4888,
                        4957,
                        4970,
                        4987,
                        4995,
                        5098,
                        5188,
                        5212,
                        5289,
                        5320,
                        5400,
                        5524,
                        5601,
                        5689,
                        5782,
                        5896,
                        5901,
                        5907,
                        5919,
                        5927,
                        6010,
                        6048,
                        6106,
                        6314,
                        6369,
                        6400,
                        6408,
                        6497,
                        6659,
                        6666,
                        6687,
                        6697,
                        6721,
                        6732,
                        6744,
                        6757,
                        6768,
                        6786,
                        6811,
                        6824,
                        6829,
                        6850,
                        6879,
                        6897,
                        6902,
                        6908,
                        6914,
                        6920,
                        6926,
                        6932,
                        6938,
                        6966,
                        6988,
                        6992,
                        7022,
                        7053,
                        7170,
                        7241,
                        7252,
                        7280,
                        7296,
                        7305
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        3673
                    ],
                    "errorMessage": "exceeds LTV limit"
                },
                {
                    "pc": [
                        5352,
                        5591,
                        5628,
                        6143,
                        6566
                    ],
                    "errorMessage": "mismatched LST app"
                },
                {
                    "pc": [
                        1090,
                        1426,
                        1581,
                        1630,
                        1759
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        1036,
                        1100,
                        1131,
                        1286,
                        1436,
                        1468,
                        1490,
                        1606,
                        1648,
                        1671,
                        1685,
                        1713,
                        1789,
                        1811,
                        1927
                    ],
                    "errorMessage": "transaction type is pay"
                },
                {
                    "pc": [
                        6556
                    ],
                    "errorMessage": "unknown collateral"
                },
                {
                    "pc": [
                        3164,
                        3631
                    ],
                    "errorMessage": "unsupported collateral"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}